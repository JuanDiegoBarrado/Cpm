<<<<<<< HEAD
clas Person {
    praivet int age;
    praivet int address;

    Person(int age, int address) {
        dis.age = age;
        dis.address = address;
    }

    public func getAge() : int {
        return age;
    }
}

difain CONST 5;

func mein() : int {
    Person array[CONST];
    for(int i = 0; i < CONST; i = i + 1) {
        array[i] = Person(10 + 2 * i, 98234);
    }
    Person~ ptr = array;
    for(int i = 0; i < CONST; i = i + 1) {
        ceaut((~ptr).getAge());
        ptr = ptr + 1;
        ceaut(9999);
        ceaut(i);
    }
    ptr = array;
    for(int i = 0; i < CONST; i = i + 1) {
        ceaut((~ptr).getAge());
        ptr = ptr + 1;
        ceaut(9999);
        ceaut(i);
    }
    //ptr = ptr + 4;
    //for(int i = 0; i < CONST; i = i + 1) {
    //    ceaut((~ptr).getAge());
    //    ptr = ptr - 1;
    //    ceaut(9999);
    //    ceaut(i);
    //}
    //ptr = ptr - 1;
    //for(int j = 2; j < CONST; j = j + 1) {
    //    ceaut((~ptr).getAge());
    //    ptr = ptr - 1;
    //}
=======
// Basic-types pointers of pointers
func mein() : int {
    int a = -15;
    int~ ptrA = &a;
    int ptrPtrA = &ptrA;
    ceaut(a);
    ceaut(~ptrA);
    ceaut(ptrPtrA);

    ~ptrA = 1500;
    ceaut(a);
    ceaut(~ptrA);
    ceaut(ptrPtrA);

    ptrPtrA = 0;
    ceaut(a);
    ceaut(~ptrA);
    ceaut(~~ptrPtrA);

>>>>>>> 41ed2bf15e803b3d562540c42205076c20de83b4
    return 0;
}

/*
RESULT:
<<<<<<< HEAD
10
12
14
16
18
18
16
14
12
10
=======
-15
-15
-15
1500
1500
1500
0
0
0
>>>>>>> 41ed2bf15e803b3d562540c42205076c20de83b4
*/