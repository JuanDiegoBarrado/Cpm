difain CONST 10;
taipdef bul boolean;

func CONST() : int { //ERROR
    return 1;
}

func errorFunction() : int {
    int b = a + 1 * 3; // ERROR a de referencia
    return b;
}

func function(int a) : int {
    int b = a + 1 * 3;
    return b;
}

func function() : int { // SOBRECARGA deberia entrar
    int b = 1 * 3;
    return b;
}

func function(int a, int d, int c) : int { // SOBRECARGA deberia entrar
    int b = 1 * 3;
    return b;
}

func boolean(int a) : int { // ERROR
    int b = a + 1 * 3;
    return b;
}

estrut CONST { //ERROR
    int a;
    CONST(){
        this.a = a;
    }
}

clas CONST { // ERROR
    praivet int a;
    CONST() { 
        this.a = a; 
    }
}

clas Myclase {
    praivet int a;
    public int b;
    Myclase(int a) {
        this.a = a;
        b = 7;
    }
}

difain Myclase 10; // ERROR
taipdef int CONST; //ERROR

func mein() : int  {
    int CONST; // ERROR binding
    CONST = 0; // Esto si que deberia entrar por binding
    int a = 0;
    int a = 0; // ERROR
    int b = 0;
    int c = 0;
    int a = 0; // ERROR
    int x[1][2][3][4];
    tipo h = niu tipo[]; // ERROR x2
    ~x = niu int[1][2][3][4];
    Myclase objetoClase = niu Myclase(a);

    if (a <= 0) {
        int a = 0;
        a = 3;
        b = 2;
        int d = 0;
        c = 1;
        z = 0; // ERROR de identificador
        b = 0;
        a = function(a);
        a = funcInexistente(4); // ERROR
    }
    
    d = 1; // ERROR invalidIdReference
    c = 0;

    return 1;
}