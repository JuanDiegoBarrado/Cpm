package syntax;

import java_cup.runtime.*;
import lexicon.AnalizadorLexicoTiny;
import lexicon.LexiconUnit;
import lexicon.TokenValue;
import errors.GestionErroresTiny;
import ast.*;
import ast.expressions.*;
import ast.expressions.operators.*;
import ast.expressions.operands.*;
import ast.preamble.*;
import ast.sentences.*;
import ast.sentences.declarations.*;
import ast.sentences.instructions.*;
import ast.types.interfaces.*;
import ast.types.definitions.*;
import java.util.List;
import java.util.ArrayList;
import java.util.LinkedList;

scan with {: return getScanner().next_token(); :};
parser code {: 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((LexiconUnit)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);
:};


terminal       TokenValue ID, INTEGER, INT_T,SUM_OP, SUBS_OP,
               MULT_OP, DIV_OP, MOD_OP, POW_OP, PARENTESIS_OPEN,
               PARENTESIS_CLOSE, BRACKET_OPEN, BRACKET_CLOSE,
               SQ_BRACKET_OPEN, SQ_BRACKET_CLOSE, LESS_OP,
               GREATER_OP, EQUAL_OP, LESS_OR_EQ_OP, GREATER_OR_EQ_OP,
               NOT_EQUAL_OP, BOOLEAN_T, AND_OP, OR_OP, NOT_OP, TRUE, FALSE,
               COMMA, COLON, SEMICOLON, CLASS_T, STRUCT_T, FIELD_ACCESS,
               FUNC_T, POINTER_OP, REFERENCE_OP, NEW_OP, TYPEDEF, DEFINE,
               ASSIGNATION_OP, IF, ELSE, SWITCH, CASE, BREAK,
               DEFAULT, WHILE, FOR, CONTINUE, INPUT_FUNC,
               OUTPUT_FUNC, RETURN, THIS, PUBLIC, PRIVATE, MAIN;

non terminal   Argument ARGUMENT;

non terminal   Array_Type ARRAY_CONSTRUCTOR;

non terminal   Block FUNCTION_BODY, ELSE_INS;

non terminal   ClassFunctions CLASS_INIT;

non terminal   Constructor CONSTRUCTOR;

non terminal   Declaration DECLARATION;

non terminal   Default_Ins DEFAULT_CASE;

non terminal   Definition DEF, CLASS_DEF, STRUCT_DEF, DEFINE_DEF, TYPEDEF_DEF;

non terminal   Expression EXPRESSION, B0, B1, B2, B3, B4, E0, E1, E2, E3, E4, E5, E6,
               OPT_INTEGER, ID_EX, RETURN_VALUE, TERMINAL;

non terminal   Function MAIN_INS, FUNCTION_DEF, TYPED_FUNCTION, VOID_FUNCTION;
               
non terminal   FunctionCall ID_PARENTESIS;

non terminal   List<Argument>  ARGUMENTS, MORE_ARGUMENTS;

non terminal   List<Attribute>  DECLARATIONS_CLASS, DECLARATIONS_STRUCT;

non terminal   List<Case_Ins> CASES_INS;

non terminal   List<Constructor> MORE_CONSTRUCTORS;

non terminal   LinkedList<Definition> S1;

non terminal   List<Expression> EXPRESSIONS, MORE_EXPRESSIONS;

non terminal   List<Method> METHODS;

non terminal   Literal LITERAL;

non terminal   Program S;

non terminal   Sentence SENTENCE, IF_INS, SWITCH_INS, WHILE_INS, BREAK_INS, CONTINUE_INS, FOR_INS, OPT_ASSIGNATION,
                        IO_INS, INPUT_INS, OUTPUT_INS, ASSIGNATION_INS, DECLARATION_AND_ASSIGNATION_INS;

non terminal   Type TYPE;

non terminal   Visibility VISIBILITY;


// Grammar start

S     ::= S1:array MAIN_INS:m
{: RESULT = new Program(array, m); :};
S1    ::= S1:array DEF:d
{: array.add(d); RESULT = array; :};
S1    ::= /*EMPTY*/
{: RESULT = new LinkedList<>(); :};


// Definitions

DEF                  ::= CLASS_DEF:c
{: RESULT = c; :};
DEF                  ::= STRUCT_DEF:s
{: RESULT = s; :};
DEF                  ::= DEFINE_DEF:d
{: RESULT = d; :};
DEF                  ::= TYPEDEF_DEF:t
{: RESULT = t; :};
DEF                  ::= FUNCTION_DEF:f
{: RESULT = f; :};

CLASS_DEF            ::= CLASS_T:c ID:id BRACKET_OPEN DECLARATIONS_CLASS:dec_class CLASS_INIT:class_func BRACKET_CLOSE
{: RESULT = new ClassDefinition(id.lexeme, dec_class, class_func, c.row); :};
CLASS_INIT           ::= CONSTRUCTOR:c MORE_CONSTRUCTORS:constructors METHODS:methods
{: List<Constructor> allConstructors = new ArrayList<>(); allConstructors.add(c); allConstructors.addAll(constructors); RESULT = new ClassFunctions(allConstructors, methods); :};
MORE_CONSTRUCTORS    ::= MORE_CONSTRUCTORS:array CONSTRUCTOR:c
{: array.add(c); RESULT = array; :};
MORE_CONSTRUCTORS    ::= /*EMPTY*/
{: RESULT = new ArrayList<>(); :};
CONSTRUCTOR          ::= ID:id PARENTESIS_OPEN ARGUMENTS:args PARENTESIS_CLOSE BRACKET_OPEN FUNCTION_BODY:body BRACKET_CLOSE
{: RESULT = new Constructor(id.lexeme, args, null, body, null, id.row); :};
METHODS              ::= METHODS:array VISIBILITY:vis FUNCTION_DEF:func 
{: Method method = new Method(func, vis); array.add(method); RESULT = array; :};
METHODS              ::= /*EMPTY*/ 
{: RESULT = new ArrayList<>(); :};
VISIBILITY           ::= PUBLIC
{: RESULT = new Public_Vis(); :};
VISIBILITY           ::= PRIVATE
{: RESULT = new Private_Vis(); :};
DECLARATIONS_CLASS   ::= DECLARATIONS_CLASS:array VISIBILITY:vis DECLARATION:dec SEMICOLON
{: array.add(new Attribute(dec, vis)); RESULT = array; :};
DECLARATIONS_CLASS   ::= /*EMPTY*/
{: RESULT = new ArrayList<>(); :};

STRUCT_DEF           ::= STRUCT_T:s ID:id BRACKET_OPEN DECLARATIONS_STRUCT:declarations CONSTRUCTOR:c MORE_CONSTRUCTORS:constructors BRACKET_CLOSE
{: List<Constructor> allConstructors = new ArrayList<>(); allConstructors.add(c); allConstructors.addAll(constructors); RESULT = new StructDefinition(id.lexeme, declarations, allConstructors, s.row); :};
DECLARATIONS_STRUCT  ::= DECLARATIONS_STRUCT:array DECLARATION:dec SEMICOLON
{: array.add(new Attribute(dec)); RESULT = array; :};
DECLARATIONS_STRUCT  ::= /*EMPTY*/
{: RESULT = new ArrayList<>(); :};


// Functions

FUNCTION_DEF      ::= TYPED_FUNCTION:func
{: RESULT = func; :};
FUNCTION_DEF      ::= VOID_FUNCTION:func
{: RESULT = func; :};
TYPED_FUNCTION    ::= FUNC_T:f ID:id PARENTESIS_OPEN ARGUMENTS:args PARENTESIS_CLOSE COLON TYPE:t BRACKET_OPEN FUNCTION_BODY:body RETURN RETURN_VALUE:e SEMICOLON BRACKET_CLOSE
{: RESULT = new Function(id.lexeme, args, t, body, e, f.row); :};
VOID_FUNCTION     ::= FUNC_T:f ID:id PARENTESIS_OPEN ARGUMENTS:args PARENTESIS_CLOSE BRACKET_OPEN FUNCTION_BODY:body RETURN SEMICOLON BRACKET_CLOSE
{: RESULT = new Function(id.lexeme, args, null, body, null, f.row); :};
ARGUMENTS         ::= MORE_ARGUMENTS:array ARGUMENT:arg
{: array.add(arg); RESULT = array; :};
ARGUMENTS         ::= /*EMPTY*/
{: RESULT = new ArrayList<>(); :}; 
MORE_ARGUMENTS    ::= MORE_ARGUMENTS:array ARGUMENT:arg COMMA
{: array.add(arg); RESULT = array; :}; 
MORE_ARGUMENTS    ::= /*EMPTY*/ 
{: RESULT = new ArrayList<>(); :};
ARGUMENT          ::= DECLARATION:dec 
{: RESULT = new Argument(dec); :};
ARGUMENT          ::= TYPE:t REFERENCE_OP ID:id
{: RESULT = new Argument(t, id.lexeme, true, id.row); :};
FUNCTION_BODY     ::= FUNCTION_BODY:body SENTENCE:s 
{: body.add_instruction(s); RESULT = body; :};
FUNCTION_BODY     ::= /*EMPTY*/ 
{: RESULT = new Block(); :};
RETURN_VALUE      ::= EXPRESSION:e 
{: RESULT = e; :};


// Define

DEFINE_DEF        ::= DEFINE:d ID:id LITERAL:e SEMICOLON 
{: RESULT = new Define(id.lexeme, e, d.row); :};

// Typedef 

TYPEDEF_DEF    ::= TYPEDEF:t DECLARATION:dec SEMICOLON
{: RESULT = new Typedef(dec, t.row); :};


// Assignation

DECLARATION                      ::= TYPE:t ID:id ARRAY_CONSTRUCTOR:array
{: RESULT = Declaration.manageDeclaration(t, id.lexeme, array, id.row); :};
//DECLARATION                      ::= error ID:id ARRAY_CONSTRUCTOR:array
//{: RESULT = new Error_Ins(); :};
//DECLARATION                      ::= TYPE:t error ARRAY_CONSTRUCTOR:array
//{: RESULT = new Error_Ins(); :};
//DECLARATION                      ::= TYPE:t ID:id error
//{: RESULT = new Error_Ins(); :};

ARRAY_CONSTRUCTOR                ::= ARRAY_CONSTRUCTOR:prevArray SQ_BRACKET_OPEN:b OPT_INTEGER:i SQ_BRACKET_CLOSE
{: Array_Type newArray = new Array_Type(i, b.row); RESULT = Array_Type.updateTypes(newArray, prevArray); :};

//FIXME Esto pinta mal
//ARRAY_CONSTRUCTOR                ::= error SQ_BRACKET_OPEN OPT_INTEGER:i SQ_BRACKET_CLOSE
//{: RESULT = new Error_Ins(); :};
//ARRAY_CONSTRUCTOR                ::= ARRAY_CONSTRUCTOR:prevArray SQ_BRACKET_OPEN error SQ_BRACKET_CLOSE
//{: RESULT = new Error_Ins(); :};

ARRAY_CONSTRUCTOR                ::= /*EMPTY*/ 
{: RESULT = null; :};

ID_PARENTESIS                    ::= ID:id PARENTESIS_OPEN EXPRESSIONS:expressions PARENTESIS_CLOSE
{: RESULT = new FunctionCall(id.lexeme, expressions, id.row); :};

DECLARATION_AND_ASSIGNATION_INS  ::= DECLARATION:dec ASSIGNATION_OP:a EXPRESSION:e SEMICOLON 
{: RESULT = new DeclarationAndAssignation(dec, e, a.row); :};
// DECLARATION_AND_ASSIGNATION_INS  ::= error ASSIGNATION_OP EXPRESSION:e SEMICOLON 
// {: RESULT = new Error_Ins(); :};

DECLARATION_AND_ASSIGNATION_INS  ::= DECLARATION:dec ASSIGNATION_OP:a NEW_OP TYPE:t ARRAY_CONSTRUCTOR:array SEMICOLON
{: RESULT = new DeclarationAndAssignation(dec, new New_Op(Declaration.manageType(t, array), a.row), a.row); :};
//DECLARATION_AND_ASSIGNATION_INS  ::= error ASSIGNATION_OP NEW_OP TYPE:t ARRAY_CONSTRUCTOR:array SEMICOLON
//{: RESULT = new Error_Ins(); :};
//DECLARATION_AND_ASSIGNATION_INS  ::= DECLARATION:dec ASSIGNATION_OP NEW_OP error ARRAY_CONSTRUCTOR:array SEMICOLON
//{: RESULT = new Error_Ins(); :};
//DECLARATION_AND_ASSIGNATION_INS  ::= DECLARATION:dec ASSIGNATION_OP NEW_OP TYPE:t error SEMICOLON
//{: RESULT = new Error_Ins(); :};

DECLARATION_AND_ASSIGNATION_INS  ::= DECLARATION:dec ASSIGNATION_OP:a NEW_OP ID_PARENTESIS:e SEMICOLON
{: RESULT = new DeclarationAndAssignation(dec, new New_Op(new ConstructorCall (e, a.row), a.row), a.row); :};
//DECLARATION_AND_ASSIGNATION_INS  ::= error ASSIGNATION_OP NEW_OP ID_PARENTESIS:e SEMICOLON
//{: RESULT = new Error_Ins(); :};
//DECLARATION_AND_ASSIGNATION_INS  ::= DECLARATION:dec ASSIGNATION_OP NEW_OP error SEMICOLON
//{: RESULT = new Error_Ins(); :};

ASSIGNATION_INS                  ::= EXPRESSION:iz ASSIGNATION_OP:a EXPRESSION:dc SEMICOLON 
{: RESULT = new Assignation_Ins(iz, dc, a.row) ; :};

//FIXME
ASSIGNATION_INS                  ::= EXPRESSION:iz ASSIGNATION_OP:a NEW_OP TYPE:t ARRAY_CONSTRUCTOR:array SEMICOLON
{: RESULT = new Assignation_Ins(iz, new New_Op(Declaration.manageType(t, array), a.row), a.row); :};
//ASSIGNATION_INS                  ::= error NEW_OP TYPE:t ARRAY_CONSTRUCTOR:array SEMICOLON
//{: RESULT = new Error_Ins(); :};
//ASSIGNATION_INS                  ::= EXPRESSION:iz NEW_OP error ARRAY_CONSTRUCTOR:array SEMICOLON
//{: RESULT = new Error_Ins(); :};
//ASSIGNATION_INS                  ::= EXPRESSION:iz NEW_OP TYPE:t error SEMICOLON
//{: RESULT = new Error_Ins(); :};

ASSIGNATION_INS                  ::= EXPRESSION:iz ASSIGNATION_OP:a NEW_OP ID_PARENTESIS:dc SEMICOLON
{: RESULT = new Assignation_Ins(iz, new New_Op(new ConstructorCall (dc, a.row), a.row), a.row); :};
//ASSIGNATION_INS                  ::= error ASSIGNATION_OP NEW_OP ID_PARENTESIS:dc SEMICOLON
//{: RESULT = new Error_Ins(); :};
//ASSIGNATION_INS                  ::= EXPRESSION:iz ASSIGNATION_OP NEW_OP error SEMICOLON
//{: RESULT = new Error_Ins(); :};

// If

IF_INS      ::= IF:i PARENTESIS_OPEN EXPRESSION:cond PARENTESIS_CLOSE BRACKET_OPEN FUNCTION_BODY:if_body BRACKET_CLOSE ELSE_INS:else_body 
{: RESULT = new If_Ins(cond, if_body, else_body, i.row); :};
IF_INS      ::= IF:i error 
{: RESULT = new Error_Ins(i.row); :};

ELSE_INS    ::= ELSE BRACKET_OPEN FUNCTION_BODY:body BRACKET_CLOSE 
{: RESULT = body; :};
ELSE_INS    ::= ELSE:e error 
{: List<Sentence> listElse = new ArrayList<>(); listElse.add(new Error_Ins(e.row));  RESULT = new Block(listElse); :};
ELSE_INS    ::= /*EMPTY*/ 
{: RESULT = new Block(new ArrayList<>()); :};


// Switch

SWITCH_INS        ::= SWITCH:s PARENTESIS_OPEN EXPRESSION:e PARENTESIS_CLOSE BRACKET_OPEN CASES_INS:array DEFAULT_CASE:default_case BRACKET_CLOSE 
{: RESULT = new Switch_Ins(e, array, default_case, s.row); :};

CASES_INS         ::= CASES_INS:array CASE:c PARENTESIS_OPEN LITERAL:cond PARENTESIS_CLOSE COLON FUNCTION_BODY:body 
{: array.add(new Case_Ins(cond, body, c.row)) ; RESULT = array; :};
CASES_INS         ::= /*EMPTY*/
{: RESULT = new ArrayList<>(); :};

DEFAULT_CASE      ::= DEFAULT:d COLON FUNCTION_BODY:body BREAK:b SEMICOLON 
{: body.add_instruction(new Break_Ins(b.row)); RESULT = new Default_Ins(body, d.row); :};


// While

WHILE_INS      ::= WHILE:w PARENTESIS_OPEN EXPRESSION:cond PARENTESIS_CLOSE BRACKET_OPEN FUNCTION_BODY:body BRACKET_CLOSE 
{: RESULT = new While_Ins(cond, body, w.row); :};
WHILE_INS      ::= WHILE:w error
{: RESULT = new Error_Ins(w.row); :};


BREAK_INS      ::= BREAK:b SEMICOLON 
{: RESULT = new Break_Ins(b.row); :};
CONTINUE_INS   ::= CONTINUE:c SEMICOLON 
{: RESULT = new Continue_Ins(c.row); :};


// For

<<<<<<< HEAD
FOR_INS           ::= FOR:f PARENTESIS_OPEN SENTENCE:s1 EXPRESSION:cond SEMICOLON OPT_ASSIGNATION:s2 PARENTESIS_CLOSE BRACKET_OPEN FUNCTION_BODY:body BRACKET_CLOSE 
{: RESULT = new For_Ins(s1, cond, s2, body, f.row); :};
=======
FOR_INS  ::= FOR:f PARENTESIS_OPEN SENTENCE:s1 SEMICOLON EXPRESSION:cond SEMICOLON SENTENCE:s2 PARENTESIS_CLOSE BRACKET_OPEN FUNCTION_BODY:body BRACKET_CLOSE 
{: System.out.println("for falla"); RESULT = new For_Ins(s1, cond, s2, body, f.row); :};
>>>>>>> 41ed2bf15e803b3d562540c42205076c20de83b4
// FOR_INS  ::= FOR:f error
// {: RESULT = new Error_Ins(f.row); :};

OPT_ASSIGNATION   ::= EXPRESSION:iz ASSIGNATION_OP:a EXPRESSION:dc 
{: RESULT = new Assignation_Ins(iz, dc, a.row) ; :};
OPT_ASSIGNATION   ::= /*EMPTY*/
{: RESULT = new Empty_Ins(0); :}; //FIXME No le pasamos una row real

// I/O

IO_INS  ::= INPUT_INS:s 
{: RESULT = s; :};
IO_INS  ::= OUTPUT_INS:s 
{: RESULT = s; :};

INPUT_INS   ::= INPUT_FUNC:i PARENTESIS_OPEN EXPRESSION:e PARENTESIS_CLOSE SEMICOLON 
{: RESULT = new Input_Ins(e, i.row); :};

OUTPUT_INS  ::= OUTPUT_FUNC:o PARENTESIS_OPEN EXPRESSION:e PARENTESIS_CLOSE SEMICOLON 
{: RESULT = new Output_Ins(e, o.row); :};

// Main

MAIN_INS    ::= FUNC_T:f MAIN PARENTESIS_OPEN PARENTESIS_CLOSE COLON INT_T:int_t BRACKET_OPEN FUNCTION_BODY:body RETURN INTEGER:i SEMICOLON BRACKET_CLOSE 
{: RESULT = new Function("main", new ArrayList<>(), new Int_Type(int_t.row), body, new Int_Value(i.lexeme, i.row), f.row); :};


// Boolean and arithmetic expresions

EXPRESSION        ::= B0:e 
{: RESULT = e ; :};
EXPRESSION        ::= error 
{: RESULT = new Error_Exp(); :};

B0                ::= B1:iz LESS_OR_EQ_OP:l B1:dc 
{: RESULT = new Less_Or_Eq_Op(iz, dc, l.row); :};
B0                ::= error LESS_OR_EQ_OP B1:dc 
{: RESULT = new Error_Exp(); :};
B0                ::= B1:iz LESS_OR_EQ_OP error
{: RESULT = new Error_Exp(); :};

B0                ::= B1:iz GREATER_OR_EQ_OP:g B1:dc 
{: RESULT = new Greater_Or_Eq_Op(iz, dc, g.row); :};
B0                ::= error GREATER_OR_EQ_OP B1:dc 
{: RESULT = new Error_Exp(); :};
B0                ::= B1:iz GREATER_OR_EQ_OP error
{: RESULT = new Error_Exp(); :};

B0                ::= B1:iz LESS_OP:l B1:dc 
{: RESULT = new Less_Op(iz, dc, l.row); :};
B0                ::= error LESS_OP B1:dc 
{: RESULT = new Error_Exp(); :};
B0                ::= B1:iz LESS_OP error
{: RESULT = new Error_Exp(); :};

B0                ::= B1:iz GREATER_OP:g B1:dc 
{: RESULT = new Greater_Op(iz, dc, g.row); :};
B0                ::= error GREATER_OP B1:dc 
{: RESULT = new Error_Exp(); :};
B0                ::= B1:iz GREATER_OP error
{: RESULT = new Error_Exp(); :};

B0                ::= B1:iz EQUAL_OP:e B1:dc 
{: RESULT = new Equal_Op(iz, dc, e.row); :};
B0                ::= error EQUAL_OP B1:dc 
{: RESULT = new Error_Exp(); :};
B0                ::= B1:iz EQUAL_OP error
{: RESULT = new Error_Exp(); :};

B0                ::= B1:iz NOT_EQUAL_OP:n B1:dc 
{: RESULT = new Not_Equal_Op(iz, dc, n.row); :};
B0                ::= error NOT_EQUAL_OP B1:dc 
{: RESULT = new Error_Exp(); :};
B0                ::= B1:iz NOT_EQUAL_OP error
{: RESULT = new Error_Exp(); :};

B0                ::= B1:e 
{: RESULT = e; :};

B1                ::= B1:iz OR_OP:o B2:dc 
{: RESULT = new Or_Op(iz, dc, o.row); :};
B1                ::= error OR_OP B2:dc 
{: RESULT = new Error_Exp(); :};
B1                ::= B1:iz OR_OP error 
{: RESULT = new Error_Exp(); :};

B1                ::= B2:e 
{: RESULT = e; :};

B2                ::= B2:iz AND_OP:a B3:dc 
{: RESULT = new And_Op(iz, dc, a.row); :};
B2                ::= error AND_OP B3:dc 
{: RESULT = new Error_Exp(); :};
B2                ::= B2:iz AND_OP error 
{: RESULT = new Error_Exp(); :};

B2                ::= B3:e 
{: RESULT = e; :};

B3                ::= NOT_OP:n B4:e 
{: RESULT = new Not_Op(e, n.row); :};
B3                ::= NOT_OP error
{: RESULT = new Error_Exp(); :};

B3                ::= B4:e 
{: RESULT = e; :};

B4                ::= E0:e 
{: RESULT = e; :};

E0                ::= E0:iz SUM_OP:s E1:dc 
{: RESULT = new Sum_Op(iz, dc, s.row); :};
E0                ::= error SUM_OP E1:dc 
{: RESULT = new Error_Exp(); :};
E0                ::= E0:iz SUM_OP error
{: RESULT = new Error_Exp(); :};

E0                ::= E0:iz SUBS_OP:s E1:dc 
{: RESULT = new Subs_Op(iz, dc, s.row); :};
E0                ::= error SUBS_OP E1:dc 
{: RESULT = new Error_Exp(); :};
E0                ::= E0:iz SUBS_OP error
{: RESULT = new Error_Exp(); :};

E0                ::= SUBS_OP:s E1:e 
{: RESULT = new Minus_Op(e, s.row); :};
E0                ::= SUBS_OP error
{: RESULT = new Error_Exp(); :};

E0                ::= E1:e 
{: RESULT = e; :};

E1                ::= E1:iz MULT_OP:m E2:dc 
{: RESULT = new Mult_Op(iz, dc, m.row); :};
E1                ::= error MULT_OP E2:dc 
{: RESULT = new Error_Exp(); :};
E1                ::= E1:iz MULT_OP error
{: RESULT = new Error_Exp(); :};

E1                ::= E1:iz DIV_OP:d E2:dc 
{: RESULT = new Div_Op(iz, dc, d.row); :};
E1                ::= error DIV_OP E2:dc 
{: RESULT = new Error_Exp(); :};
E1                ::= E1:iz DIV_OP error
{: RESULT = new Error_Exp(); :};

E1                ::= E1:iz MOD_OP:m E2:dc 
{: RESULT = new Mod_Op(iz, dc, m.row); :};
E1                ::= error MOD_OP E2:dc 
{: RESULT = new Error_Exp(); :};
E1                ::= E1:iz MOD_OP error
{: RESULT = new Error_Exp(); :};

E1                ::= E2:e 
{: RESULT = e; :};

E2                ::= E3:iz POW_OP:p E3:dc 
{: RESULT = new Pow_Op(iz, dc, p.row); :};
E2                ::= error POW_OP E3:dc 
{: RESULT = new Error_Exp(); :};
E2                ::= E3:iz POW_OP error
{: RESULT = new Error_Exp(); :};

E2                ::= E3:e 
{: RESULT = e; :};

E3                ::= POINTER_OP:p E3:dc 
{: RESULT = new Pointer_Op(dc, p.row); :};
E3                ::= POINTER_OP error
{: RESULT = new Error_Exp(); :};

E3                ::= REFERENCE_OP:r E4:dc
{: RESULT = new Reference_Op(dc, r.row); :};
E3                ::= REFERENCE_OP error
{: RESULT = new Error_Exp(); :};

E3                ::= E4:e 
{: RESULT = e; :};

E4                ::= E4:iz FIELD_ACCESS:f ID:id
{: RESULT = new Field_Access_Op(iz, new AttributeID(id.lexeme, id.row), f.row); :};   // a.b.c = ((a.b).c)
E4                ::= E4:iz FIELD_ACCESS:f ID_PARENTESIS:dc
{: RESULT = new Field_Access_Op(iz, new MethodCall(dc, f.row), f.row); :};
E4                ::= error FIELD_ACCESS E5:dc
{: RESULT = new Error_Exp(); :};
E4                ::= E4:iz FIELD_ACCESS error
{: RESULT = new Error_Exp(); :};

E4                ::= E5:e 
{: RESULT = e; :};

E5                ::= E5:iz SQ_BRACKET_OPEN:s EXPRESSION:dc SQ_BRACKET_CLOSE 
{: RESULT = new Sq_Bracket_Op(iz, dc, s.row); :};
E5                ::= error SQ_BRACKET_OPEN EXPRESSION:dc SQ_BRACKET_CLOSE 
{: RESULT = new Error_Exp(); :};

E5                ::= E6:e 
{: RESULT = e; :};

E6                ::= PARENTESIS_OPEN EXPRESSION:e PARENTESIS_CLOSE 
{: RESULT = e; :};

E6                ::= TERMINAL:e 
{: RESULT = e; :};

EXPRESSIONS          ::= MORE_EXPRESSIONS:array EXPRESSION:e 
{: array.add(e); RESULT = array; :};
EXPRESSIONS          ::= /*EMPTY*/ 
{: RESULT = new ArrayList<Expression>(); :};
MORE_EXPRESSIONS     ::= MORE_EXPRESSIONS:array EXPRESSION:e COMMA 
{: array.add(e); RESULT = array; :};
MORE_EXPRESSIONS     ::= /*EMPTY*/ 
{: RESULT = new ArrayList<Expression>(); :};

TERMINAL             ::= LITERAL:e
{: RESULT = e; :};
TERMINAL             ::= ID_EX:e
{: RESULT = e; :};


// Frequently used expresions

TYPE           ::= INT_T:i
{: RESULT = new Int_Type(i.row); :};
TYPE           ::= BOOLEAN_T:b
{: RESULT = new Bool_Type(b.row); :};
TYPE           ::= ID:id
{: RESULT = new Defined_Type(id.lexeme, id.row); :};
TYPE           ::= TYPE:t POINTER_OP:p
{: RESULT = new Pointer_Type(t, p.row); :};

OPT_INTEGER          ::= LITERAL:e
{: RESULT = e; :};
OPT_INTEGER          ::= ID:e
{: RESULT = new VariableID(e.lexeme, e.row); :};
OPT_INTEGER          ::= /*EMPTY*/
{: RESULT = null; :};

SENTENCE             ::= DECLARATION:e SEMICOLON 
{: RESULT = e; :};
SENTENCE             ::= ASSIGNATION_INS:e 
{: RESULT = e; :};
SENTENCE             ::= DECLARATION_AND_ASSIGNATION_INS:e 
{: RESULT = e; :};
SENTENCE             ::= IF_INS:e 
{: RESULT = e; :};
SENTENCE             ::= SWITCH_INS:e 
{: RESULT = e; :};
SENTENCE             ::= WHILE_INS:e 
{: RESULT = e; :};
SENTENCE             ::= FOR_INS:e 
{: RESULT = e; :};
SENTENCE             ::= BREAK_INS:e 
{: RESULT = e; :};
SENTENCE             ::= CONTINUE_INS:e 
{: RESULT = e; :};
SENTENCE             ::= IO_INS:e 
{: RESULT = e; :};
SENTENCE             ::= SEMICOLON:s
{: RESULT = new Empty_Ins(s.row); :};    // The last semicolon represents an empty instruction
SENTENCE             ::= EXPRESSION:e SEMICOLON:s
{: RESULT = new Expression_Ins(e, s.row); :};

//ID_EX                ::= THIS:t FIELD_ACCESS ID:id 
//{: RESULT = new This_Op(id.lexeme, t.row); :}; // se puede borrar
//ID_EX                ::= THIS:t FIELD_ACCESS ID_PARENTESIS:id 
//{: RESULT = new This_Op(id.lexeme, t.row); :}; // se puede borrar
ID_EX                ::= ID:id
{: RESULT = new VariableID(id.lexeme, id.row); :};
ID_EX                ::= ID_PARENTESIS:e 
{: RESULT = e ; :};
ID_EX                ::= THIS:t
{: RESULT = new ThisID(t.row); ; :};

LITERAL              ::= INTEGER:e 
{: RESULT = new Int_Value(e.lexeme, e.row); :};
LITERAL              ::= TRUE:t
{: RESULT = new Bool_Value(true, t.row); :};
LITERAL              ::= FALSE:f
{: RESULT = new Bool_Value(false, f.row); :};