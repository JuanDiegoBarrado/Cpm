clas Person {
    public int age;
    public bul married;

    Person() {
        dis.age = 0;
        dis.married = fols;
    }

    public func showData() {
        if (married) {
            ceaut(age + 10);
        }
        els {
            ceaut(age - 10);
        }
        return;
    }
}

func showStaticMatrix(Person matrix[][], int rows, int cols) {
    int i = 0;
    int j = 0;
    guail(i < rows) {
        j = 0;
        guail(j < cols) {
            //ceaut(i * cols + j);
            matrix[i][j].showData();
            j = j + 1;
        }
        i = i + 1;
    }
    return;
}

func showDynamicMatrix(Person matrix[][], int rows, int cols) {
    int i = 0;
    int j = 0;
    guail(i < rows) {
        j = 0;
        guail(j < cols) {
            //ceaut(i * cols + j);
            matrix[i][j].showData();
            j = j + 1;
        }
        i = i + 1;
    }
    return;
}

func mein() : int {
    Person matrix[4][4];
    int rows = 4;
    int cols = 4;
    int i = 0;
    int j = 0;
    guail(i < rows) {
        j = 0;
        guail(j < cols) {
            //matrix[i][j] = Person();
            matrix[i][j].age = 100 * (i + 1);
            if(j < 2) {
                matrix[i][j].married = tru;
            }
            els {
                matrix[i][j].married = fols;
            }
            //ceaut(i * cols + j);
            j = j + 1;
        }
        i = i + 1;
    }
    showStaticMatrix(matrix, rows, cols);
    showDynamicMatrix(matrix, rows, cols);
    return 0;
}

/*
RESULT:
110
110
90
90
210
210
190
190
310
310
290
290
410
410
390
390
110
110
90
90
210
210
190
190
310
310
290
290
410
410
390
390
*/