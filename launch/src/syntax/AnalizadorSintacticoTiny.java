
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sat May 11 13:26:01 CEST 2024
//----------------------------------------------------

package syntax;

import java_cup.runtime.*;
import lexicon.AnalizadorLexicoTiny;
import lexicon.LexiconUnit;
import lexicon.TokenValue;
import errors.GestionErroresTiny;
import ast.*;
import ast.expressions.*;
import ast.expressions.operators.*;
import ast.expressions.operands.*;
import ast.preamble.*;
import ast.sentences.*;
import ast.sentences.declarations.*;
import ast.sentences.instructions.*;
import ast.types.interfaces.*;
import ast.types.definitions.*;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sat May 11 13:26:01 CEST 2024
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\251\000\002\060\004\000\002\002\004\000\002\053" +
    "\004\000\002\053\002\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\013\010\000\002\006\005\000\002\052\004\000\002" +
    "\052\002\000\002\007\011\000\002\056\005\000\002\056" +
    "\002\000\002\076\003\000\002\076\003\000\002\047\006" +
    "\000\002\047\002\000\002\014\011\000\002\050\005\000" +
    "\002\050\002\000\002\041\003\000\002\041\003\000\002" +
    "\042\017\000\002\043\014\000\002\045\004\000\002\045" +
    "\002\000\002\046\005\000\002\046\002\000\002\002\003" +
    "\000\002\002\005\000\002\004\004\000\002\004\002\000" +
    "\002\036\003\000\002\015\006\000\002\016\005\000\002" +
    "\010\005\000\002\003\006\000\002\003\002\000\002\044" +
    "\006\000\002\074\006\000\002\074\010\000\002\074\007" +
    "\000\002\073\006\000\002\073\010\000\002\073\007\000" +
    "\002\062\012\000\002\062\004\000\002\005\006\000\002" +
    "\005\004\000\002\005\002\000\002\063\012\000\002\051" +
    "\011\000\002\051\002\000\002\011\007\000\002\064\011" +
    "\000\002\064\004\000\002\065\004\000\002\066\004\000" +
    "\002\067\015\000\002\070\003\000\002\070\003\000\002" +
    "\071\007\000\002\072\007\000\002\040\016\000\002\017" +
    "\003\000\002\017\003\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\003\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\003\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\003\000\002\023\004" +
    "\000\002\023\004\000\002\023\003\000\002\024\003\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\004\000\002\025\004\000\002\025\003\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\003\000\002\027" +
    "\005\000\002\027\005\000\002\027\005\000\002\027\003" +
    "\000\002\030\004\000\002\030\004\000\002\030\004\000" +
    "\002\030\004\000\002\030\003\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\003\000\002\032\006\000\002\032\006\000\002\032\003" +
    "\000\002\033\005\000\002\033\003\000\002\054\004\000" +
    "\002\054\002\000\002\055\005\000\002\055\002\000\002" +
    "\037\003\000\002\037\003\000\002\075\003\000\002\075" +
    "\003\000\002\075\003\000\002\075\004\000\002\034\003" +
    "\000\002\034\003\000\002\034\002\000\002\061\004\000" +
    "\002\061\003\000\002\061\003\000\002\061\003\000\002" +
    "\061\003\000\002\061\003\000\002\061\003\000\002\061" +
    "\003\000\002\061\003\000\002\061\003\000\002\061\003" +
    "\000\002\061\004\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0153\000\014\042\ufffe\043\ufffe\045\ufffe\051\ufffe\052" +
    "\ufffe\001\002\000\004\002\u0155\001\002\000\014\042\020" +
    "\043\016\045\012\051\013\052\007\001\002\000\014\042" +
    "\ufffc\043\ufffc\045\ufffc\051\ufffc\052\ufffc\001\002\000\004" +
    "\004\u0152\001\002\000\022\020\uffea\042\uffea\043\uffea\045" +
    "\uffea\051\uffea\052\uffea\071\uffea\072\uffea\001\002\000\004" +
    "\002\001\001\002\000\006\004\064\073\u0147\001\002\000" +
    "\010\004\035\006\036\031\040\001\002\000\014\042\ufff9" +
    "\043\ufff9\045\ufff9\051\ufff9\052\ufff9\001\002\000\022\020" +
    "\uffe9\042\uffe9\043\uffe9\045\uffe9\051\uffe9\052\uffe9\071\uffe9" +
    "\072\uffe9\001\002\000\004\004\u013c\001\002\000\014\042" +
    "\ufffb\043\ufffb\045\ufffb\051\ufffb\052\ufffb\001\002\000\004" +
    "\004\024\001\002\000\014\042\ufffa\043\ufffa\045\ufffa\051" +
    "\ufffa\052\ufffa\001\002\000\014\042\uffff\043\uffff\045\uffff" +
    "\051\uffff\052\uffff\001\002\000\014\042\ufffd\043\ufffd\045" +
    "\ufffd\051\ufffd\052\ufffd\001\002\000\004\017\025\001\002" +
    "\000\010\004\uffee\071\uffee\072\uffee\001\002\000\010\004" +
    "\027\071\033\072\034\001\002\000\004\015\u0136\001\002" +
    "\000\004\020\u0135\001\002\000\012\004\ufff5\020\ufff5\071" +
    "\ufff5\072\ufff5\001\002\000\010\004\035\006\036\031\040" +
    "\001\002\000\012\004\ufff1\006\ufff1\031\ufff1\045\ufff1\001" +
    "\002\000\012\004\ufff0\006\ufff0\031\ufff0\045\ufff0\001\002" +
    "\000\012\004\uff6f\017\uff6f\046\uff6f\047\uff6f\001\002\000" +
    "\016\004\uff71\017\uff71\021\uff71\041\uff71\046\uff71\047\uff71" +
    "\001\002\000\004\041\055\001\002\000\016\004\uff70\017" +
    "\uff70\021\uff70\041\uff70\046\uff70\047\uff70\001\002\000\006" +
    "\004\042\046\043\001\002\000\014\016\uffd9\021\uffd9\037" +
    "\uffd9\041\uffd9\053\uffd9\001\002\000\016\004\uff6e\017\uff6e" +
    "\021\uff6e\041\uff6e\046\uff6e\047\uff6e\001\002\000\014\016" +
    "\uffdb\021\045\037\uffdb\041\uffdb\053\uffdb\001\002\000\014" +
    "\004\046\005\047\022\uff6b\035\052\036\053\001\002\000" +
    "\004\022\uff6c\001\002\000\054\007\uff5b\010\uff5b\011\uff5b" +
    "\012\uff5b\013\uff5b\014\uff5b\016\uff5b\021\uff5b\022\uff5b\023" +
    "\uff5b\024\uff5b\025\uff5b\026\uff5b\027\uff5b\030\uff5b\032\uff5b" +
    "\033\uff5b\037\uff5b\041\uff5b\044\uff5b\053\uff5b\001\002\000" +
    "\004\022\uff6d\001\002\000\004\022\054\001\002\000\054" +
    "\007\uff5a\010\uff5a\011\uff5a\012\uff5a\013\uff5a\014\uff5a\016" +
    "\uff5a\021\uff5a\022\uff5a\023\uff5a\024\uff5a\025\uff5a\026\uff5a" +
    "\027\uff5a\030\uff5a\032\uff5a\033\uff5a\037\uff5a\041\uff5a\044" +
    "\uff5a\053\uff5a\001\002\000\054\007\uff59\010\uff59\011\uff59" +
    "\012\uff59\013\uff59\014\uff59\016\uff59\021\uff59\022\uff59\023" +
    "\uff59\024\uff59\025\uff59\026\uff59\027\uff59\030\uff59\032\uff59" +
    "\033\uff59\037\uff59\041\uff59\044\uff59\053\uff59\001\002\000" +
    "\014\016\uffda\021\uffda\037\uffda\041\uffda\053\uffda\001\002" +
    "\000\010\004\uffef\071\uffef\072\uffef\001\002\000\012\004" +
    "\027\020\ufff2\071\ufff2\072\ufff2\001\002\000\012\004\ufff6" +
    "\020\ufff6\071\ufff6\072\ufff6\001\002\000\010\020\ufff7\071" +
    "\033\072\034\001\002\000\004\045\063\001\002\000\010" +
    "\020\ufff3\071\ufff3\072\ufff3\001\002\000\004\004\064\001" +
    "\002\000\004\015\065\001\002\000\012\004\uffe3\006\uffe3" +
    "\016\uffe5\031\uffe3\001\002\000\004\016\076\001\002\000" +
    "\010\004\035\006\036\031\040\001\002\000\006\016\uffe6" +
    "\037\075\001\002\000\006\016\uffe2\037\uffe2\001\002\000" +
    "\010\004\042\046\043\047\073\001\002\000\004\004\074" +
    "\001\002\000\006\016\uffe1\037\uffe1\001\002\000\010\004" +
    "\uffe4\006\uffe4\031\uffe4\001\002\000\006\017\077\040\100" +
    "\001\002\000\060\003\uffdf\004\uffdf\005\uffdf\006\uffdf\010" +
    "\uffdf\015\uffdf\031\uffdf\034\uffdf\035\uffdf\036\uffdf\041\uffdf" +
    "\046\uffdf\047\uffdf\054\uffdf\056\uffdf\060\uffdf\062\uffdf\063" +
    "\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf\070\uffdf\001\002" +
    "\000\010\004\035\006\036\031\040\001\002\000\006\017" +
    "\102\046\043\001\002\000\060\003\uffdf\004\uffdf\005\uffdf" +
    "\006\uffdf\010\uffdf\015\uffdf\031\uffdf\034\uffdf\035\uffdf\036" +
    "\uffdf\041\uffdf\046\uffdf\047\uffdf\054\uffdf\056\uffdf\060\uffdf" +
    "\062\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf\070" +
    "\uffdf\001\002\000\060\003\131\004\121\005\047\006\036" +
    "\010\122\015\107\031\040\034\127\035\052\036\053\041" +
    "\112\046\136\047\115\054\116\056\135\060\132\062\143" +
    "\063\110\064\105\065\151\066\124\067\126\070\117\001" +
    "\002\000\070\003\uff69\004\uff69\005\uff69\006\uff69\010\uff69" +
    "\015\uff69\016\uff69\020\uff69\031\uff69\034\uff69\035\uff69\036" +
    "\uff69\041\uff69\046\uff69\047\uff69\054\uff69\056\uff69\057\uff69" +
    "\060\uff69\061\uff69\062\uff69\063\uff69\064\uff69\065\uff69\066" +
    "\uff69\067\uff69\070\uff69\001\002\000\004\041\u0130\001\002" +
    "\000\006\041\u0126\053\u0127\001\002\000\030\003\131\004" +
    "\166\005\047\010\122\015\107\034\127\035\052\036\053" +
    "\046\136\047\115\070\117\001\002\000\004\015\u011a\001" +
    "\002\000\070\003\uff61\004\uff61\005\uff61\006\uff61\010\uff61" +
    "\015\uff61\016\uff61\020\uff61\031\uff61\034\uff61\035\uff61\036" +
    "\uff61\041\uff61\046\uff61\047\uff61\054\uff61\056\uff61\057\uff61" +
    "\060\uff61\061\uff61\062\uff61\063\uff61\064\uff61\065\uff61\066" +
    "\uff61\067\uff61\070\uff61\001\002\000\070\003\uff60\004\uff60" +
    "\005\uff60\006\uff60\010\uff60\015\uff60\016\uff60\020\uff60\031" +
    "\uff60\034\uff60\035\uff60\036\uff60\041\uff60\046\uff60\047\uff60" +
    "\054\uff60\056\uff60\057\uff60\060\uff60\061\uff60\062\uff60\063" +
    "\uff60\064\uff60\065\uff60\066\uff60\067\uff60\070\uff60\001\002" +
    "\000\070\003\uff66\004\uff66\005\uff66\006\uff66\010\uff66\015" +
    "\uff66\016\uff66\020\uff66\031\uff66\034\uff66\035\uff66\036\uff66" +
    "\041\uff66\046\uff66\047\uff66\054\uff66\056\uff66\057\uff66\060" +
    "\uff66\061\uff66\062\uff66\063\uff66\064\uff66\065\uff66\066\uff66" +
    "\067\uff66\070\uff66\001\002\000\070\003\uff65\004\uff65\005" +
    "\uff65\006\uff65\010\uff65\015\uff65\016\uff65\020\uff65\031\uff65" +
    "\034\uff65\035\uff65\036\uff65\041\uff65\046\uff65\047\uff65\054" +
    "\uff65\056\uff65\057\uff65\060\uff65\061\uff65\062\uff65\063\uff65" +
    "\064\uff65\065\uff65\066\uff65\067\uff65\070\uff65\001\002\000" +
    "\020\003\u0118\004\166\005\047\015\107\035\052\036\053" +
    "\070\117\001\002\000\006\003\u010b\015\u010c\001\002\000" +
    "\054\007\uff5c\010\uff5c\011\uff5c\012\uff5c\013\uff5c\014\uff5c" +
    "\016\uff5c\021\uff5c\022\uff5c\023\uff5c\024\uff5c\025\uff5c\026" +
    "\uff5c\027\uff5c\030\uff5c\032\uff5c\033\uff5c\037\uff5c\041\uff5c" +
    "\044\uff5c\053\uff5c\001\002\000\054\007\uff5d\010\uff5d\011" +
    "\uff5d\012\uff5d\013\uff5d\014\uff5d\016\uff5d\021\uff5d\022\uff5d" +
    "\023\uff5d\024\uff5d\025\uff5d\026\uff5d\027\uff5d\030\uff5d\032" +
    "\uff5d\033\uff5d\037\uff5d\041\uff5d\044\uff5d\053\uff5d\001\002" +
    "\000\054\004\uff6f\007\uff5e\010\uff5e\011\uff5e\012\uff5e\013" +
    "\uff5e\014\uff5e\015\225\021\uff5e\023\uff5e\024\uff5e\025\uff5e" +
    "\026\uff5e\027\uff5e\030\uff5e\032\uff5e\033\uff5e\041\uff5e\044" +
    "\uff5e\046\uff6f\053\uff5e\001\002\000\024\003\u010a\004\166" +
    "\005\047\015\107\035\052\036\053\046\136\047\115\070" +
    "\117\001\002\000\070\003\uffc2\004\uffc2\005\uffc2\006\uffc2" +
    "\010\uffc2\015\uffc2\016\uffc2\020\uffc2\031\uffc2\034\uffc2\035" +
    "\uffc2\036\uffc2\041\uffc2\046\uffc2\047\uffc2\054\uffc2\056\uffc2" +
    "\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\065" +
    "\uffc2\066\uffc2\067\uffc2\070\uffc2\001\002\000\004\015\u0105" +
    "\001\002\000\054\007\uff72\010\uff72\011\uff72\012\uff72\013" +
    "\uff72\014\uff72\016\uff72\021\uff72\022\uff72\023\uff72\024\uff72" +
    "\025\uff72\026\uff72\027\uff72\030\uff72\032\uff72\033\uff72\037" +
    "\uff72\041\uff72\044\uff72\053\uff72\001\002\000\030\003\131" +
    "\004\166\005\047\010\122\015\107\034\127\035\052\036" +
    "\053\046\136\047\115\070\117\001\002\000\026\003\u0100" +
    "\004\166\005\047\010\122\015\107\035\052\036\053\046" +
    "\136\047\115\070\117\001\002\000\070\003\uffc3\004\uffc3" +
    "\005\uffc3\006\uffc3\010\uffc3\015\uffc3\016\uffc3\020\uffc3\031" +
    "\uffc3\034\uffc3\035\uffc3\036\uffc3\041\uffc3\046\uffc3\047\uffc3" +
    "\054\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063" +
    "\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3\070\uffc3\001\002" +
    "\000\054\007\253\010\251\011\171\012\173\013\172\014" +
    "\175\016\uffbd\021\176\022\uffbd\023\362\024\364\025\367" +
    "\026\363\027\365\030\366\032\254\033\252\037\uffbd\041" +
    "\uffbd\044\174\053\uffbd\001\002\000\004\041\361\001\002" +
    "\000\066\003\uffe0\004\uffe0\005\uffe0\006\uffe0\010\uffe0\015" +
    "\uffe0\020\uffe0\031\uffe0\034\uffe0\035\uffe0\036\uffe0\041\uffe0" +
    "\046\uffe0\047\uffe0\054\uffe0\056\uffe0\057\uffe0\060\uffe0\061" +
    "\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0" +
    "\070\uffe0\001\002\000\006\041\346\053\347\001\002\000" +
    "\004\015\324\001\002\000\020\003\322\004\166\005\047" +
    "\015\107\035\052\036\053\070\117\001\002\000\070\003" +
    "\uff62\004\uff62\005\uff62\006\uff62\010\uff62\015\uff62\016\uff62" +
    "\020\uff62\031\uff62\034\uff62\035\uff62\036\uff62\041\uff62\046" +
    "\uff62\047\uff62\054\uff62\056\uff62\057\uff62\060\uff62\061\uff62" +
    "\062\uff62\063\uff62\064\uff62\065\uff62\066\uff62\067\uff62\070" +
    "\uff62\001\002\000\054\007\uff73\010\uff73\011\uff73\012\uff73" +
    "\013\uff73\014\uff73\016\uff73\021\uff73\022\uff73\023\uff73\024" +
    "\uff73\025\uff73\026\uff73\027\uff73\030\uff73\032\uff73\033\uff73" +
    "\037\uff73\041\uff73\044\uff73\053\uff73\001\002\000\070\003" +
    "\uff64\004\uff64\005\uff64\006\uff64\010\uff64\015\uff64\016\uff64" +
    "\020\uff64\031\uff64\034\uff64\035\uff64\036\uff64\041\uff64\046" +
    "\uff64\047\uff64\054\uff64\056\uff64\057\uff64\060\uff64\061\uff64" +
    "\062\uff64\063\uff64\064\uff64\065\uff64\066\uff64\067\uff64\070" +
    "\uff64\001\002\000\070\003\uff67\004\uff67\005\uff67\006\uff67" +
    "\010\uff67\015\uff67\016\uff67\020\uff67\031\uff67\034\uff67\035" +
    "\uff67\036\uff67\041\uff67\046\uff67\047\uff67\054\uff67\056\uff67" +
    "\057\uff67\060\uff67\061\uff67\062\uff67\063\uff67\064\uff67\065" +
    "\uff67\066\uff67\067\uff67\070\uff67\001\002\000\006\003\313" +
    "\015\314\001\002\000\054\007\uff78\010\uff78\011\uff78\012" +
    "\uff78\013\uff78\014\uff78\016\uff78\021\uff78\022\uff78\023\uff78" +
    "\024\uff78\025\uff78\026\uff78\027\uff78\030\uff78\032\uff78\033" +
    "\uff78\037\uff78\041\uff78\044\uff78\053\uff78\001\002\000\054" +
    "\007\uff7a\010\uff7a\011\uff7a\012\uff7a\013\uff7a\014\uff7a\016" +
    "\uff7a\021\uff7a\022\uff7a\023\uff7a\024\uff7a\025\uff7a\026\uff7a" +
    "\027\uff7a\030\uff7a\032\uff7a\033\uff7a\037\uff7a\041\uff7a\044" +
    "\uff7a\053\uff7a\001\002\000\034\016\uff9f\022\uff9f\023\uff9f" +
    "\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\032\uff9f\033" +
    "\uff9f\037\uff9f\041\uff9f\053\uff9f\001\002\000\034\016\uffa2" +
    "\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030" +
    "\uffa2\032\uffa2\033\uffa2\037\uffa2\041\uffa2\053\uffa2\001\002" +
    "\000\054\007\uff7d\010\uff7d\011\uff7d\012\uff7d\013\uff7d\014" +
    "\uff7d\016\uff7d\021\205\022\uff7d\023\uff7d\024\uff7d\025\uff7d" +
    "\026\uff7d\027\uff7d\030\uff7d\032\uff7d\033\uff7d\037\uff7d\041" +
    "\uff7d\044\uff7d\053\uff7d\001\002\000\004\015\307\001\002" +
    "\000\034\016\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026" +
    "\uffa6\027\uffa6\030\uffa6\032\263\033\uffa6\037\uffa6\041\uffa6" +
    "\053\uffa6\001\002\000\052\007\uff82\010\uff82\011\uff82\012" +
    "\uff82\013\uff82\014\uff82\016\uff82\022\uff82\023\uff82\024\uff82" +
    "\025\uff82\026\uff82\027\uff82\030\uff82\032\uff82\033\uff82\037" +
    "\uff82\041\uff82\044\303\053\uff82\001\002\000\032\016\uffaa" +
    "\022\uffaa\023\242\024\245\025\240\026\244\027\246\030" +
    "\243\033\241\037\uffaa\041\uffaa\053\uffaa\001\002\000\050" +
    "\007\uff87\010\uff87\011\uff87\012\uff87\013\uff87\014\235\016" +
    "\uff87\022\uff87\023\uff87\024\uff87\025\uff87\026\uff87\027\uff87" +
    "\030\uff87\032\uff87\033\uff87\037\uff87\041\uff87\053\uff87\001" +
    "\002\000\070\003\uff63\004\uff63\005\uff63\006\uff63\010\uff63" +
    "\015\uff63\016\uff63\020\uff63\031\uff63\034\uff63\035\uff63\036" +
    "\uff63\041\uff63\046\uff63\047\uff63\054\uff63\056\uff63\057\uff63" +
    "\060\uff63\061\uff63\062\uff63\063\uff63\064\uff63\065\uff63\066" +
    "\uff63\067\uff63\070\uff63\001\002\000\014\016\uffbe\022\uffbe" +
    "\037\uffbe\041\uffbe\053\uffbe\001\002\000\046\007\uff8b\010" +
    "\uff8b\011\uff8b\012\uff8b\013\uff8b\016\uff8b\022\uff8b\023\uff8b" +
    "\024\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\032\uff8b\033" +
    "\uff8b\037\uff8b\041\uff8b\053\uff8b\001\002\000\046\007\uff95" +
    "\010\uff95\011\214\012\216\013\215\016\uff95\022\uff95\023" +
    "\uff95\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95\032\uff95" +
    "\033\uff95\037\uff95\041\uff95\053\uff95\001\002\000\040\007" +
    "\164\010\165\016\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e" +
    "\026\uff9e\027\uff9e\030\uff9e\032\uff9e\033\uff9e\037\uff9e\041" +
    "\uff9e\053\uff9e\001\002\000\070\003\uff68\004\uff68\005\uff68" +
    "\006\uff68\010\uff68\015\uff68\016\uff68\020\uff68\031\uff68\034" +
    "\uff68\035\uff68\036\uff68\041\uff68\046\uff68\047\uff68\054\uff68" +
    "\056\uff68\057\uff68\060\uff68\061\uff68\062\uff68\063\uff68\064" +
    "\uff68\065\uff68\066\uff68\067\uff68\070\uff68\001\002\000\024" +
    "\003\234\004\166\005\047\015\107\035\052\036\053\046" +
    "\136\047\115\070\117\001\002\000\024\003\170\004\166" +
    "\005\047\015\107\035\052\036\053\046\136\047\115\070" +
    "\117\001\002\000\056\007\uff5e\010\uff5e\011\uff5e\012\uff5e" +
    "\013\uff5e\014\uff5e\015\225\016\uff5e\021\uff5e\022\uff5e\023" +
    "\uff5e\024\uff5e\025\uff5e\026\uff5e\027\uff5e\030\uff5e\032\uff5e" +
    "\033\uff5e\037\uff5e\041\uff5e\044\uff5e\053\uff5e\001\002\000" +
    "\046\007\uff9a\010\uff9a\011\214\012\216\013\215\016\uff9a" +
    "\022\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\027\uff9a\030" +
    "\uff9a\032\uff9a\033\uff9a\037\uff9a\041\uff9a\053\uff9a\001\002" +
    "\000\054\007\uff98\010\uff98\011\171\012\173\013\172\014" +
    "\175\016\uff98\021\176\022\uff98\023\uff98\024\uff98\025\uff98" +
    "\026\uff98\027\uff98\030\uff98\032\uff98\033\uff98\037\uff98\041" +
    "\uff98\044\174\053\uff98\001\002\000\024\003\211\004\166" +
    "\005\047\015\107\035\052\036\053\046\136\047\115\070" +
    "\117\001\002\000\024\003\211\004\166\005\047\015\107" +
    "\035\052\036\053\046\136\047\115\070\117\001\002\000" +
    "\024\003\211\004\166\005\047\015\107\035\052\036\053" +
    "\046\136\047\115\070\117\001\002\000\020\003\204\004" +
    "\166\005\047\015\107\035\052\036\053\070\117\001\002" +
    "\000\024\003\201\004\166\005\047\015\107\035\052\036" +
    "\053\046\136\047\115\070\117\001\002\000\030\003\131" +
    "\004\166\005\047\010\122\015\107\034\127\035\052\036" +
    "\053\046\136\047\115\070\117\001\002\000\004\022\200" +
    "\001\002\000\054\007\uff7b\010\uff7b\011\uff7b\012\uff7b\013" +
    "\uff7b\014\uff7b\016\uff7b\021\uff7b\022\uff7b\023\uff7b\024\uff7b" +
    "\025\uff7b\026\uff7b\027\uff7b\030\uff7b\032\uff7b\033\uff7b\037" +
    "\uff7b\041\uff7b\044\uff7b\053\uff7b\001\002\000\006\021\176" +
    "\044\174\001\002\000\046\007\uff89\010\uff89\011\uff89\012" +
    "\uff89\013\uff89\016\uff89\022\uff89\023\uff89\024\uff89\025\uff89" +
    "\026\uff89\027\uff89\030\uff89\032\uff89\033\uff89\037\uff89\041" +
    "\uff89\053\uff89\001\002\000\054\007\uff7f\010\uff7f\011\uff7f" +
    "\012\uff7f\013\uff7f\014\uff7f\016\uff7f\021\205\022\uff7f\023" +
    "\uff7f\024\uff7f\025\uff7f\026\uff7f\027\uff7f\030\uff7f\032\uff7f" +
    "\033\uff7f\037\uff7f\041\uff7f\044\uff7f\053\uff7f\001\002\000" +
    "\004\021\176\001\002\000\030\003\131\004\166\005\047" +
    "\010\122\015\107\034\127\035\052\036\053\046\136\047" +
    "\115\070\117\001\002\000\004\022\207\001\002\000\054" +
    "\007\uff7c\010\uff7c\011\uff7c\012\uff7c\013\uff7c\014\uff7c\016" +
    "\uff7c\021\uff7c\022\uff7c\023\uff7c\024\uff7c\025\uff7c\026\uff7c" +
    "\027\uff7c\030\uff7c\032\uff7c\033\uff7c\037\uff7c\041\uff7c\044" +
    "\uff7c\053\uff7c\001\002\000\046\007\uff90\010\uff90\011\uff90" +
    "\012\uff90\013\uff90\016\uff90\022\uff90\023\uff90\024\uff90\025" +
    "\uff90\026\uff90\027\uff90\030\uff90\032\uff90\033\uff90\037\uff90" +
    "\041\uff90\053\uff90\001\002\000\010\014\175\021\176\044" +
    "\174\001\002\000\046\007\uff8d\010\uff8d\011\uff8d\012\uff8d" +
    "\013\uff8d\016\uff8d\022\uff8d\023\uff8d\024\uff8d\025\uff8d\026" +
    "\uff8d\027\uff8d\030\uff8d\032\uff8d\033\uff8d\037\uff8d\041\uff8d" +
    "\053\uff8d\001\002\000\046\007\uff93\010\uff93\011\uff93\012" +
    "\uff93\013\uff93\016\uff93\022\uff93\023\uff93\024\uff93\025\uff93" +
    "\026\uff93\027\uff93\030\uff93\032\uff93\033\uff93\037\uff93\041" +
    "\uff93\053\uff93\001\002\000\024\003\224\004\166\005\047" +
    "\015\107\035\052\036\053\046\136\047\115\070\117\001" +
    "\002\000\024\003\222\004\166\005\047\015\107\035\052" +
    "\036\053\046\136\047\115\070\117\001\002\000\024\003" +
    "\220\004\166\005\047\015\107\035\052\036\053\046\136" +
    "\047\115\070\117\001\002\000\046\007\uff91\010\uff91\011" +
    "\uff91\012\uff91\013\uff91\016\uff91\022\uff91\023\uff91\024\uff91" +
    "\025\uff91\026\uff91\027\uff91\030\uff91\032\uff91\033\uff91\037" +
    "\uff91\041\uff91\053\uff91\001\002\000\054\007\uff8f\010\uff8f" +
    "\011\uff8f\012\uff8f\013\uff8f\014\175\016\uff8f\021\176\022" +
    "\uff8f\023\uff8f\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f" +
    "\032\uff8f\033\uff8f\037\uff8f\041\uff8f\044\174\053\uff8f\001" +
    "\002\000\046\007\uff8e\010\uff8e\011\uff8e\012\uff8e\013\uff8e" +
    "\016\uff8e\022\uff8e\023\uff8e\024\uff8e\025\uff8e\026\uff8e\027" +
    "\uff8e\030\uff8e\032\uff8e\033\uff8e\037\uff8e\041\uff8e\053\uff8e" +
    "\001\002\000\054\007\uff8c\010\uff8c\011\uff8c\012\uff8c\013" +
    "\uff8c\014\175\016\uff8c\021\176\022\uff8c\023\uff8c\024\uff8c" +
    "\025\uff8c\026\uff8c\027\uff8c\030\uff8c\032\uff8c\033\uff8c\037" +
    "\uff8c\041\uff8c\044\174\053\uff8c\001\002\000\046\007\uff94" +
    "\010\uff94\011\uff94\012\uff94\013\uff94\016\uff94\022\uff94\023" +
    "\uff94\024\uff94\025\uff94\026\uff94\027\uff94\030\uff94\032\uff94" +
    "\033\uff94\037\uff94\041\uff94\053\uff94\001\002\000\054\007" +
    "\uff92\010\uff92\011\uff92\012\uff92\013\uff92\014\175\016\uff92" +
    "\021\176\022\uff92\023\uff92\024\uff92\025\uff92\026\uff92\027" +
    "\uff92\030\uff92\032\uff92\033\uff92\037\uff92\041\uff92\044\174" +
    "\053\uff92\001\002\000\032\003\uff74\004\uff74\005\uff74\010" +
    "\uff74\015\uff74\016\uff76\034\uff74\035\uff74\036\uff74\046\uff74" +
    "\047\uff74\070\uff74\001\002\000\004\016\232\001\002\000" +
    "\030\003\131\004\166\005\047\010\122\015\107\034\127" +
    "\035\052\036\053\046\136\047\115\070\117\001\002\000" +
    "\006\016\uff77\037\231\001\002\000\030\003\uff75\004\uff75" +
    "\005\uff75\010\uff75\015\uff75\034\uff75\035\uff75\036\uff75\046" +
    "\uff75\047\uff75\070\uff75\001\002\000\054\007\uffd8\010\uffd8" +
    "\011\uffd8\012\uffd8\013\uffd8\014\uffd8\016\uffd8\021\uffd8\022" +
    "\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8" +
    "\032\uffd8\033\uffd8\037\uffd8\041\uffd8\044\uffd8\053\uffd8\001" +
    "\002\000\046\007\uff9d\010\uff9d\011\214\012\216\013\215" +
    "\016\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027" +
    "\uff9d\030\uff9d\032\uff9d\033\uff9d\037\uff9d\041\uff9d\053\uff9d" +
    "\001\002\000\054\007\uff9b\010\uff9b\011\171\012\173\013" +
    "\172\014\175\016\uff9b\021\176\022\uff9b\023\uff9b\024\uff9b" +
    "\025\uff9b\026\uff9b\027\uff9b\030\uff9b\032\uff9b\033\uff9b\037" +
    "\uff9b\041\uff9b\044\174\053\uff9b\001\002\000\024\003\236" +
    "\004\166\005\047\015\107\035\052\036\053\046\136\047" +
    "\115\070\117\001\002\000\052\007\uff88\010\uff88\011\uff88" +
    "\012\uff88\013\uff88\016\uff88\021\176\022\uff88\023\uff88\024" +
    "\uff88\025\uff88\026\uff88\027\uff88\030\uff88\032\uff88\033\uff88" +
    "\037\uff88\041\uff88\044\174\053\uff88\001\002\000\046\007" +
    "\uff8a\010\uff8a\011\uff8a\012\uff8a\013\uff8a\016\uff8a\022\uff8a" +
    "\023\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a\030\uff8a\032" +
    "\uff8a\033\uff8a\037\uff8a\041\uff8a\053\uff8a\001\002\000\030" +
    "\003\302\004\166\005\047\010\122\015\107\034\127\035" +
    "\052\036\053\046\136\047\115\070\117\001\002\000\030" +
    "\003\300\004\166\005\047\010\122\015\107\034\127\035" +
    "\052\036\053\046\136\047\115\070\117\001\002\000\030" +
    "\003\276\004\166\005\047\010\122\015\107\034\127\035" +
    "\052\036\053\046\136\047\115\070\117\001\002\000\030" +
    "\003\274\004\166\005\047\010\122\015\107\034\127\035" +
    "\052\036\053\046\136\047\115\070\117\001\002\000\030" +
    "\003\272\004\166\005\047\010\122\015\107\034\127\035" +
    "\052\036\053\046\136\047\115\070\117\001\002\000\030" +
    "\003\270\004\166\005\047\010\122\015\107\034\127\035" +
    "\052\036\053\046\136\047\115\070\117\001\002\000\030" +
    "\003\250\004\166\005\047\010\122\015\107\034\127\035" +
    "\052\036\053\046\136\047\115\070\117\001\002\000\016" +
    "\016\uffb9\022\uffb9\033\241\037\uffb9\041\uffb9\053\uffb9\001" +
    "\002\000\040\007\253\010\251\011\171\012\173\013\172" +
    "\014\175\016\uffb7\021\176\022\uffb7\032\254\033\252\037" +
    "\uffb7\041\uffb7\044\174\053\uffb7\001\002\000\024\003\260" +
    "\004\166\005\047\015\107\035\052\036\053\046\136\047" +
    "\115\070\117\001\002\000\030\003\262\004\166\005\047" +
    "\010\122\015\107\034\127\035\052\036\053\046\136\047" +
    "\115\070\117\001\002\000\024\003\260\004\166\005\047" +
    "\015\107\035\052\036\053\046\136\047\115\070\117\001" +
    "\002\000\030\003\256\004\166\005\047\010\122\015\107" +
    "\034\127\035\052\036\053\046\136\047\115\070\117\001" +
    "\002\000\034\016\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4" +
    "\026\uffa4\027\uffa4\030\uffa4\032\uffa4\033\uffa4\037\uffa4\041" +
    "\uffa4\053\uffa4\001\002\000\022\007\253\010\251\011\171" +
    "\012\173\013\172\014\175\021\176\044\174\001\002\000" +
    "\046\007\uff9c\010\uff9c\011\214\012\216\013\215\016\uff9c" +
    "\022\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030" +
    "\uff9c\032\uff9c\033\uff9c\037\uff9c\041\uff9c\053\uff9c\001\002" +
    "\000\016\011\171\012\173\013\172\014\175\021\176\044" +
    "\174\001\002\000\034\016\uffa8\022\uffa8\023\uffa8\024\uffa8" +
    "\025\uffa8\026\uffa8\027\uffa8\030\uffa8\032\263\033\uffa8\037" +
    "\uffa8\041\uffa8\053\uffa8\001\002\000\024\007\253\010\251" +
    "\011\171\012\173\013\172\014\175\021\176\032\254\044" +
    "\174\001\002\000\030\003\265\004\166\005\047\010\122" +
    "\015\107\034\127\035\052\036\053\046\136\047\115\070" +
    "\117\001\002\000\034\016\uffa5\022\uffa5\023\uffa5\024\uffa5" +
    "\025\uffa5\026\uffa5\027\uffa5\030\uffa5\032\uffa5\033\uffa5\037" +
    "\uffa5\041\uffa5\053\uffa5\001\002\000\054\007\253\010\251" +
    "\011\171\012\173\013\172\014\175\016\uffa3\021\176\022" +
    "\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3" +
    "\032\uffa3\033\uffa3\037\uffa3\041\uffa3\044\174\053\uffa3\001" +
    "\002\000\046\007\uff99\010\uff99\011\214\012\216\013\215" +
    "\016\uff99\022\uff99\023\uff99\024\uff99\025\uff99\026\uff99\027" +
    "\uff99\030\uff99\032\uff99\033\uff99\037\uff99\041\uff99\053\uff99" +
    "\001\002\000\016\016\uffb3\022\uffb3\033\241\037\uffb3\041" +
    "\uffb3\053\uffb3\001\002\000\040\007\253\010\251\011\171" +
    "\012\173\013\172\014\175\016\uffb1\021\176\022\uffb1\032" +
    "\254\033\252\037\uffb1\041\uffb1\044\174\053\uffb1\001\002" +
    "\000\016\016\uffbc\022\uffbc\033\241\037\uffbc\041\uffbc\053" +
    "\uffbc\001\002\000\040\007\253\010\251\011\171\012\173" +
    "\013\172\014\175\016\uffba\021\176\022\uffba\032\254\033" +
    "\252\037\uffba\041\uffba\044\174\053\uffba\001\002\000\016" +
    "\016\uffad\022\uffad\033\241\037\uffad\041\uffad\053\uffad\001" +
    "\002\000\040\007\253\010\251\011\171\012\173\013\172" +
    "\014\175\016\uffab\021\176\022\uffab\032\254\033\252\037" +
    "\uffab\041\uffab\044\174\053\uffab\001\002\000\016\016\uffb6" +
    "\022\uffb6\033\241\037\uffb6\041\uffb6\053\uffb6\001\002\000" +
    "\040\007\253\010\251\011\171\012\173\013\172\014\175" +
    "\016\uffb4\021\176\022\uffb4\032\254\033\252\037\uffb4\041" +
    "\uffb4\044\174\053\uffb4\001\002\000\034\016\uffa9\022\uffa9" +
    "\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\032" +
    "\263\033\uffa9\037\uffa9\041\uffa9\053\uffa9\001\002\000\054" +
    "\007\253\010\251\011\171\012\173\013\172\014\175\016" +
    "\uffa7\021\176\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7" +
    "\027\uffa7\030\uffa7\032\254\033\uffa7\037\uffa7\041\uffa7\044" +
    "\174\053\uffa7\001\002\000\016\016\uffb0\022\uffb0\033\241" +
    "\037\uffb0\041\uffb0\053\uffb0\001\002\000\040\007\253\010" +
    "\251\011\171\012\173\013\172\014\175\016\uffae\021\176" +
    "\022\uffae\032\254\033\252\037\uffae\041\uffae\044\174\053" +
    "\uffae\001\002\000\006\003\306\004\304\001\002\000\054" +
    "\007\uff81\010\uff81\011\uff81\012\uff81\013\uff81\014\uff81\015" +
    "\225\016\uff81\022\uff81\023\uff81\024\uff81\025\uff81\026\uff81" +
    "\027\uff81\030\uff81\032\uff81\033\uff81\037\uff81\041\uff81\044" +
    "\uff81\053\uff81\001\002\000\052\007\uff80\010\uff80\011\uff80" +
    "\012\uff80\013\uff80\014\uff80\016\uff80\022\uff80\023\uff80\024" +
    "\uff80\025\uff80\026\uff80\027\uff80\030\uff80\032\uff80\033\uff80" +
    "\037\uff80\041\uff80\044\uff80\053\uff80\001\002\000\052\007" +
    "\uff7e\010\uff7e\011\uff7e\012\uff7e\013\uff7e\014\uff7e\016\uff7e" +
    "\022\uff7e\023\uff7e\024\uff7e\025\uff7e\026\uff7e\027\uff7e\030" +
    "\uff7e\032\uff7e\033\uff7e\037\uff7e\041\uff7e\044\uff7e\053\uff7e" +
    "\001\002\000\030\003\131\004\166\005\047\010\122\015" +
    "\107\034\127\035\052\036\053\046\136\047\115\070\117" +
    "\001\002\000\004\016\311\001\002\000\004\041\312\001" +
    "\002\000\070\003\uffc1\004\uffc1\005\uffc1\006\uffc1\010\uffc1" +
    "\015\uffc1\016\uffc1\020\uffc1\031\uffc1\034\uffc1\035\uffc1\036" +
    "\uffc1\041\uffc1\046\uffc1\047\uffc1\054\uffc1\056\uffc1\057\uffc1" +
    "\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066" +
    "\uffc1\067\uffc1\070\uffc1\001\002\000\070\003\uffc7\004\uffc7" +
    "\005\uffc7\006\uffc7\010\uffc7\015\uffc7\016\uffc7\020\uffc7\031" +
    "\uffc7\034\uffc7\035\uffc7\036\uffc7\041\uffc7\046\uffc7\047\uffc7" +
    "\054\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063" +
    "\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7\070\uffc7\001\002" +
    "\000\030\003\131\004\166\005\047\010\122\015\107\034" +
    "\127\035\052\036\053\046\136\047\115\070\117\001\002" +
    "\000\004\016\316\001\002\000\004\017\317\001\002\000" +
    "\060\003\uffdf\004\uffdf\005\uffdf\006\uffdf\010\uffdf\015\uffdf" +
    "\020\uffdf\031\uffdf\034\uffdf\035\uffdf\036\uffdf\041\uffdf\046" +
    "\uffdf\047\uffdf\054\uffdf\056\uffdf\060\uffdf\062\uffdf\063\uffdf" +
    "\064\uffdf\065\uffdf\066\uffdf\070\uffdf\001\002\000\060\003" +
    "\131\004\121\005\047\006\036\010\122\015\107\020\321" +
    "\031\040\034\127\035\052\036\053\041\112\046\136\047" +
    "\115\054\116\056\135\060\132\062\143\063\110\064\105" +
    "\065\151\066\124\070\117\001\002\000\070\003\uffc8\004" +
    "\uffc8\005\uffc8\006\uffc8\010\uffc8\015\uffc8\016\uffc8\020\uffc8" +
    "\031\uffc8\034\uffc8\035\uffc8\036\uffc8\041\uffc8\046\uffc8\047" +
    "\uffc8\054\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8" +
    "\063\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\070\uffc8\001" +
    "\002\000\054\007\uff85\010\uff85\011\uff85\012\uff85\013\uff85" +
    "\014\uff85\016\uff85\021\176\022\uff85\023\uff85\024\uff85\025" +
    "\uff85\026\uff85\027\uff85\030\uff85\032\uff85\033\uff85\037\uff85" +
    "\041\uff85\044\174\053\uff85\001\002\000\052\007\uff86\010" +
    "\uff86\011\uff86\012\uff86\013\uff86\014\uff86\016\uff86\022\uff86" +
    "\023\uff86\024\uff86\025\uff86\026\uff86\027\uff86\030\uff86\032" +
    "\uff86\033\uff86\037\uff86\041\uff86\044\303\053\uff86\001\002" +
    "\000\030\003\131\004\166\005\047\010\122\015\107\034" +
    "\127\035\052\036\053\046\136\047\115\070\117\001\002" +
    "\000\004\016\326\001\002\000\004\017\327\001\002\000" +
    "\006\057\uffca\061\uffca\001\002\000\006\057\333\061\331" +
    "\001\002\000\004\040\342\001\002\000\004\020\341\001" +
    "\002\000\004\015\334\001\002\000\010\005\047\035\052" +
    "\036\053\001\002\000\004\016\336\001\002\000\004\040" +
    "\337\001\002\000\062\003\uffdf\004\uffdf\005\uffdf\006\uffdf" +
    "\010\uffdf\015\uffdf\031\uffdf\034\uffdf\035\uffdf\036\uffdf\041" +
    "\uffdf\046\uffdf\047\uffdf\054\uffdf\056\uffdf\057\uffdf\060\uffdf" +
    "\061\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\070" +
    "\uffdf\001\002\000\062\003\131\004\121\005\047\006\036" +
    "\010\122\015\107\031\040\034\127\035\052\036\053\041" +
    "\112\046\136\047\115\054\116\056\135\057\uffcb\060\132" +
    "\061\uffcb\062\143\063\110\064\105\065\151\066\124\070" +
    "\117\001\002\000\070\003\uffcc\004\uffcc\005\uffcc\006\uffcc" +
    "\010\uffcc\015\uffcc\016\uffcc\020\uffcc\031\uffcc\034\uffcc\035" +
    "\uffcc\036\uffcc\041\uffcc\046\uffcc\047\uffcc\054\uffcc\056\uffcc" +
    "\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065" +
    "\uffcc\066\uffcc\067\uffcc\070\uffcc\001\002\000\056\003\uffdf" +
    "\004\uffdf\005\uffdf\006\uffdf\010\uffdf\015\uffdf\031\uffdf\034" +
    "\uffdf\035\uffdf\036\uffdf\041\uffdf\046\uffdf\047\uffdf\054\uffdf" +
    "\056\uffdf\060\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf\066" +
    "\uffdf\070\uffdf\001\002\000\056\003\131\004\121\005\047" +
    "\006\036\010\122\015\107\031\040\034\127\035\052\036" +
    "\053\041\112\046\136\047\115\054\116\056\135\060\344" +
    "\062\143\063\110\064\105\065\151\066\124\070\117\001" +
    "\002\000\004\041\345\001\002\000\060\003\uffc6\004\uffc6" +
    "\005\uffc6\006\uffc6\010\uffc6\015\uffc6\020\uffc9\031\uffc6\034" +
    "\uffc6\035\uffc6\036\uffc6\041\uffc6\046\uffc6\047\uffc6\054\uffc6" +
    "\056\uffc6\060\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\066" +
    "\uffc6\070\uffc6\001\002\000\070\003\uff6a\004\uff6a\005\uff6a" +
    "\006\uff6a\010\uff6a\015\uff6a\016\uff6a\020\uff6a\031\uff6a\034" +
    "\uff6a\035\uff6a\036\uff6a\041\uff6a\046\uff6a\047\uff6a\054\uff6a" +
    "\056\uff6a\057\uff6a\060\uff6a\061\uff6a\062\uff6a\063\uff6a\064" +
    "\uff6a\065\uff6a\066\uff6a\067\uff6a\070\uff6a\001\002\000\032" +
    "\003\131\004\166\005\047\010\122\015\107\034\127\035" +
    "\052\036\053\046\136\047\115\050\351\070\117\001\002" +
    "\000\004\041\360\001\002\000\010\004\352\006\036\031" +
    "\040\001\002\000\012\015\225\021\uff6f\041\uff6f\046\uff6f" +
    "\001\002\000\004\041\357\001\002\000\010\021\uffd9\041" +
    "\uffd9\046\043\001\002\000\006\021\045\041\356\001\002" +
    "\000\070\003\uffd6\004\uffd6\005\uffd6\006\uffd6\010\uffd6\015" +
    "\uffd6\016\uffd6\020\uffd6\031\uffd6\034\uffd6\035\uffd6\036\uffd6" +
    "\041\uffd6\046\uffd6\047\uffd6\054\uffd6\056\uffd6\057\uffd6\060" +
    "\uffd6\061\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6" +
    "\067\uffd6\070\uffd6\001\002\000\070\003\uffd5\004\uffd5\005" +
    "\uffd5\006\uffd5\010\uffd5\015\uffd5\016\uffd5\020\uffd5\031\uffd5" +
    "\034\uffd5\035\uffd5\036\uffd5\041\uffd5\046\uffd5\047\uffd5\054" +
    "\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5" +
    "\064\uffd5\065\uffd5\066\uffd5\067\uffd5\070\uffd5\001\002\000" +
    "\070\003\uffd7\004\uffd7\005\uffd7\006\uffd7\010\uffd7\015\uffd7" +
    "\016\uffd7\020\uffd7\031\uffd7\034\uffd7\035\uffd7\036\uffd7\041" +
    "\uffd7\046\uffd7\047\uffd7\054\uffd7\056\uffd7\057\uffd7\060\uffd7" +
    "\061\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\067" +
    "\uffd7\070\uffd7\001\002\000\070\003\uffc6\004\uffc6\005\uffc6" +
    "\006\uffc6\010\uffc6\015\uffc6\016\uffc6\020\uffc6\031\uffc6\034" +
    "\uffc6\035\uffc6\036\uffc6\041\uffc6\046\uffc6\047\uffc6\054\uffc6" +
    "\056\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064" +
    "\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6\001\002\000\030" +
    "\003\371\004\166\005\047\010\122\015\107\034\127\035" +
    "\052\036\053\046\136\047\115\070\117\001\002\000\030" +
    "\003\371\004\166\005\047\010\122\015\107\034\127\035" +
    "\052\036\053\046\136\047\115\070\117\001\002\000\030" +
    "\003\371\004\166\005\047\010\122\015\107\034\127\035" +
    "\052\036\053\046\136\047\115\070\117\001\002\000\030" +
    "\003\371\004\166\005\047\010\122\015\107\034\127\035" +
    "\052\036\053\046\136\047\115\070\117\001\002\000\030" +
    "\003\371\004\166\005\047\010\122\015\107\034\127\035" +
    "\052\036\053\046\136\047\115\070\117\001\002\000\030" +
    "\003\371\004\166\005\047\010\122\015\107\034\127\035" +
    "\052\036\053\046\136\047\115\070\117\001\002\000\016" +
    "\016\uffaf\022\uffaf\033\241\037\uffaf\041\uffaf\053\uffaf\001" +
    "\002\000\026\007\253\010\251\011\171\012\173\013\172" +
    "\014\175\021\176\032\254\033\252\044\174\001\002\000" +
    "\016\016\uffac\022\uffac\033\241\037\uffac\041\uffac\053\uffac" +
    "\001\002\000\016\016\uffb8\022\uffb8\033\241\037\uffb8\041" +
    "\uffb8\053\uffb8\001\002\000\016\016\uffb2\022\uffb2\033\241" +
    "\037\uffb2\041\uffb2\053\uffb2\001\002\000\016\016\uffbb\022" +
    "\uffbb\033\241\037\uffbb\041\uffbb\053\uffbb\001\002\000\016" +
    "\016\uffb5\022\uffb5\033\241\037\uffb5\041\uffb5\053\uffb5\001" +
    "\002\000\034\016\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1" +
    "\026\uffa1\027\uffa1\030\uffa1\032\uffa1\033\uffa1\037\uffa1\041" +
    "\uffa1\053\uffa1\001\002\000\054\007\253\010\251\011\171" +
    "\012\173\013\172\014\175\016\uffa0\021\176\022\uffa0\023" +
    "\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0\032\uffa0" +
    "\033\uffa0\037\uffa0\041\uffa0\044\174\053\uffa0\001\002\000" +
    "\004\041\uffde\001\002\000\004\041\u0103\001\002\000\004" +
    "\020\u0104\001\002\000\022\020\uffe8\042\uffe8\043\uffe8\045" +
    "\uffe8\051\uffe8\052\uffe8\071\uffe8\072\uffe8\001\002\000\030" +
    "\003\131\004\166\005\047\010\122\015\107\034\127\035" +
    "\052\036\053\046\136\047\115\070\117\001\002\000\004" +
    "\016\u0107\001\002\000\004\041\u0108\001\002\000\070\003" +
    "\uffc0\004\uffc0\005\uffc0\006\uffc0\010\uffc0\015\uffc0\016\uffc0" +
    "\020\uffc0\031\uffc0\034\uffc0\035\uffc0\036\uffc0\041\uffc0\046" +
    "\uffc0\047\uffc0\054\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0" +
    "\062\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0\070" +
    "\uffc0\001\002\000\046\007\uff97\010\uff97\011\214\012\216" +
    "\013\215\016\uff97\022\uff97\023\uff97\024\uff97\025\uff97\026" +
    "\uff97\027\uff97\030\uff97\032\uff97\033\uff97\037\uff97\041\uff97" +
    "\053\uff97\001\002\000\054\007\uff96\010\uff96\011\171\012" +
    "\173\013\172\014\175\016\uff96\021\176\022\uff96\023\uff96" +
    "\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96\032\uff96\033" +
    "\uff96\037\uff96\041\uff96\044\174\053\uff96\001\002\000\070" +
    "\003\uffd0\004\uffd0\005\uffd0\006\uffd0\010\uffd0\015\uffd0\016" +
    "\uffd0\020\uffd0\031\uffd0\034\uffd0\035\uffd0\036\uffd0\041\uffd0" +
    "\046\uffd0\047\uffd0\054\uffd0\056\uffd0\057\uffd0\060\uffd0\061" +
    "\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0" +
    "\070\uffd0\001\002\000\030\003\131\004\166\005\047\010" +
    "\122\015\107\034\127\035\052\036\053\046\136\047\115" +
    "\070\117\001\002\000\004\016\u010e\001\002\000\004\017" +
    "\u010f\001\002\000\060\003\uffdf\004\uffdf\005\uffdf\006\uffdf" +
    "\010\uffdf\015\uffdf\020\uffdf\031\uffdf\034\uffdf\035\uffdf\036" +
    "\uffdf\041\uffdf\046\uffdf\047\uffdf\054\uffdf\056\uffdf\060\uffdf" +
    "\062\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\070\uffdf\001" +
    "\002\000\060\003\131\004\121\005\047\006\036\010\122" +
    "\015\107\020\u0111\031\040\034\127\035\052\036\053\041" +
    "\112\046\136\047\115\054\116\056\135\060\132\062\143" +
    "\063\110\064\105\065\151\066\124\070\117\001\002\000" +
    "\072\003\uffcd\004\uffcd\005\uffcd\006\uffcd\010\uffcd\015\uffcd" +
    "\016\uffcd\020\uffcd\031\uffcd\034\uffcd\035\uffcd\036\uffcd\041" +
    "\uffcd\046\uffcd\047\uffcd\054\uffcd\055\u0112\056\uffcd\057\uffcd" +
    "\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd\066" +
    "\uffcd\067\uffcd\070\uffcd\001\002\000\006\003\u0114\017\u0115" +
    "\001\002\000\070\003\uffd1\004\uffd1\005\uffd1\006\uffd1\010" +
    "\uffd1\015\uffd1\016\uffd1\020\uffd1\031\uffd1\034\uffd1\035\uffd1" +
    "\036\uffd1\041\uffd1\046\uffd1\047\uffd1\054\uffd1\056\uffd1\057" +
    "\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1" +
    "\066\uffd1\067\uffd1\070\uffd1\001\002\000\070\003\uffce\004" +
    "\uffce\005\uffce\006\uffce\010\uffce\015\uffce\016\uffce\020\uffce" +
    "\031\uffce\034\uffce\035\uffce\036\uffce\041\uffce\046\uffce\047" +
    "\uffce\054\uffce\056\uffce\057\uffce\060\uffce\061\uffce\062\uffce" +
    "\063\uffce\064\uffce\065\uffce\066\uffce\067\uffce\070\uffce\001" +
    "\002\000\060\003\uffdf\004\uffdf\005\uffdf\006\uffdf\010\uffdf" +
    "\015\uffdf\020\uffdf\031\uffdf\034\uffdf\035\uffdf\036\uffdf\041" +
    "\uffdf\046\uffdf\047\uffdf\054\uffdf\056\uffdf\060\uffdf\062\uffdf" +
    "\063\uffdf\064\uffdf\065\uffdf\066\uffdf\070\uffdf\001\002\000" +
    "\060\003\131\004\121\005\047\006\036\010\122\015\107" +
    "\020\u0117\031\040\034\127\035\052\036\053\041\112\046" +
    "\136\047\115\054\116\056\135\060\132\062\143\063\110" +
    "\064\105\065\151\066\124\070\117\001\002\000\070\003" +
    "\uffcf\004\uffcf\005\uffcf\006\uffcf\010\uffcf\015\uffcf\016\uffcf" +
    "\020\uffcf\031\uffcf\034\uffcf\035\uffcf\036\uffcf\041\uffcf\046" +
    "\uffcf\047\uffcf\054\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf" +
    "\062\uffcf\063\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\070" +
    "\uffcf\001\002\000\054\007\uff83\010\uff83\011\uff83\012\uff83" +
    "\013\uff83\014\uff83\016\uff83\021\176\022\uff83\023\uff83\024" +
    "\uff83\025\uff83\026\uff83\027\uff83\030\uff83\032\uff83\033\uff83" +
    "\037\uff83\041\uff83\044\174\053\uff83\001\002\000\052\007" +
    "\uff84\010\uff84\011\uff84\012\uff84\013\uff84\014\uff84\016\uff84" +
    "\022\uff84\023\uff84\024\uff84\025\uff84\026\uff84\027\uff84\030" +
    "\uff84\032\uff84\033\uff84\037\uff84\041\uff84\044\303\053\uff84" +
    "\001\002\000\056\003\131\004\121\005\047\006\036\010" +
    "\122\015\107\031\040\034\127\035\052\036\053\041\112" +
    "\046\136\047\115\054\116\056\135\060\132\062\143\063" +
    "\110\064\105\065\151\066\124\070\117\001\002\000\004" +
    "\041\u011c\001\002\000\030\003\131\004\166\005\047\010" +
    "\122\015\107\034\127\035\052\036\053\046\136\047\115" +
    "\070\117\001\002\000\004\041\u011e\001\002\000\056\003" +
    "\131\004\121\005\047\006\036\010\122\015\107\031\040" +
    "\034\127\035\052\036\053\041\112\046\136\047\115\054" +
    "\116\056\135\060\132\062\143\063\110\064\105\065\151" +
    "\066\124\070\117\001\002\000\004\016\u0120\001\002\000" +
    "\004\017\u0121\001\002\000\060\003\uffdf\004\uffdf\005\uffdf" +
    "\006\uffdf\010\uffdf\015\uffdf\020\uffdf\031\uffdf\034\uffdf\035" +
    "\uffdf\036\uffdf\041\uffdf\046\uffdf\047\uffdf\054\uffdf\056\uffdf" +
    "\060\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\070" +
    "\uffdf\001\002\000\060\003\131\004\121\005\047\006\036" +
    "\010\122\015\107\020\u0123\031\040\034\127\035\052\036" +
    "\053\041\112\046\136\047\115\054\116\056\135\060\132" +
    "\062\143\063\110\064\105\065\151\066\124\070\117\001" +
    "\002\000\070\003\uffc4\004\uffc4\005\uffc4\006\uffc4\010\uffc4" +
    "\015\uffc4\016\uffc4\020\uffc4\031\uffc4\034\uffc4\035\uffc4\036" +
    "\uffc4\041\uffc4\046\uffc4\047\uffc4\054\uffc4\056\uffc4\057\uffc4" +
    "\060\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\066" +
    "\uffc4\067\uffc4\070\uffc4\001\002\000\004\016\u0125\001\002" +
    "\000\054\007\uff79\010\uff79\011\uff79\012\uff79\013\uff79\014" +
    "\uff79\016\uff79\021\uff79\022\uff79\023\uff79\024\uff79\025\uff79" +
    "\026\uff79\027\uff79\030\uff79\032\uff79\033\uff79\037\uff79\041" +
    "\uff79\044\uff79\053\uff79\001\002\000\070\003\uff5f\004\uff5f" +
    "\005\uff5f\006\uff5f\010\uff5f\015\uff5f\016\uff5f\020\uff5f\031" +
    "\uff5f\034\uff5f\035\uff5f\036\uff5f\041\uff5f\046\uff5f\047\uff5f" +
    "\054\uff5f\056\uff5f\057\uff5f\060\uff5f\061\uff5f\062\uff5f\063" +
    "\uff5f\064\uff5f\065\uff5f\066\uff5f\067\uff5f\070\uff5f\001\002" +
    "\000\032\003\131\004\166\005\047\010\122\015\107\034" +
    "\127\035\052\036\053\046\136\047\115\050\u0128\070\117" +
    "\001\002\000\010\004\352\006\036\031\040\001\002\000" +
    "\004\041\u012a\001\002\000\070\003\uffd4\004\uffd4\005\uffd4" +
    "\006\uffd4\010\uffd4\015\uffd4\016\uffd4\020\uffd4\031\uffd4\034" +
    "\uffd4\035\uffd4\036\uffd4\041\uffd4\046\uffd4\047\uffd4\054\uffd4" +
    "\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\064" +
    "\uffd4\065\uffd4\066\uffd4\067\uffd4\070\uffd4\001\002\000\004" +
    "\041\u012f\001\002\000\010\021\uffd9\041\uffd9\046\043\001" +
    "\002\000\006\021\045\041\u012e\001\002\000\070\003\uffd3" +
    "\004\uffd3\005\uffd3\006\uffd3\010\uffd3\015\uffd3\016\uffd3\020" +
    "\uffd3\031\uffd3\034\uffd3\035\uffd3\036\uffd3\041\uffd3\046\uffd3" +
    "\047\uffd3\054\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062" +
    "\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3\070\uffd3" +
    "\001\002\000\070\003\uffd2\004\uffd2\005\uffd2\006\uffd2\010" +
    "\uffd2\015\uffd2\016\uffd2\020\uffd2\031\uffd2\034\uffd2\035\uffd2" +
    "\036\uffd2\041\uffd2\046\uffd2\047\uffd2\054\uffd2\056\uffd2\057" +
    "\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2" +
    "\066\uffd2\067\uffd2\070\uffd2\001\002\000\070\003\uffc5\004" +
    "\uffc5\005\uffc5\006\uffc5\010\uffc5\015\uffc5\016\uffc5\020\uffc5" +
    "\031\uffc5\034\uffc5\035\uffc5\036\uffc5\041\uffc5\046\uffc5\047" +
    "\uffc5\054\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5" +
    "\063\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\001" +
    "\002\000\060\003\131\004\121\005\047\006\036\010\122" +
    "\015\107\031\040\034\127\035\052\036\053\041\112\046" +
    "\136\047\115\054\116\056\135\060\132\062\143\063\110" +
    "\064\105\065\151\066\124\067\u0132\070\117\001\002\000" +
    "\004\041\u0133\001\002\000\004\020\u0134\001\002\000\022" +
    "\020\uffe7\042\uffe7\043\uffe7\045\uffe7\051\uffe7\052\uffe7\071" +
    "\uffe7\072\uffe7\001\002\000\014\042\ufff8\043\ufff8\045\ufff8" +
    "\051\ufff8\052\ufff8\001\002\000\012\004\uffe3\006\uffe3\016" +
    "\uffe5\031\uffe3\001\002\000\004\016\u0138\001\002\000\004" +
    "\017\u0139\001\002\000\060\003\uffdf\004\uffdf\005\uffdf\006" +
    "\uffdf\010\uffdf\015\uffdf\020\uffdf\031\uffdf\034\uffdf\035\uffdf" +
    "\036\uffdf\041\uffdf\046\uffdf\047\uffdf\054\uffdf\056\uffdf\060" +
    "\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\070\uffdf" +
    "\001\002\000\060\003\131\004\121\005\047\006\036\010" +
    "\122\015\107\020\u013b\031\040\034\127\035\052\036\053" +
    "\041\112\046\136\047\115\054\116\056\135\060\132\062" +
    "\143\063\110\064\105\065\151\066\124\070\117\001\002" +
    "\000\012\004\ufff4\020\ufff4\071\ufff4\072\ufff4\001\002\000" +
    "\004\017\u013d\001\002\000\010\004\uffeb\006\uffeb\031\uffeb" +
    "\001\002\000\010\004\u013f\006\036\031\040\001\002\000" +
    "\010\004\uff6f\015\u0136\046\uff6f\001\002\000\006\004\ufff5" +
    "\020\ufff5\001\002\000\004\041\u0142\001\002\000\010\004" +
    "\uffec\006\uffec\031\uffec\001\002\000\006\004\027\020\u0144" +
    "\001\002\000\014\042\uffed\043\uffed\045\uffed\051\uffed\052" +
    "\uffed\001\002\000\004\041\u0146\001\002\000\014\042\uffdc" +
    "\043\uffdc\045\uffdc\051\uffdc\052\uffdc\001\002\000\004\015" +
    "\u0148\001\002\000\004\016\u0149\001\002\000\004\040\u014a" +
    "\001\002\000\004\006\u014b\001\002\000\004\017\u014c\001" +
    "\002\000\060\003\uffdf\004\uffdf\005\uffdf\006\uffdf\010\uffdf" +
    "\015\uffdf\031\uffdf\034\uffdf\035\uffdf\036\uffdf\041\uffdf\046" +
    "\uffdf\047\uffdf\054\uffdf\056\uffdf\060\uffdf\062\uffdf\063\uffdf" +
    "\064\uffdf\065\uffdf\066\uffdf\067\uffdf\070\uffdf\001\002\000" +
    "\060\003\131\004\121\005\047\006\036\010\122\015\107" +
    "\031\040\034\127\035\052\036\053\041\112\046\136\047" +
    "\115\054\116\056\135\060\132\062\143\063\110\064\105" +
    "\065\151\066\124\067\u014e\070\117\001\002\000\004\005" +
    "\u014f\001\002\000\004\041\u0150\001\002\000\004\020\u0151" +
    "\001\002\000\004\002\uffbf\001\002\000\010\005\047\035" +
    "\052\036\053\001\002\000\004\041\u0154\001\002\000\014" +
    "\042\uffdd\043\uffdd\045\uffdd\051\uffdd\052\uffdd\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0153\000\006\053\004\060\003\001\001\000\002\001" +
    "\001\000\024\012\021\013\022\014\005\015\016\016\020" +
    "\040\010\041\013\042\007\043\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\u0144\075\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\047\025" +
    "\001\001\000\010\006\027\007\030\076\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\052\055\001\001" +
    "\000\006\010\036\075\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\034\050\057\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\056\056\057\001\001\000\002\001\001\000\004" +
    "\076\060\001\001\000\010\041\061\042\007\043\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\045\065\046\066\001\001\000\002\001\001\000" +
    "\010\002\067\010\070\075\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\u0130\001\001\000\004\075\100\001\001\000\002\001" +
    "\001\000\004\004\102\001\001\000\100\010\133\017\105" +
    "\020\156\021\153\022\151\023\146\024\145\025\161\026" +
    "\160\027\157\030\154\031\152\032\147\033\144\035\124" +
    "\037\143\044\117\057\137\061\132\062\141\063\112\064" +
    "\113\065\155\066\136\067\140\070\110\071\127\072\122" +
    "\073\103\074\162\075\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\017\u0123\020\156" +
    "\021\153\022\151\023\146\024\145\025\161\026\160\027" +
    "\157\030\154\031\152\032\147\033\144\035\124\037\143" +
    "\044\117\057\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\031\u0118\032\147\033\144\035\124\037\143\044" +
    "\117\057\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\026\u0108\027" +
    "\157\030\154\031\152\032\147\033\144\035\124\037\143" +
    "\044\117\057\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\017\u0100\020\156\021\153" +
    "\022\151\023\146\024\145\025\161\026\160\027\157\030" +
    "\154\031\152\032\147\033\144\035\124\036\u0101\037\143" +
    "\044\117\057\137\001\001\000\032\024\376\025\161\026" +
    "\160\027\157\030\154\031\152\032\147\033\144\035\124" +
    "\037\143\044\117\057\137\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\031\322\032\147\033" +
    "\144\035\124\037\143\044\117\057\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\026\232\027\157\030\154\031" +
    "\152\032\147\033\144\035\124\037\143\044\117\057\137" +
    "\001\001\000\026\026\166\027\157\030\154\031\152\032" +
    "\147\033\144\035\124\037\143\044\117\057\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\027\212\030\154\031\152\032\147\033\144\035\124" +
    "\037\143\044\117\057\137\001\001\000\024\027\211\030" +
    "\154\031\152\032\147\033\144\035\124\037\143\044\117" +
    "\057\137\001\001\000\024\027\207\030\154\031\152\032" +
    "\147\033\144\035\124\037\143\044\117\057\137\001\001" +
    "\000\016\032\202\033\144\035\124\037\143\044\117\057" +
    "\137\001\001\000\022\030\201\031\152\032\147\033\144" +
    "\035\124\037\143\044\117\057\137\001\001\000\044\017" +
    "\176\020\156\021\153\022\151\023\146\024\145\025\161" +
    "\026\160\027\157\030\154\031\152\032\147\033\144\035" +
    "\124\037\143\044\117\057\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\017\205\020\156" +
    "\021\153\022\151\023\146\024\145\025\161\026\160\027" +
    "\157\030\154\031\152\032\147\033\144\035\124\037\143" +
    "\044\117\057\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\027\222\030\154\031\152\032" +
    "\147\033\144\035\124\037\143\044\117\057\137\001\001" +
    "\000\024\027\220\030\154\031\152\032\147\033\144\035" +
    "\124\037\143\044\117\057\137\001\001\000\024\027\216" +
    "\030\154\031\152\032\147\033\144\035\124\037\143\044" +
    "\117\057\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\054\225\055\226\001\001\000\002" +
    "\001\001\000\044\017\227\020\156\021\153\022\151\023" +
    "\146\024\145\025\161\026\160\027\157\030\154\031\152" +
    "\032\147\033\144\035\124\037\143\044\117\057\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\030\236\031" +
    "\152\032\147\033\144\035\124\037\143\044\117\057\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\021" +
    "\300\022\151\023\146\024\145\025\161\026\160\027\157" +
    "\030\154\031\152\032\147\033\144\035\124\037\143\044" +
    "\117\057\137\001\001\000\036\022\276\023\146\024\145" +
    "\025\161\026\160\027\157\030\154\031\152\032\147\033" +
    "\144\035\124\037\143\044\117\057\137\001\001\000\040" +
    "\021\274\022\151\023\146\024\145\025\161\026\160\027" +
    "\157\030\154\031\152\032\147\033\144\035\124\037\143" +
    "\044\117\057\137\001\001\000\040\021\272\022\151\023" +
    "\146\024\145\025\161\026\160\027\157\030\154\031\152" +
    "\032\147\033\144\035\124\037\143\044\117\057\137\001" +
    "\001\000\040\021\270\022\151\023\146\024\145\025\161" +
    "\026\160\027\157\030\154\031\152\032\147\033\144\035" +
    "\124\037\143\044\117\057\137\001\001\000\040\021\266" +
    "\022\151\023\146\024\145\025\161\026\160\027\157\030" +
    "\154\031\152\032\147\033\144\035\124\037\143\044\117" +
    "\057\137\001\001\000\040\021\246\022\151\023\146\024" +
    "\145\025\161\026\160\027\157\030\154\031\152\032\147" +
    "\033\144\035\124\037\143\044\117\057\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\026\265\027\157" +
    "\030\154\031\152\032\147\033\144\035\124\037\143\044" +
    "\117\057\137\001\001\000\036\022\260\023\146\024\145" +
    "\025\161\026\160\027\157\030\154\031\152\032\147\033" +
    "\144\035\124\037\143\044\117\057\137\001\001\000\026" +
    "\026\256\027\157\030\154\031\152\032\147\033\144\035" +
    "\124\037\143\044\117\057\137\001\001\000\034\023\254" +
    "\024\145\025\161\026\160\027\157\030\154\031\152\032" +
    "\147\033\144\035\124\037\143\044\117\057\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\023\263\024\145\025\161\026\160\027\157\030\154\031" +
    "\152\032\147\033\144\035\124\037\143\044\117\057\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\304\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\017\307\020\156\021\153\022\151\023" +
    "\146\024\145\025\161\026\160\027\157\030\154\031\152" +
    "\032\147\033\144\035\124\037\143\044\117\057\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\017\314\020\156\021\153\022" +
    "\151\023\146\024\145\025\161\026\160\027\157\030\154" +
    "\031\152\032\147\033\144\035\124\037\143\044\117\057" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\317\001\001\000\100\010\133\017\105\020\156\021" +
    "\153\022\151\023\146\024\145\025\161\026\160\027\157" +
    "\030\154\031\152\032\147\033\144\035\124\037\143\044" +
    "\117\057\137\061\132\062\141\063\112\064\113\065\155" +
    "\066\136\067\140\070\110\071\127\072\122\073\103\074" +
    "\162\075\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\017\324\020\156\021\153\022" +
    "\151\023\146\024\145\025\161\026\160\027\157\030\154" +
    "\031\152\032\147\033\144\035\124\037\143\044\117\057" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\327\001\001\000\004\011\331\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\057\334" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\337\001\001\000\100\010\133\017\105\020\156\021\153" +
    "\022\151\023\146\024\145\025\161\026\160\027\157\030" +
    "\154\031\152\032\147\033\144\035\124\037\143\044\117" +
    "\057\137\061\132\062\141\063\112\064\113\065\155\066" +
    "\136\067\140\070\110\071\127\072\122\073\103\074\162" +
    "\075\040\001\001\000\002\001\001\000\004\004\342\001" +
    "\001\000\100\010\133\017\105\020\156\021\153\022\151" +
    "\023\146\024\145\025\161\026\160\027\157\030\154\031" +
    "\152\032\147\033\144\035\124\037\143\044\117\057\137" +
    "\061\132\062\141\063\112\064\113\065\155\066\136\067" +
    "\140\070\110\071\127\072\122\073\103\074\162\075\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\017\347\020\156\021\153\022\151\023\146" +
    "\024\145\025\161\026\160\027\157\030\154\031\152\032" +
    "\147\033\144\035\124\037\143\044\117\057\137\001\001" +
    "\000\002\001\001\000\006\044\352\075\353\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\354\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\021\375\022\151" +
    "\023\146\024\145\025\161\026\160\027\157\030\154\031" +
    "\152\032\147\033\144\035\124\037\143\044\117\057\137" +
    "\001\001\000\040\021\374\022\151\023\146\024\145\025" +
    "\161\026\160\027\157\030\154\031\152\032\147\033\144" +
    "\035\124\037\143\044\117\057\137\001\001\000\040\021" +
    "\373\022\151\023\146\024\145\025\161\026\160\027\157" +
    "\030\154\031\152\032\147\033\144\035\124\037\143\044" +
    "\117\057\137\001\001\000\040\021\372\022\151\023\146" +
    "\024\145\025\161\026\160\027\157\030\154\031\152\032" +
    "\147\033\144\035\124\037\143\044\117\057\137\001\001" +
    "\000\040\021\371\022\151\023\146\024\145\025\161\026" +
    "\160\027\157\030\154\031\152\032\147\033\144\035\124" +
    "\037\143\044\117\057\137\001\001\000\040\021\367\022" +
    "\151\023\146\024\145\025\161\026\160\027\157\030\154" +
    "\031\152\032\147\033\144\035\124\037\143\044\117\057" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\017\u0105\020\156\021\153\022\151" +
    "\023\146\024\145\025\161\026\160\027\157\030\154\031" +
    "\152\032\147\033\144\035\124\037\143\044\117\057\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\017\u010c\020\156\021\153\022\151\023\146\024" +
    "\145\025\161\026\160\027\157\030\154\031\152\032\147" +
    "\033\144\035\124\037\143\044\117\057\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\u010f\001\001" +
    "\000\100\010\133\017\105\020\156\021\153\022\151\023" +
    "\146\024\145\025\161\026\160\027\157\030\154\031\152" +
    "\032\147\033\144\035\124\037\143\044\117\057\137\061" +
    "\132\062\141\063\112\064\113\065\155\066\136\067\140" +
    "\070\110\071\127\072\122\073\103\074\162\075\040\001" +
    "\001\000\004\005\u0112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\u0115\001\001\000" +
    "\100\010\133\017\105\020\156\021\153\022\151\023\146" +
    "\024\145\025\161\026\160\027\157\030\154\031\152\032" +
    "\147\033\144\035\124\037\143\044\117\057\137\061\132" +
    "\062\141\063\112\064\113\065\155\066\136\067\140\070" +
    "\110\071\127\072\122\073\103\074\162\075\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\100\010\133\017\105\020\156\021\153\022\151\023\146" +
    "\024\145\025\161\026\160\027\157\030\154\031\152\032" +
    "\147\033\144\035\124\037\143\044\117\057\137\061\u011a" +
    "\062\141\063\112\064\113\065\155\066\136\067\140\070" +
    "\110\071\127\072\122\073\103\074\162\075\040\001\001" +
    "\000\002\001\001\000\044\017\u011c\020\156\021\153\022" +
    "\151\023\146\024\145\025\161\026\160\027\157\030\154" +
    "\031\152\032\147\033\144\035\124\037\143\044\117\057" +
    "\137\001\001\000\002\001\001\000\100\010\133\017\105" +
    "\020\156\021\153\022\151\023\146\024\145\025\161\026" +
    "\160\027\157\030\154\031\152\032\147\033\144\035\124" +
    "\037\143\044\117\057\137\061\u011e\062\141\063\112\064" +
    "\113\065\155\066\136\067\140\070\110\071\127\072\122" +
    "\073\103\074\162\075\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\u0121\001\001\000\100\010\133" +
    "\017\105\020\156\021\153\022\151\023\146\024\145\025" +
    "\161\026\160\027\157\030\154\031\152\032\147\033\144" +
    "\035\124\037\143\044\117\057\137\061\132\062\141\063" +
    "\112\064\113\065\155\066\136\067\140\070\110\071\127" +
    "\072\122\073\103\074\162\075\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\017\u0128\020\156\021\153\022\151\023\146\024" +
    "\145\025\161\026\160\027\157\030\154\031\152\032\147" +
    "\033\144\035\124\037\143\044\117\057\137\001\001\000" +
    "\006\044\u012a\075\u012b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\u012c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\100\010\133\017\105\020\156\021\153\022" +
    "\151\023\146\024\145\025\161\026\160\027\157\030\154" +
    "\031\152\032\147\033\144\035\124\037\143\044\117\057" +
    "\137\061\132\062\141\063\112\064\113\065\155\066\136" +
    "\067\140\070\110\071\127\072\122\073\103\074\162\075" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\045\u0136\046\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\u0139" +
    "\001\001\000\100\010\133\017\105\020\156\021\153\022" +
    "\151\023\146\024\145\025\161\026\160\027\157\030\154" +
    "\031\152\032\147\033\144\035\124\037\143\044\117\057" +
    "\137\061\132\062\141\063\112\064\113\065\155\066\136" +
    "\067\140\070\110\071\127\072\122\073\103\074\162\075" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\050\u013d\001\001\000\010\007\u013f\010\u0140\075\040\001" +
    "\001\000\002\001\001\000\004\052\u0142\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\u014c\001\001\000\100" +
    "\010\133\017\105\020\156\021\153\022\151\023\146\024" +
    "\145\025\161\026\160\027\157\030\154\031\152\032\147" +
    "\033\144\035\124\037\143\044\117\057\137\061\132\062" +
    "\141\063\112\064\113\065\155\066\136\067\140\070\110" +
    "\071\127\072\122\073\103\074\162\075\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\057\u0152\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((LexiconUnit)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= S1 MAIN_INS 
            {
              Program RESULT =null;
		List<Definition> array = (List<Definition>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Function m = (Function)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Program(array, m); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",46, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S1 ::= S1 DEF 
            {
              List<Definition> RESULT =null;
		List<Definition> array = (List<Definition>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Definition d = (Definition)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 array.add(d); RESULT = array; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S1",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S1 ::= 
            {
              List<Definition> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S1",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DEF ::= CLASS_DEF 
            {
              Definition RESULT =null;
		Definition c = (Definition)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEF",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DEF ::= STRUCT_DEF 
            {
              Definition RESULT =null;
		Definition s = (Definition)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = s; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEF",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DEF ::= DEFINE_DEF 
            {
              Definition RESULT =null;
		Definition d = (Definition)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = d; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEF",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DEF ::= TYPEDEF_DEF 
            {
              Definition RESULT =null;
		Definition t = (Definition)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = t; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEF",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DEF ::= FUNCTION_DEF 
            {
              Definition RESULT =null;
		Function f = (Function)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = f; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEF",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CLASS_DEF ::= CLASS_T ID BRACKET_OPEN DECLARATIONS_CLASS CLASS_INIT BRACKET_CLOSE 
            {
              Definition RESULT =null;
		TokenValue c = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<Attribute> dec_class = (List<Attribute>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ClassFunctions class_func = (ClassFunctions)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new ClassDefinition(id.lexeme, dec_class, class_func, c.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CLASS_DEF",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CLASS_INIT ::= CONSTRUCTOR MORE_CONSTRUCTORS METHODS 
            {
              ClassFunctions RESULT =null;
		Constructor c = (Constructor)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		List<Constructor> constructors = (List<Constructor>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<Method> methods = (List<Method>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 List<Constructor> allConstructors = new ArrayList<>(); allConstructors.add(c); allConstructors.addAll(constructors); RESULT = new ClassFunctions(allConstructors, methods); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CLASS_INIT",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MORE_CONSTRUCTORS ::= MORE_CONSTRUCTORS CONSTRUCTOR 
            {
              List<Constructor> RESULT =null;
		List<Constructor> array = (List<Constructor>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Constructor c = (Constructor)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 array.add(c); RESULT = array; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_CONSTRUCTORS",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MORE_CONSTRUCTORS ::= 
            {
              List<Constructor> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_CONSTRUCTORS",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONSTRUCTOR ::= ID PARENTESIS_OPEN ARGUMENTS PARENTESIS_CLOSE BRACKET_OPEN FUNCTION_BODY BRACKET_CLOSE 
            {
              Constructor RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		List<Argument> args = (List<Argument>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Constructor(id.lexeme, args, null, body, null, id.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // METHODS ::= METHODS VISIBILITY FUNCTION_DEF 
            {
              List<Method> RESULT =null;
		List<Method> array = (List<Method>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Visibility vis = (Visibility)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Function func = (Function)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 Method method = new Method(func, vis); array.add(method); RESULT = array; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("METHODS",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // METHODS ::= 
            {
              List<Method> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("METHODS",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VISIBILITY ::= PUBLIC 
            {
              Visibility RESULT =null;
		 RESULT = new Public_Vis(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VISIBILITY",60, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VISIBILITY ::= PRIVATE 
            {
              Visibility RESULT =null;
		 RESULT = new Private_Vis(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VISIBILITY",60, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARATIONS_CLASS ::= DECLARATIONS_CLASS VISIBILITY DECLARATION SEMICOLON 
            {
              List<Attribute> RESULT =null;
		List<Attribute> array = (List<Attribute>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Visibility vis = (Visibility)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Declaration dec = (Declaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 array.add(new Attribute(dec, vis)); RESULT = array; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS_CLASS",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARATIONS_CLASS ::= 
            {
              List<Attribute> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS_CLASS",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STRUCT_DEF ::= STRUCT_T ID BRACKET_OPEN DECLARATIONS_STRUCT CONSTRUCTOR MORE_CONSTRUCTORS BRACKET_CLOSE 
            {
              Definition RESULT =null;
		TokenValue s = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		List<Attribute> declarations = (List<Attribute>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Constructor c = (Constructor)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		List<Constructor> constructors = (List<Constructor>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 List<Constructor> allConstructors = new ArrayList<>(); allConstructors.add(c); allConstructors.addAll(constructors); RESULT = new StructDefinition(id.lexeme, declarations, allConstructors, s.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("STRUCT_DEF",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARATIONS_STRUCT ::= DECLARATIONS_STRUCT DECLARATION SEMICOLON 
            {
              List<Attribute> RESULT =null;
		List<Attribute> array = (List<Attribute>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Declaration dec = (Declaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 array.add(new Attribute(dec)); RESULT = array; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS_STRUCT",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARATIONS_STRUCT ::= 
            {
              List<Attribute> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS_STRUCT",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNCTION_DEF ::= TYPED_FUNCTION 
            {
              Function RESULT =null;
		Function func = (Function)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = func; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUNCTION_DEF",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNCTION_DEF ::= VOID_FUNCTION 
            {
              Function RESULT =null;
		Function func = (Function)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = func; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUNCTION_DEF",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TYPED_FUNCTION ::= FUNC_T ID PARENTESIS_OPEN ARGUMENTS PARENTESIS_CLOSE COLON TYPE BRACKET_OPEN FUNCTION_BODY RETURN RETURN_VALUE SEMICOLON BRACKET_CLOSE 
            {
              Function RESULT =null;
		TokenValue f = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-12)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-11)).value;
		List<Argument> args = (List<Argument>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-9)).value;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Function(id.lexeme, args, t, body, e, f.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPED_FUNCTION",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VOID_FUNCTION ::= FUNC_T ID PARENTESIS_OPEN ARGUMENTS PARENTESIS_CLOSE BRACKET_OPEN FUNCTION_BODY RETURN SEMICOLON BRACKET_CLOSE 
            {
              Function RESULT =null;
		TokenValue f = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-9)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).value;
		List<Argument> args = (List<Argument>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		 RESULT = new Function(id.lexeme, args, null, body, null, f.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VOID_FUNCTION",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ARGUMENTS ::= MORE_ARGUMENTS ARGUMENT 
            {
              List<Argument> RESULT =null;
		List<Argument> array = (List<Argument>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Argument arg = (Argument)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 array.add(arg); RESULT = array; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTS",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ARGUMENTS ::= 
            {
              List<Argument> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTS",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MORE_ARGUMENTS ::= MORE_ARGUMENTS ARGUMENT COMMA 
            {
              List<Argument> RESULT =null;
		List<Argument> array = (List<Argument>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Argument arg = (Argument)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 array.add(arg); RESULT = array; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_ARGUMENTS",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MORE_ARGUMENTS ::= 
            {
              List<Argument> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_ARGUMENTS",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ARGUMENT ::= DECLARATION 
            {
              Argument RESULT =null;
		Declaration dec = (Declaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Argument(dec); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENT",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ARGUMENT ::= TYPE REFERENCE_OP ID 
            {
              Argument RESULT =null;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Argument(t, id.lexeme, true, id.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENT",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUNCTION_BODY ::= FUNCTION_BODY SENTENCE 
            {
              Block RESULT =null;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Sentence s = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 body.add_instruction(s); RESULT = body; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUNCTION_BODY",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FUNCTION_BODY ::= 
            {
              Block RESULT =null;
		 RESULT = new Block(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUNCTION_BODY",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // RETURN_VALUE ::= EXPRESSION 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RETURN_VALUE",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DEFINE_DEF ::= DEFINE ID LITERAL SEMICOLON 
            {
              Definition RESULT =null;
		TokenValue d = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Literal e = (Literal)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Define(id.lexeme, e, d.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEFINE_DEF",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TYPEDEF_DEF ::= TYPEDEF DECLARATION SEMICOLON 
            {
              Definition RESULT =null;
		TokenValue t = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Declaration dec = (Declaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Typedef(dec, t.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPEDEF_DEF",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARATION ::= TYPE ID ARRAY_CONSTRUCTOR 
            {
              Declaration RESULT =null;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Array_Type array = (Array_Type)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = Declaration.manageDeclaration(t, id.lexeme, array, id.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ARRAY_CONSTRUCTOR ::= ARRAY_CONSTRUCTOR SQ_BRACKET_OPEN OPT_INTEGER SQ_BRACKET_CLOSE 
            {
              Array_Type RESULT =null;
		Array_Type prevArray = (Array_Type)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		TokenValue b = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 Array_Type newArray = new Array_Type(i, b.row); RESULT = Array_Type.updateTypes(newArray, prevArray); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRAY_CONSTRUCTOR",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ARRAY_CONSTRUCTOR ::= 
            {
              Array_Type RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRAY_CONSTRUCTOR",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ID_PARENTESIS ::= ID PARENTESIS_OPEN EXPRESSIONS PARENTESIS_CLOSE 
            {
              FunctionCall RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		List<Expression> expressions = (List<Expression>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new FunctionCall(id.lexeme, expressions, id.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ID_PARENTESIS",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARATION_AND_ASSIGNATION_INS ::= DECLARATION ASSIGNATION_OP EXPRESSION SEMICOLON 
            {
              Sentence RESULT =null;
		Declaration dec = (Declaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new DeclarationAndAssignation(dec, e, a.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION_AND_ASSIGNATION_INS",58, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARATION_AND_ASSIGNATION_INS ::= DECLARATION ASSIGNATION_OP NEW_OP TYPE ARRAY_CONSTRUCTOR SEMICOLON 
            {
              Sentence RESULT =null;
		Declaration dec = (Declaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Array_Type array = (Array_Type)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new DeclarationAndAssignation(dec, new New_Op(Declaration.manageType(t, array), a.row), a.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION_AND_ASSIGNATION_INS",58, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARATION_AND_ASSIGNATION_INS ::= DECLARATION ASSIGNATION_OP NEW_OP ID_PARENTESIS SEMICOLON 
            {
              Sentence RESULT =null;
		Declaration dec = (Declaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		FunctionCall e = (FunctionCall)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new DeclarationAndAssignation(dec, new New_Op(new ConstructorCall (e, a.row), a.row), a.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION_AND_ASSIGNATION_INS",58, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASSIGNATION_INS ::= EXPRESSION ASSIGNATION_OP EXPRESSION SEMICOLON 
            {
              Sentence RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Assignation_Ins(iz, dc, a.row) ; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASSIGNATION_INS",57, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ASSIGNATION_INS ::= EXPRESSION ASSIGNATION_OP NEW_OP TYPE ARRAY_CONSTRUCTOR SEMICOLON 
            {
              Sentence RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Array_Type array = (Array_Type)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Assignation_Ins(iz, new New_Op(Declaration.manageType(t, array), a.row), a.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASSIGNATION_INS",57, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ASSIGNATION_INS ::= EXPRESSION ASSIGNATION_OP NEW_OP ID_PARENTESIS SEMICOLON 
            {
              Sentence RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		FunctionCall dc = (FunctionCall)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Assignation_Ins(iz, new New_Op(new ConstructorCall (dc, a.row), a.row), a.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASSIGNATION_INS",57, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IF_INS ::= IF PARENTESIS_OPEN EXPRESSION PARENTESIS_CLOSE BRACKET_OPEN FUNCTION_BODY BRACKET_CLOSE ELSE_INS 
            {
              Sentence RESULT =null;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		Block if_body = (Block)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Block else_body = (Block)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new If_Ins(cond, if_body, else_body, i.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IF_INS",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IF_INS ::= IF error 
            {
              Sentence RESULT =null;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Error_Ins(i.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IF_INS",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ELSE_INS ::= ELSE BRACKET_OPEN FUNCTION_BODY BRACKET_CLOSE 
            {
              Block RESULT =null;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = body; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ELSE_INS",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ELSE_INS ::= ELSE error 
            {
              Block RESULT =null;
		TokenValue e = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 List<Sentence> listElse = new ArrayList<>(); listElse.add(new Error_Ins(e.row));  RESULT = new Block(listElse); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ELSE_INS",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ELSE_INS ::= 
            {
              Block RESULT =null;
		 RESULT = new Block(new ArrayList<>()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ELSE_INS",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SWITCH_INS ::= SWITCH PARENTESIS_OPEN EXPRESSION PARENTESIS_CLOSE BRACKET_OPEN CASES_INS DEFAULT_CASE BRACKET_CLOSE 
            {
              Sentence RESULT =null;
		TokenValue s = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		List<Case_Ins> array = (List<Case_Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Default_Ins default_case = (Default_Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Switch_Ins(e, array, default_case, s.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SWITCH_INS",49, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CASES_INS ::= CASES_INS CASE PARENTESIS_OPEN LITERAL PARENTESIS_CLOSE COLON FUNCTION_BODY 
            {
              List<Case_Ins> RESULT =null;
		List<Case_Ins> array = (List<Case_Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		TokenValue c = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		Literal cond = (Literal)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 array.add(new Case_Ins(cond, body, c.row)) ; RESULT = array; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASES_INS",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CASES_INS ::= 
            {
              List<Case_Ins> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASES_INS",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DEFAULT_CASE ::= DEFAULT COLON FUNCTION_BODY BREAK SEMICOLON 
            {
              Default_Ins RESULT =null;
		TokenValue d = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue b = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 body.add_instruction(new Break_Ins(b.row)); RESULT = new Default_Ins(body, d.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEFAULT_CASE",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // WHILE_INS ::= WHILE PARENTESIS_OPEN EXPRESSION PARENTESIS_CLOSE BRACKET_OPEN FUNCTION_BODY BRACKET_CLOSE 
            {
              Sentence RESULT =null;
		TokenValue w = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new While_Ins(cond, body, w.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("WHILE_INS",50, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // WHILE_INS ::= WHILE error 
            {
              Sentence RESULT =null;
		TokenValue w = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Error_Ins(w.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("WHILE_INS",50, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BREAK_INS ::= BREAK SEMICOLON 
            {
              Sentence RESULT =null;
		TokenValue b = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Break_Ins(b.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BREAK_INS",51, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONTINUE_INS ::= CONTINUE SEMICOLON 
            {
              Sentence RESULT =null;
		TokenValue c = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Continue_Ins(c.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONTINUE_INS",52, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FOR_INS ::= FOR PARENTESIS_OPEN SENTENCE SEMICOLON EXPRESSION SEMICOLON SENTENCE PARENTESIS_CLOSE BRACKET_OPEN FUNCTION_BODY BRACKET_CLOSE 
            {
              Sentence RESULT =null;
		TokenValue f = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-10)).value;
		Sentence s1 = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).value;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		Sentence s2 = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 System.out.println("putamierdadepractica"); RESULT = new For_Ins(s1, cond, s2, body, f.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FOR_INS",53, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IO_INS ::= INPUT_INS 
            {
              Sentence RESULT =null;
		Sentence s = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = s; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IO_INS",54, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IO_INS ::= OUTPUT_INS 
            {
              Sentence RESULT =null;
		Sentence s = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = s; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IO_INS",54, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // INPUT_INS ::= INPUT_FUNC PARENTESIS_OPEN EXPRESSION PARENTESIS_CLOSE SEMICOLON 
            {
              Sentence RESULT =null;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Input_Ins(e, i.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INPUT_INS",55, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OUTPUT_INS ::= OUTPUT_FUNC PARENTESIS_OPEN EXPRESSION PARENTESIS_CLOSE SEMICOLON 
            {
              Sentence RESULT =null;
		TokenValue o = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Output_Ins(e, o.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OUTPUT_INS",56, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // MAIN_INS ::= FUNC_T MAIN PARENTESIS_OPEN PARENTESIS_CLOSE COLON INT_T BRACKET_OPEN FUNCTION_BODY RETURN INTEGER SEMICOLON BRACKET_CLOSE 
            {
              Function RESULT =null;
		TokenValue f = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-11)).value;
		TokenValue int_t = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Function("main", new ArrayList<>(), new Int_Type(int_t.row), body, new Int_Value(i.lexeme, i.row), f.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MAIN_INS",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESSION ::= B0 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e ; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPRESSION",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESSION ::= error 
            {
              Expression RESULT =null;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPRESSION",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // B0 ::= B1 LESS_OR_EQ_OP B1 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue l = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Less_Or_Eq_Op(iz, dc, l.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // B0 ::= error LESS_OR_EQ_OP B1 
            {
              Expression RESULT =null;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // B0 ::= B1 LESS_OR_EQ_OP error 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // B0 ::= B1 GREATER_OR_EQ_OP B1 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue g = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Greater_Or_Eq_Op(iz, dc, g.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // B0 ::= error GREATER_OR_EQ_OP B1 
            {
              Expression RESULT =null;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // B0 ::= B1 GREATER_OR_EQ_OP error 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // B0 ::= B1 LESS_OP B1 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue l = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Less_Op(iz, dc, l.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // B0 ::= error LESS_OP B1 
            {
              Expression RESULT =null;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // B0 ::= B1 LESS_OP error 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // B0 ::= B1 GREATER_OP B1 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue g = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Greater_Op(iz, dc, g.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // B0 ::= error GREATER_OP B1 
            {
              Expression RESULT =null;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // B0 ::= B1 GREATER_OP error 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // B0 ::= B1 EQUAL_OP B1 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue e = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Equal_Op(iz, dc, e.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // B0 ::= error EQUAL_OP B1 
            {
              Expression RESULT =null;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // B0 ::= B1 EQUAL_OP error 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // B0 ::= B1 NOT_EQUAL_OP B1 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue n = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Not_Equal_Op(iz, dc, n.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // B0 ::= error NOT_EQUAL_OP B1 
            {
              Expression RESULT =null;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // B0 ::= B1 NOT_EQUAL_OP error 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // B0 ::= B1 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // B1 ::= B1 OR_OP B2 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue o = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Or_Op(iz, dc, o.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B1",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // B1 ::= error OR_OP B2 
            {
              Expression RESULT =null;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B1",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // B1 ::= B1 OR_OP error 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B1",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // B1 ::= B2 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B1",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // B2 ::= B2 AND_OP B3 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new And_Op(iz, dc, a.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B2",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // B2 ::= error AND_OP B3 
            {
              Expression RESULT =null;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B2",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // B2 ::= B2 AND_OP error 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B2",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // B2 ::= B3 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B2",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // B3 ::= NOT_OP B4 
            {
              Expression RESULT =null;
		TokenValue n = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Not_Op(e, n.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B3",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // B3 ::= NOT_OP error 
            {
              Expression RESULT =null;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B3",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // B3 ::= B4 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B3",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // B4 ::= E0 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B4",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // E0 ::= E0 SUM_OP E1 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue s = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Sum_Op(iz, dc, s.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // E0 ::= error SUM_OP E1 
            {
              Expression RESULT =null;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E0 ::= E0 SUM_OP error 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E0 ::= E0 SUBS_OP E1 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue s = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Subs_Op(iz, dc, s.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E0 ::= error SUBS_OP E1 
            {
              Expression RESULT =null;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E0 ::= E0 SUBS_OP error 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // E0 ::= SUBS_OP E1 
            {
              Expression RESULT =null;
		TokenValue s = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Minus_Op(e, s.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // E0 ::= SUBS_OP error 
            {
              Expression RESULT =null;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // E0 ::= E1 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // E1 ::= E1 MULT_OP E2 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue m = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Mult_Op(iz, dc, m.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // E1 ::= error MULT_OP E2 
            {
              Expression RESULT =null;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // E1 ::= E1 MULT_OP error 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // E1 ::= E1 DIV_OP E2 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue d = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Div_Op(iz, dc, d.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // E1 ::= error DIV_OP E2 
            {
              Expression RESULT =null;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // E1 ::= E1 DIV_OP error 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // E1 ::= E1 MOD_OP E2 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue m = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Mod_Op(iz, dc, m.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // E1 ::= error MOD_OP E2 
            {
              Expression RESULT =null;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // E1 ::= E1 MOD_OP error 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // E1 ::= E2 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // E2 ::= E3 POW_OP E3 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue p = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Pow_Op(iz, dc, p.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // E2 ::= error POW_OP E3 
            {
              Expression RESULT =null;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // E2 ::= E3 POW_OP error 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // E2 ::= E3 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // E3 ::= POINTER_OP E4 
            {
              Expression RESULT =null;
		TokenValue p = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Pointer_Op(dc, p.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // E3 ::= POINTER_OP error 
            {
              Expression RESULT =null;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // E3 ::= REFERENCE_OP E4 
            {
              Expression RESULT =null;
		TokenValue r = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Reference_Op(dc, r.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // E3 ::= REFERENCE_OP error 
            {
              Expression RESULT =null;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // E3 ::= E4 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // E4 ::= E4 FIELD_ACCESS ID 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue f = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Field_Access_Op(iz, new AttributeID(id.lexeme, id.row), f.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // E4 ::= E4 FIELD_ACCESS ID_PARENTESIS 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue f = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		FunctionCall dc = (FunctionCall)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Field_Access_Op(iz, new MethodCall(dc, f.row), f.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // E4 ::= error FIELD_ACCESS E5 
            {
              Expression RESULT =null;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // E4 ::= E4 FIELD_ACCESS error 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // E4 ::= E5 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // E5 ::= E5 SQ_BRACKET_OPEN EXPRESSION SQ_BRACKET_CLOSE 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		TokenValue s = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Sq_Bracket_Op(iz, dc, s.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // E5 ::= error SQ_BRACKET_OPEN EXPRESSION SQ_BRACKET_CLOSE 
            {
              Expression RESULT =null;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // E5 ::= E6 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // E6 ::= PARENTESIS_OPEN EXPRESSION PARENTESIS_CLOSE 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // E6 ::= TERMINAL 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // EXPRESSIONS ::= MORE_EXPRESSIONS EXPRESSION 
            {
              List<Expression> RESULT =null;
		List<Expression> array = (List<Expression>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 array.add(e); RESULT = array; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPRESSIONS",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // EXPRESSIONS ::= 
            {
              List<Expression> RESULT =null;
		 RESULT = new ArrayList<Expression>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPRESSIONS",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // MORE_EXPRESSIONS ::= MORE_EXPRESSIONS EXPRESSION COMMA 
            {
              List<Expression> RESULT =null;
		List<Expression> array = (List<Expression>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 array.add(e); RESULT = array; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_EXPRESSIONS",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // MORE_EXPRESSIONS ::= 
            {
              List<Expression> RESULT =null;
		 RESULT = new ArrayList<Expression>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_EXPRESSIONS",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // TERMINAL ::= LITERAL 
            {
              Expression RESULT =null;
		Literal e = (Literal)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TERMINAL",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // TERMINAL ::= ID_EX 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TERMINAL",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // TYPE ::= INT_T 
            {
              Type RESULT =null;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Int_Type(i.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",59, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // TYPE ::= BOOLEAN_T 
            {
              Type RESULT =null;
		TokenValue b = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Bool_Type(b.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",59, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // TYPE ::= ID 
            {
              Type RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Defined_Type(id.lexeme, id.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",59, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // TYPE ::= TYPE POINTER_OP 
            {
              Type RESULT =null;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		TokenValue p = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Pointer_Type(t, p.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",59, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // OPT_INTEGER ::= LITERAL 
            {
              Expression RESULT =null;
		Literal e = (Literal)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPT_INTEGER",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // OPT_INTEGER ::= ID 
            {
              Expression RESULT =null;
		TokenValue e = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new VariableID(e.lexeme, e.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPT_INTEGER",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // OPT_INTEGER ::= 
            {
              Expression RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPT_INTEGER",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // SENTENCE ::= DECLARATION SEMICOLON 
            {
              Sentence RESULT =null;
		Declaration e = (Declaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // SENTENCE ::= ASSIGNATION_INS 
            {
              Sentence RESULT =null;
		Sentence e = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // SENTENCE ::= DECLARATION_AND_ASSIGNATION_INS 
            {
              Sentence RESULT =null;
		Sentence e = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // SENTENCE ::= IF_INS 
            {
              Sentence RESULT =null;
		Sentence e = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // SENTENCE ::= SWITCH_INS 
            {
              Sentence RESULT =null;
		Sentence e = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // SENTENCE ::= WHILE_INS 
            {
              Sentence RESULT =null;
		Sentence e = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // SENTENCE ::= FOR_INS 
            {
              Sentence RESULT =null;
		Sentence e = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // SENTENCE ::= BREAK_INS 
            {
              Sentence RESULT =null;
		Sentence e = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // SENTENCE ::= CONTINUE_INS 
            {
              Sentence RESULT =null;
		Sentence e = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // SENTENCE ::= IO_INS 
            {
              Sentence RESULT =null;
		Sentence e = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // SENTENCE ::= SEMICOLON 
            {
              Sentence RESULT =null;
		TokenValue s = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Empty_Ins(s.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // SENTENCE ::= EXPRESSION SEMICOLON 
            {
              Sentence RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		TokenValue s = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 System.out.println("putamierdadepractica"); RESULT = new Expression_Ins(e, s.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // ID_EX ::= ID 
            {
              Expression RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new VariableID(id.lexeme, id.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ID_EX",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // ID_EX ::= ID_PARENTESIS 
            {
              Expression RESULT =null;
		FunctionCall e = (FunctionCall)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e ; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ID_EX",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // ID_EX ::= THIS 
            {
              Expression RESULT =null;
		TokenValue t = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ThisID(t.row); ; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ID_EX",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // LITERAL ::= INTEGER 
            {
              Literal RESULT =null;
		TokenValue e = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Int_Value(e.lexeme, e.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LITERAL",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // LITERAL ::= TRUE 
            {
              Literal RESULT =null;
		TokenValue t = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Bool_Value(true, t.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LITERAL",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // LITERAL ::= FALSE 
            {
              Literal RESULT =null;
		TokenValue f = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Bool_Value(false, f.row); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LITERAL",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

