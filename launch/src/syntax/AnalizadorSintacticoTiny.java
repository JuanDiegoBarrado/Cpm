
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun Apr 07 13:12:10 CEST 2024
//----------------------------------------------------

package syntax;

import java_cup.runtime.*;
import lexicon.AnalizadorLexicoTiny;
import lexicon.LexiconUnit;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun Apr 07 13:12:10 CEST 2024
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\207\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\005\010\000\002\006\005\000\002\007\004\000\002" +
    "\007\002\000\002\010\011\000\002\012\005\000\002\012" +
    "\002\000\002\011\003\000\002\011\003\000\002\015\006" +
    "\000\002\015\002\000\002\013\011\000\002\014\005\000" +
    "\002\014\002\000\002\020\003\000\002\020\003\000\002" +
    "\021\017\000\002\022\014\000\002\024\004\000\002\024" +
    "\002\000\002\025\005\000\002\025\002\000\002\023\003" +
    "\000\002\026\004\000\002\026\002\000\002\027\003\000" +
    "\002\030\006\000\002\031\006\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\004\000\002\032" +
    "\006\000\002\016\005\000\002\017\006\000\002\017\002" +
    "\000\002\100\006\000\002\033\006\000\002\033\010\000" +
    "\002\033\007\000\002\034\006\000\002\034\010\000\002" +
    "\034\007\000\002\035\012\000\002\036\006\000\002\036" +
    "\002\000\002\037\012\000\002\040\011\000\002\040\002" +
    "\000\002\041\007\000\002\042\011\000\002\043\004\000" +
    "\002\044\004\000\002\045\015\000\002\046\003\000\002" +
    "\046\002\000\002\047\003\000\002\047\003\000\002\050" +
    "\007\000\002\051\007\000\002\052\016\000\002\053\003" +
    "\000\002\054\005\000\002\054\005\000\002\054\005\000" +
    "\002\054\005\000\002\054\005\000\002\054\005\000\002" +
    "\054\003\000\002\055\005\000\002\055\003\000\002\056" +
    "\005\000\002\056\003\000\002\057\004\000\002\057\003" +
    "\000\002\060\003\000\002\061\005\000\002\061\005\000" +
    "\002\061\004\000\002\061\003\000\002\062\005\000\002" +
    "\062\005\000\002\062\005\000\002\062\003\000\002\063" +
    "\005\000\002\063\003\000\002\064\004\000\002\064\003" +
    "\000\002\065\005\000\002\065\003\000\002\066\006\000" +
    "\002\066\003\000\002\067\005\000\002\067\003\000\002" +
    "\070\004\000\002\070\002\000\002\071\005\000\002\071" +
    "\002\000\002\072\003\000\002\072\003\000\002\073\004" +
    "\000\002\073\003\000\002\101\003\000\002\101\003\000" +
    "\002\101\003\000\002\101\004\000\002\074\003\000\002" +
    "\074\003\000\002\074\002\000\002\075\004\000\002\075" +
    "\003\000\002\075\003\000\002\075\003\000\002\075\003" +
    "\000\002\075\003\000\002\075\003\000\002\075\003\000" +
    "\002\075\003\000\002\075\003\000\002\075\003\000\002" +
    "\076\005\000\002\076\003\000\002\076\003\000\002\077" +
    "\003\000\002\077\003\000\002\077\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011a\000\014\042\ufffe\043\ufffe\045\ufffe\051\ufffe\052" +
    "\ufffe\001\002\000\004\002\u011c\001\002\000\014\042\020" +
    "\043\016\045\012\051\013\052\007\001\002\000\014\042" +
    "\ufffc\043\ufffc\045\ufffc\051\ufffc\052\ufffc\001\002\000\004" +
    "\005\u0119\001\002\000\022\020\uffea\042\uffea\043\uffea\045" +
    "\uffea\051\uffea\052\uffea\071\uffea\072\uffea\001\002\000\004" +
    "\002\001\001\002\000\006\005\063\073\u010e\001\002\000" +
    "\004\005\u0104\001\002\000\014\042\ufff9\043\ufff9\045\ufff9" +
    "\051\ufff9\052\ufff9\001\002\000\022\020\uffe9\042\uffe9\043" +
    "\uffe9\045\uffe9\051\uffe9\052\uffe9\071\uffe9\072\uffe9\001\002" +
    "\000\004\005\373\001\002\000\014\042\ufffb\043\ufffb\045" +
    "\ufffb\051\ufffb\052\ufffb\001\002\000\004\005\024\001\002" +
    "\000\014\042\ufffa\043\ufffa\045\ufffa\051\ufffa\052\ufffa\001" +
    "\002\000\014\042\uffff\043\uffff\045\uffff\051\uffff\052\uffff" +
    "\001\002\000\014\042\ufffd\043\ufffd\045\ufffd\051\ufffd\052" +
    "\ufffd\001\002\000\004\017\025\001\002\000\010\005\uffee" +
    "\071\uffee\072\uffee\001\002\000\010\005\027\071\033\072" +
    "\034\001\002\000\004\015\365\001\002\000\004\020\364" +
    "\001\002\000\012\005\ufff5\020\ufff5\071\ufff5\072\ufff5\001" +
    "\002\000\010\005\035\006\037\031\041\001\002\000\012" +
    "\005\ufff1\006\ufff1\031\ufff1\045\ufff1\001\002\000\012\005" +
    "\ufff0\006\ufff0\031\ufff0\045\ufff0\001\002\000\012\005\uff90" +
    "\017\uff90\046\uff90\047\uff90\001\002\000\016\005\uff93\017" +
    "\uff93\021\uff93\041\uff93\046\054\047\053\001\002\000\016" +
    "\005\uff92\017\uff92\021\uff92\041\uff92\046\uff92\047\uff92\001" +
    "\002\000\004\041\052\001\002\000\016\005\uff91\017\uff91" +
    "\021\uff91\041\uff91\046\uff91\047\uff91\001\002\000\004\005" +
    "\043\001\002\000\014\016\uffd5\021\uffd5\037\uffd5\041\uffd5" +
    "\053\uffd5\001\002\000\014\016\uffd7\021\045\037\uffd7\041" +
    "\uffd7\053\uffd7\001\002\000\010\004\047\005\046\022\uff8c" +
    "\001\002\000\004\022\uff8d\001\002\000\004\022\uff8e\001" +
    "\002\000\004\022\051\001\002\000\014\016\uffd6\021\uffd6" +
    "\037\uffd6\041\uffd6\053\uffd6\001\002\000\010\005\uffef\071" +
    "\uffef\072\uffef\001\002\000\012\005\uff94\017\uff94\021\uff94" +
    "\041\uff94\001\002\000\016\005\uff8f\017\uff8f\021\uff8f\041" +
    "\uff8f\046\uff8f\047\uff8f\001\002\000\012\005\027\020\ufff2" +
    "\071\ufff2\072\ufff2\001\002\000\012\005\ufff6\020\ufff6\071" +
    "\ufff6\072\ufff6\001\002\000\010\020\ufff7\071\033\072\034" +
    "\001\002\000\004\045\062\001\002\000\010\020\ufff3\071" +
    "\ufff3\072\ufff3\001\002\000\004\005\063\001\002\000\004" +
    "\015\064\001\002\000\012\005\uffe3\006\uffe3\016\uffe5\031" +
    "\uffe3\001\002\000\004\016\072\001\002\000\010\005\035" +
    "\006\037\031\041\001\002\000\006\016\uffe6\037\071\001" +
    "\002\000\006\016\uffe2\037\uffe2\001\002\000\010\005\uffe4" +
    "\006\uffe4\031\uffe4\001\002\000\006\017\073\040\074\001" +
    "\002\000\054\004\uffe0\005\uffe0\006\uffe0\010\uffe0\015\uffe0" +
    "\031\uffe0\034\uffe0\035\uffe0\036\uffe0\041\uffe0\046\uffe0\054" +
    "\uffe0\056\uffe0\060\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0" +
    "\066\uffe0\067\uffe0\070\uffe0\001\002\000\010\005\035\006" +
    "\037\031\041\001\002\000\004\017\076\001\002\000\054" +
    "\004\uffe0\005\uffe0\006\uffe0\010\uffe0\015\uffe0\031\uffe0\034" +
    "\uffe0\035\uffe0\036\uffe0\041\uffe0\046\uffe0\054\uffe0\056\uffe0" +
    "\060\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\067" +
    "\uffe0\070\uffe0\001\002\000\054\004\101\005\115\006\037" +
    "\010\114\015\104\031\041\034\123\035\125\036\141\041" +
    "\107\046\132\054\111\056\131\060\126\062\137\063\105" +
    "\064\102\065\146\066\120\067\122\070\113\001\002\000" +
    "\062\004\uff8a\005\uff8a\006\uff8a\010\uff8a\015\uff8a\020\uff8a" +
    "\031\uff8a\034\uff8a\035\uff8a\036\uff8a\041\uff8a\046\uff8a\054" +
    "\uff8a\056\uff8a\057\uff8a\060\uff8a\061\uff8a\062\uff8a\063\uff8a" +
    "\064\uff8a\065\uff8a\066\uff8a\067\uff8a\070\uff8a\001\002\000" +
    "\054\007\uff7d\010\uff7d\011\uff7d\012\uff7d\013\uff7d\014\uff7d" +
    "\016\uff7d\021\uff7d\022\uff7d\023\uff7d\024\uff7d\025\uff7d\026" +
    "\uff7d\027\uff7d\030\uff7d\032\uff7d\033\uff7d\037\uff7d\041\uff7d" +
    "\044\uff7d\053\uff7d\001\002\000\004\041\357\001\002\000" +
    "\004\053\346\001\002\000\024\004\101\005\163\010\114" +
    "\015\104\034\123\035\125\036\141\046\132\070\113\001" +
    "\002\000\004\015\331\001\002\000\062\004\uff82\005\uff82" +
    "\006\uff82\010\uff82\015\uff82\020\uff82\031\uff82\034\uff82\035" +
    "\uff82\036\uff82\041\uff82\046\uff82\054\uff82\056\uff82\057\uff82" +
    "\060\uff82\061\uff82\062\uff82\063\uff82\064\uff82\065\uff82\066" +
    "\uff82\067\uff82\070\uff82\001\002\000\062\004\uff81\005\uff81" +
    "\006\uff81\010\uff81\015\uff81\020\uff81\031\uff81\034\uff81\035" +
    "\uff81\036\uff81\041\uff81\046\uff81\054\uff81\056\uff81\057\uff81" +
    "\060\uff81\061\uff81\062\uff81\063\uff81\064\uff81\065\uff81\066" +
    "\uff81\067\uff81\070\uff81\001\002\000\062\004\uff87\005\uff87" +
    "\006\uff87\010\uff87\015\uff87\020\uff87\031\uff87\034\uff87\035" +
    "\uff87\036\uff87\041\uff87\046\uff87\054\uff87\056\uff87\057\uff87" +
    "\060\uff87\061\uff87\062\uff87\063\uff87\064\uff87\065\uff87\066" +
    "\uff87\067\uff87\070\uff87\001\002\000\004\015\316\001\002" +
    "\000\062\004\uff86\005\uff86\006\uff86\010\uff86\015\uff86\020" +
    "\uff86\031\uff86\034\uff86\035\uff86\036\uff86\041\uff86\046\uff86" +
    "\054\uff86\056\uff86\057\uff86\060\uff86\061\uff86\062\uff86\063" +
    "\uff86\064\uff86\065\uff86\066\uff86\067\uff86\070\uff86\001\002" +
    "\000\004\044\314\001\002\000\020\004\101\005\163\015" +
    "\104\035\125\036\141\046\132\070\113\001\002\000\054" +
    "\005\uff90\007\uff7f\010\uff7f\011\uff7f\012\uff7f\013\uff7f\014" +
    "\uff7f\015\173\021\uff7f\023\uff7f\024\uff7f\025\uff7f\026\uff7f" +
    "\027\uff7f\030\uff7f\032\uff7f\033\uff7f\044\uff7f\046\uff90\047" +
    "\uff90\053\uff7f\001\002\000\054\007\uff7e\010\uff7e\011\uff7e" +
    "\012\uff7e\013\uff7e\014\uff7e\016\uff7e\021\uff7e\022\uff7e\023" +
    "\uff7e\024\uff7e\025\uff7e\026\uff7e\027\uff7e\030\uff7e\032\uff7e" +
    "\033\uff7e\037\uff7e\041\uff7e\044\uff7e\053\uff7e\001\002\000" +
    "\062\004\uffbf\005\uffbf\006\uffbf\010\uffbf\015\uffbf\020\uffbf" +
    "\031\uffbf\034\uffbf\035\uffbf\036\uffbf\041\uffbf\046\uffbf\054" +
    "\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf" +
    "\064\uffbf\065\uffbf\066\uffbf\067\uffbf\070\uffbf\001\002\000" +
    "\004\015\307\001\002\000\054\007\uff95\010\uff95\011\uff95" +
    "\012\uff95\013\uff95\014\uff95\016\uff95\021\uff95\022\uff95\023" +
    "\uff95\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95\032\uff95" +
    "\033\uff95\037\uff95\041\uff95\044\uff95\053\uff95\001\002\000" +
    "\024\004\101\005\163\010\114\015\104\034\123\035\125" +
    "\036\141\046\132\070\113\001\002\000\022\004\101\005" +
    "\163\010\114\015\104\035\125\036\141\046\132\070\113" +
    "\001\002\000\062\004\uffc0\005\uffc0\006\uffc0\010\uffc0\015" +
    "\uffc0\020\uffc0\031\uffc0\034\uffc0\035\uffc0\036\uffc0\041\uffc0" +
    "\046\uffc0\054\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0\062" +
    "\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0\070\uffc0" +
    "\001\002\000\054\007\uff7c\010\uff7c\011\uff7c\012\uff7c\013" +
    "\uff7c\014\uff7c\016\uff7c\021\uff7c\022\uff7c\023\uff7c\024\uff7c" +
    "\025\uff7c\026\uff7c\027\uff7c\030\uff7c\032\uff7c\033\uff7c\037" +
    "\uff7c\041\uff7c\044\uff7c\053\uff7c\001\002\000\004\041\301" +
    "\001\002\000\062\004\uffe1\005\uffe1\006\uffe1\010\uffe1\015" +
    "\uffe1\020\uffe1\031\uffe1\034\uffe1\035\uffe1\036\uffe1\041\uffe1" +
    "\046\uffe1\054\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062" +
    "\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1\067\uffe1\070\uffe1" +
    "\001\002\000\006\041\266\053\267\001\002\000\004\015" +
    "\244\001\002\000\016\004\101\005\163\015\104\035\125" +
    "\036\141\070\113\001\002\000\062\004\uff83\005\uff83\006" +
    "\uff83\010\uff83\015\uff83\020\uff83\031\uff83\034\uff83\035\uff83" +
    "\036\uff83\041\uff83\046\uff83\054\uff83\056\uff83\057\uff83\060" +
    "\uff83\061\uff83\062\uff83\063\uff83\064\uff83\065\uff83\066\uff83" +
    "\067\uff83\070\uff83\001\002\000\054\007\uff96\010\uff96\011" +
    "\uff96\012\uff96\013\uff96\014\uff96\016\uff96\021\uff96\022\uff96" +
    "\023\uff96\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96\032" +
    "\uff96\033\uff96\037\uff96\041\uff96\044\uff96\053\uff96\001\002" +
    "\000\062\004\uff85\005\uff85\006\uff85\010\uff85\015\uff85\020" +
    "\uff85\031\uff85\034\uff85\035\uff85\036\uff85\041\uff85\046\uff85" +
    "\054\uff85\056\uff85\057\uff85\060\uff85\061\uff85\062\uff85\063" +
    "\uff85\064\uff85\065\uff85\066\uff85\067\uff85\070\uff85\001\002" +
    "\000\062\004\uff88\005\uff88\006\uff88\010\uff88\015\uff88\020" +
    "\uff88\031\uff88\034\uff88\035\uff88\036\uff88\041\uff88\046\uff88" +
    "\054\uff88\056\uff88\057\uff88\060\uff88\061\uff88\062\uff88\063" +
    "\uff88\064\uff88\065\uff88\066\uff88\067\uff88\070\uff88\001\002" +
    "\000\004\015\235\001\002\000\054\007\uff9b\010\uff9b\011" +
    "\uff9b\012\uff9b\013\uff9b\014\uff9b\016\uff9b\021\uff9b\022\uff9b" +
    "\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\032" +
    "\uff9b\033\uff9b\037\uff9b\041\uff9b\044\uff9b\053\uff9b\001\002" +
    "\000\054\007\uff7b\010\uff7b\011\uff7b\012\uff7b\013\uff7b\014" +
    "\uff7b\016\uff7b\021\uff7b\022\uff7b\023\uff7b\024\uff7b\025\uff7b" +
    "\026\uff7b\027\uff7b\030\uff7b\032\uff7b\033\uff7b\037\uff7b\041" +
    "\uff7b\044\uff7b\053\uff7b\001\002\000\034\016\uffae\022\uffae" +
    "\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae\032" +
    "\uffae\033\uffae\037\uffae\041\uffae\053\uffae\001\002\000\054" +
    "\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d\016" +
    "\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d" +
    "\027\uff9d\030\uff9d\032\uff9d\033\uff9d\037\uff9d\041\uff9d\044" +
    "\uff9d\053\uff9d\001\002\000\034\016\uffb0\022\uffb0\023\uffb0" +
    "\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\032\uffb0\033" +
    "\uffb0\037\uffb0\041\uffb0\053\uffb0\001\002\000\054\007\uff9f" +
    "\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f\016\uff9f\021" +
    "\231\022\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f" +
    "\030\uff9f\032\uff9f\033\uff9f\037\uff9f\041\uff9f\044\230\053" +
    "\uff9f\001\002\000\004\015\224\001\002\000\034\016\uffb2" +
    "\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030" +
    "\uffb2\032\217\033\uffb2\037\uffb2\041\uffb2\053\uffb2\001\002" +
    "\000\050\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\014" +
    "\uffa1\016\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1" +
    "\027\uffa1\030\uffa1\032\uffa1\033\uffa1\037\uffa1\041\uffa1\053" +
    "\uffa1\001\002\000\050\007\uffa3\010\uffa3\011\uffa3\012\uffa3" +
    "\013\uffa3\014\222\016\uffa3\022\uffa3\023\uffa3\024\uffa3\025" +
    "\uffa3\026\uffa3\027\uffa3\030\uffa3\032\uffa3\033\uffa3\037\uffa3" +
    "\041\uffa3\053\uffa3\001\002\000\032\016\uffb4\022\uffb4\023" +
    "\204\024\207\025\202\026\206\027\210\030\205\033\203" +
    "\037\uffb4\041\uffb4\053\uffb4\001\002\000\062\004\uff84\005" +
    "\uff84\006\uff84\010\uff84\015\uff84\020\uff84\031\uff84\034\uff84" +
    "\035\uff84\036\uff84\041\uff84\046\uff84\054\uff84\056\uff84\057" +
    "\uff84\060\uff84\061\uff84\062\uff84\063\uff84\064\uff84\065\uff84" +
    "\066\uff84\067\uff84\070\uff84\001\002\000\014\016\uffbb\022" +
    "\uffbb\037\uffbb\041\uffbb\053\uffbb\001\002\000\046\007\uffa5" +
    "\010\uffa5\011\uffa5\012\uffa5\013\uffa5\016\uffa5\022\uffa5\023" +
    "\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\032\uffa5" +
    "\033\uffa5\037\uffa5\041\uffa5\053\uffa5\001\002\000\046\007" +
    "\uffa9\010\uffa9\011\165\012\167\013\166\016\uffa9\022\uffa9" +
    "\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\032" +
    "\uffa9\033\uffa9\037\uffa9\041\uffa9\053\uffa9\001\002\000\040" +
    "\007\161\010\162\016\uffad\022\uffad\023\uffad\024\uffad\025" +
    "\uffad\026\uffad\027\uffad\030\uffad\032\uffad\033\uffad\037\uffad" +
    "\041\uffad\053\uffad\001\002\000\062\004\uff89\005\uff89\006" +
    "\uff89\010\uff89\015\uff89\020\uff89\031\uff89\034\uff89\035\uff89" +
    "\036\uff89\041\uff89\046\uff89\054\uff89\056\uff89\057\uff89\060" +
    "\uff89\061\uff89\062\uff89\063\uff89\064\uff89\065\uff89\066\uff89" +
    "\067\uff89\070\uff89\001\002\000\020\004\101\005\163\015" +
    "\104\035\125\036\141\046\132\070\113\001\002\000\020" +
    "\004\101\005\163\015\104\035\125\036\141\046\132\070" +
    "\113\001\002\000\056\007\uff7f\010\uff7f\011\uff7f\012\uff7f" +
    "\013\uff7f\014\uff7f\015\173\016\uff7f\021\uff7f\022\uff7f\023" +
    "\uff7f\024\uff7f\025\uff7f\026\uff7f\027\uff7f\030\uff7f\032\uff7f" +
    "\033\uff7f\037\uff7f\041\uff7f\044\uff7f\053\uff7f\001\002\000" +
    "\046\007\uffab\010\uffab\011\165\012\167\013\166\016\uffab" +
    "\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030" +
    "\uffab\032\uffab\033\uffab\037\uffab\041\uffab\053\uffab\001\002" +
    "\000\020\004\101\005\163\015\104\035\125\036\141\046" +
    "\132\070\113\001\002\000\020\004\101\005\163\015\104" +
    "\035\125\036\141\046\132\070\113\001\002\000\020\004" +
    "\101\005\163\015\104\035\125\036\141\046\132\070\113" +
    "\001\002\000\046\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013" +
    "\uffa7\016\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7" +
    "\027\uffa7\030\uffa7\032\uffa7\033\uffa7\037\uffa7\041\uffa7\053" +
    "\uffa7\001\002\000\046\007\uffa6\010\uffa6\011\uffa6\012\uffa6" +
    "\013\uffa6\016\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026" +
    "\uffa6\027\uffa6\030\uffa6\032\uffa6\033\uffa6\037\uffa6\041\uffa6" +
    "\053\uffa6\001\002\000\046\007\uffa8\010\uffa8\011\uffa8\012" +
    "\uffa8\013\uffa8\016\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8" +
    "\026\uffa8\027\uffa8\030\uffa8\032\uffa8\033\uffa8\037\uffa8\041" +
    "\uffa8\053\uffa8\001\002\000\026\004\uff97\005\uff97\010\uff97" +
    "\015\uff97\016\uff99\034\uff97\035\uff97\036\uff97\046\uff97\070" +
    "\uff97\001\002\000\004\016\200\001\002\000\024\004\101" +
    "\005\163\010\114\015\104\034\123\035\125\036\141\046" +
    "\132\070\113\001\002\000\006\016\uff9a\037\177\001\002" +
    "\000\024\004\uff98\005\uff98\010\uff98\015\uff98\034\uff98\035" +
    "\uff98\036\uff98\046\uff98\070\uff98\001\002\000\054\007\uffd4" +
    "\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\016\uffd4\021" +
    "\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4" +
    "\030\uffd4\032\uffd4\033\uffd4\037\uffd4\041\uffd4\044\uffd4\053" +
    "\uffd4\001\002\000\046\007\uffac\010\uffac\011\165\012\167" +
    "\013\166\016\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026" +
    "\uffac\027\uffac\030\uffac\032\uffac\033\uffac\037\uffac\041\uffac" +
    "\053\uffac\001\002\000\024\004\101\005\163\010\114\015" +
    "\104\034\123\035\125\036\141\046\132\070\113\001\002" +
    "\000\024\004\101\005\163\010\114\015\104\034\123\035" +
    "\125\036\141\046\132\070\113\001\002\000\024\004\101" +
    "\005\163\010\114\015\104\034\123\035\125\036\141\046" +
    "\132\070\113\001\002\000\024\004\101\005\163\010\114" +
    "\015\104\034\123\035\125\036\141\046\132\070\113\001" +
    "\002\000\024\004\101\005\163\010\114\015\104\034\123" +
    "\035\125\036\141\046\132\070\113\001\002\000\024\004" +
    "\101\005\163\010\114\015\104\034\123\035\125\036\141" +
    "\046\132\070\113\001\002\000\024\004\101\005\163\010" +
    "\114\015\104\034\123\035\125\036\141\046\132\070\113" +
    "\001\002\000\016\016\uffb9\022\uffb9\033\203\037\uffb9\041" +
    "\uffb9\053\uffb9\001\002\000\016\016\uffb7\022\uffb7\033\203" +
    "\037\uffb7\041\uffb7\053\uffb7\001\002\000\016\016\uffba\022" +
    "\uffba\033\203\037\uffba\041\uffba\053\uffba\001\002\000\016" +
    "\016\uffb5\022\uffb5\033\203\037\uffb5\041\uffb5\053\uffb5\001" +
    "\002\000\016\016\uffb8\022\uffb8\033\203\037\uffb8\041\uffb8" +
    "\053\uffb8\001\002\000\034\016\uffb3\022\uffb3\023\uffb3\024" +
    "\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\032\217\033\uffb3" +
    "\037\uffb3\041\uffb3\053\uffb3\001\002\000\024\004\101\005" +
    "\163\010\114\015\104\034\123\035\125\036\141\046\132" +
    "\070\113\001\002\000\034\016\uffb1\022\uffb1\023\uffb1\024" +
    "\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\032\uffb1\033\uffb1" +
    "\037\uffb1\041\uffb1\053\uffb1\001\002\000\016\016\uffb6\022" +
    "\uffb6\033\203\037\uffb6\041\uffb6\053\uffb6\001\002\000\020" +
    "\004\101\005\163\015\104\035\125\036\141\046\132\070" +
    "\113\001\002\000\046\007\uffa4\010\uffa4\011\uffa4\012\uffa4" +
    "\013\uffa4\016\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026" +
    "\uffa4\027\uffa4\030\uffa4\032\uffa4\033\uffa4\037\uffa4\041\uffa4" +
    "\053\uffa4\001\002\000\024\004\101\005\163\010\114\015" +
    "\104\034\123\035\125\036\141\046\132\070\113\001\002" +
    "\000\004\016\226\001\002\000\004\041\227\001\002\000" +
    "\062\004\uffbe\005\uffbe\006\uffbe\010\uffbe\015\uffbe\020\uffbe" +
    "\031\uffbe\034\uffbe\035\uffbe\036\uffbe\041\uffbe\046\uffbe\054" +
    "\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe" +
    "\064\uffbe\065\uffbe\066\uffbe\067\uffbe\070\uffbe\001\002\000" +
    "\016\004\101\005\163\015\104\035\125\036\141\070\113" +
    "\001\002\000\024\004\101\005\163\010\114\015\104\034" +
    "\123\035\125\036\141\046\132\070\113\001\002\000\004" +
    "\022\233\001\002\000\054\007\uff9e\010\uff9e\011\uff9e\012" +
    "\uff9e\013\uff9e\014\uff9e\016\uff9e\021\uff9e\022\uff9e\023\uff9e" +
    "\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\032\uff9e\033" +
    "\uff9e\037\uff9e\041\uff9e\044\uff9e\053\uff9e\001\002\000\052" +
    "\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\016" +
    "\uffa0\021\231\022\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0" +
    "\027\uffa0\030\uffa0\032\uffa0\033\uffa0\037\uffa0\041\uffa0\053" +
    "\uffa0\001\002\000\024\004\101\005\163\010\114\015\104" +
    "\034\123\035\125\036\141\046\132\070\113\001\002\000" +
    "\004\016\237\001\002\000\004\017\240\001\002\000\054" +
    "\004\uffe0\005\uffe0\006\uffe0\010\uffe0\015\uffe0\020\uffe0\031" +
    "\uffe0\034\uffe0\035\uffe0\036\uffe0\041\uffe0\046\uffe0\054\uffe0" +
    "\056\uffe0\060\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0\066" +
    "\uffe0\070\uffe0\001\002\000\054\004\101\005\115\006\037" +
    "\010\114\015\104\020\242\031\041\034\123\035\125\036" +
    "\141\041\107\046\132\054\111\056\131\060\126\062\137" +
    "\063\105\064\102\065\146\066\120\070\113\001\002\000" +
    "\062\004\uffc6\005\uffc6\006\uffc6\010\uffc6\015\uffc6\020\uffc6" +
    "\031\uffc6\034\uffc6\035\uffc6\036\uffc6\041\uffc6\046\uffc6\054" +
    "\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6" +
    "\064\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6\001\002\000" +
    "\050\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2" +
    "\016\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027" +
    "\uffa2\030\uffa2\032\uffa2\033\uffa2\037\uffa2\041\uffa2\053\uffa2" +
    "\001\002\000\024\004\101\005\163\010\114\015\104\034" +
    "\123\035\125\036\141\046\132\070\113\001\002\000\004" +
    "\016\246\001\002\000\004\017\247\001\002\000\006\057" +
    "\uffc8\061\uffc8\001\002\000\006\057\253\061\251\001\002" +
    "\000\004\040\262\001\002\000\004\020\261\001\002\000" +
    "\004\015\254\001\002\000\010\004\101\035\125\036\141" +
    "\001\002\000\004\016\256\001\002\000\004\040\257\001" +
    "\002\000\056\004\uffe0\005\uffe0\006\uffe0\010\uffe0\015\uffe0" +
    "\031\uffe0\034\uffe0\035\uffe0\036\uffe0\041\uffe0\046\uffe0\054" +
    "\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0" +
    "\064\uffe0\065\uffe0\066\uffe0\070\uffe0\001\002\000\056\004" +
    "\101\005\115\006\037\010\114\015\104\031\041\034\123" +
    "\035\125\036\141\041\107\046\132\054\111\056\131\057" +
    "\uffc9\060\126\061\uffc9\062\137\063\105\064\102\065\146" +
    "\066\120\070\113\001\002\000\062\004\uffca\005\uffca\006" +
    "\uffca\010\uffca\015\uffca\020\uffca\031\uffca\034\uffca\035\uffca" +
    "\036\uffca\041\uffca\046\uffca\054\uffca\056\uffca\057\uffca\060" +
    "\uffca\061\uffca\062\uffca\063\uffca\064\uffca\065\uffca\066\uffca" +
    "\067\uffca\070\uffca\001\002\000\052\004\uffe0\005\uffe0\006" +
    "\uffe0\010\uffe0\015\uffe0\031\uffe0\034\uffe0\035\uffe0\036\uffe0" +
    "\041\uffe0\046\uffe0\054\uffe0\056\uffe0\060\uffe0\062\uffe0\063" +
    "\uffe0\064\uffe0\065\uffe0\066\uffe0\070\uffe0\001\002\000\052" +
    "\004\101\005\115\006\037\010\114\015\104\031\041\034" +
    "\123\035\125\036\141\041\107\046\132\054\111\056\131" +
    "\060\264\062\137\063\105\064\102\065\146\066\120\070" +
    "\113\001\002\000\004\041\265\001\002\000\054\004\uffc5" +
    "\005\uffc5\006\uffc5\010\uffc5\015\uffc5\020\uffc7\031\uffc5\034" +
    "\uffc5\035\uffc5\036\uffc5\041\uffc5\046\uffc5\054\uffc5\056\uffc5" +
    "\060\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5\070" +
    "\uffc5\001\002\000\062\004\uff8b\005\uff8b\006\uff8b\010\uff8b" +
    "\015\uff8b\020\uff8b\031\uff8b\034\uff8b\035\uff8b\036\uff8b\041" +
    "\uff8b\046\uff8b\054\uff8b\056\uff8b\057\uff8b\060\uff8b\061\uff8b" +
    "\062\uff8b\063\uff8b\064\uff8b\065\uff8b\066\uff8b\067\uff8b\070" +
    "\uff8b\001\002\000\026\004\101\005\163\010\114\015\104" +
    "\034\123\035\125\036\141\046\132\050\270\070\113\001" +
    "\002\000\010\005\273\006\037\031\041\001\002\000\004" +
    "\041\272\001\002\000\062\004\uffd3\005\uffd3\006\uffd3\010" +
    "\uffd3\015\uffd3\020\uffd3\031\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\041\uffd3\046\uffd3\054\uffd3\056\uffd3\057\uffd3\060\uffd3\061" +
    "\uffd3\062\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3" +
    "\070\uffd3\001\002\000\014\015\173\021\uff90\041\uff90\046" +
    "\uff90\047\uff90\001\002\000\004\041\300\001\002\000\006" +
    "\021\uffd5\041\uffd5\001\002\000\006\021\045\041\277\001" +
    "\002\000\062\004\uffd2\005\uffd2\006\uffd2\010\uffd2\015\uffd2" +
    "\020\uffd2\031\uffd2\034\uffd2\035\uffd2\036\uffd2\041\uffd2\046" +
    "\uffd2\054\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2" +
    "\063\uffd2\064\uffd2\065\uffd2\066\uffd2\067\uffd2\070\uffd2\001" +
    "\002\000\062\004\uffd1\005\uffd1\006\uffd1\010\uffd1\015\uffd1" +
    "\020\uffd1\031\uffd1\034\uffd1\035\uffd1\036\uffd1\041\uffd1\046" +
    "\uffd1\054\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1" +
    "\063\uffd1\064\uffd1\065\uffd1\066\uffd1\067\uffd1\070\uffd1\001" +
    "\002\000\062\004\uffc5\005\uffc5\006\uffc5\010\uffc5\015\uffc5" +
    "\020\uffc5\031\uffc5\034\uffc5\035\uffc5\036\uffc5\041\uffc5\046" +
    "\uffc5\054\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5" +
    "\063\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\001" +
    "\002\000\034\016\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf" +
    "\026\uffaf\027\uffaf\030\uffaf\032\uffaf\033\uffaf\037\uffaf\041" +
    "\uffaf\053\uffaf\001\002\000\004\041\uffdf\001\002\000\004" +
    "\041\305\001\002\000\004\020\306\001\002\000\022\020" +
    "\uffe8\042\uffe8\043\uffe8\045\uffe8\051\uffe8\052\uffe8\071\uffe8" +
    "\072\uffe8\001\002\000\024\004\101\005\163\010\114\015" +
    "\104\034\123\035\125\036\141\046\132\070\113\001\002" +
    "\000\004\016\311\001\002\000\004\041\312\001\002\000" +
    "\062\004\uffbd\005\uffbd\006\uffbd\010\uffbd\015\uffbd\020\uffbd" +
    "\031\uffbd\034\uffbd\035\uffbd\036\uffbd\041\uffbd\046\uffbd\054" +
    "\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd" +
    "\064\uffbd\065\uffbd\066\uffbd\067\uffbd\070\uffbd\001\002\000" +
    "\046\007\uffaa\010\uffaa\011\165\012\167\013\166\016\uffaa" +
    "\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030" +
    "\uffaa\032\uffaa\033\uffaa\037\uffaa\041\uffaa\053\uffaa\001\002" +
    "\000\004\005\315\001\002\000\054\007\uff80\010\uff80\011" +
    "\uff80\012\uff80\013\uff80\014\uff80\016\uff80\021\uff80\022\uff80" +
    "\023\uff80\024\uff80\025\uff80\026\uff80\027\uff80\030\uff80\032" +
    "\uff80\033\uff80\037\uff80\041\uff80\044\uff80\053\uff80\001\002" +
    "\000\024\004\101\005\163\010\114\015\104\034\123\035" +
    "\125\036\141\046\132\070\113\001\002\000\004\016\320" +
    "\001\002\000\004\017\321\001\002\000\054\004\uffe0\005" +
    "\uffe0\006\uffe0\010\uffe0\015\uffe0\020\uffe0\031\uffe0\034\uffe0" +
    "\035\uffe0\036\uffe0\041\uffe0\046\uffe0\054\uffe0\056\uffe0\060" +
    "\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\070\uffe0" +
    "\001\002\000\054\004\101\005\115\006\037\010\114\015" +
    "\104\020\323\031\041\034\123\035\125\036\141\041\107" +
    "\046\132\054\111\056\131\060\126\062\137\063\105\064" +
    "\102\065\146\066\120\070\113\001\002\000\064\004\uffcb" +
    "\005\uffcb\006\uffcb\010\uffcb\015\uffcb\020\uffcb\031\uffcb\034" +
    "\uffcb\035\uffcb\036\uffcb\041\uffcb\046\uffcb\054\uffcb\055\324" +
    "\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064" +
    "\uffcb\065\uffcb\066\uffcb\067\uffcb\070\uffcb\001\002\000\004" +
    "\017\326\001\002\000\062\004\uffcd\005\uffcd\006\uffcd\010" +
    "\uffcd\015\uffcd\020\uffcd\031\uffcd\034\uffcd\035\uffcd\036\uffcd" +
    "\041\uffcd\046\uffcd\054\uffcd\056\uffcd\057\uffcd\060\uffcd\061" +
    "\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\067\uffcd" +
    "\070\uffcd\001\002\000\054\004\uffe0\005\uffe0\006\uffe0\010" +
    "\uffe0\015\uffe0\020\uffe0\031\uffe0\034\uffe0\035\uffe0\036\uffe0" +
    "\041\uffe0\046\uffe0\054\uffe0\056\uffe0\060\uffe0\062\uffe0\063" +
    "\uffe0\064\uffe0\065\uffe0\066\uffe0\070\uffe0\001\002\000\054" +
    "\004\101\005\115\006\037\010\114\015\104\020\330\031" +
    "\041\034\123\035\125\036\141\041\107\046\132\054\111" +
    "\056\131\060\126\062\137\063\105\064\102\065\146\066" +
    "\120\070\113\001\002\000\062\004\uffcc\005\uffcc\006\uffcc" +
    "\010\uffcc\015\uffcc\020\uffcc\031\uffcc\034\uffcc\035\uffcc\036" +
    "\uffcc\041\uffcc\046\uffcc\054\uffcc\056\uffcc\057\uffcc\060\uffcc" +
    "\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc\067" +
    "\uffcc\070\uffcc\001\002\000\026\004\101\005\163\010\114" +
    "\015\104\034\123\035\125\036\141\041\uffc1\046\132\070" +
    "\113\001\002\000\006\016\uffc2\041\uffc2\001\002\000\004" +
    "\041\334\001\002\000\024\004\101\005\163\010\114\015" +
    "\104\034\123\035\125\036\141\046\132\070\113\001\002" +
    "\000\004\041\336\001\002\000\026\004\101\005\163\010" +
    "\114\015\104\016\uffc1\034\123\035\125\036\141\046\132" +
    "\070\113\001\002\000\004\016\340\001\002\000\004\017" +
    "\341\001\002\000\054\004\uffe0\005\uffe0\006\uffe0\010\uffe0" +
    "\015\uffe0\020\uffe0\031\uffe0\034\uffe0\035\uffe0\036\uffe0\041" +
    "\uffe0\046\uffe0\054\uffe0\056\uffe0\060\uffe0\062\uffe0\063\uffe0" +
    "\064\uffe0\065\uffe0\066\uffe0\070\uffe0\001\002\000\054\004" +
    "\101\005\115\006\037\010\114\015\104\020\343\031\041" +
    "\034\123\035\125\036\141\041\107\046\132\054\111\056" +
    "\131\060\126\062\137\063\105\064\102\065\146\066\120" +
    "\070\113\001\002\000\062\004\uffc3\005\uffc3\006\uffc3\010" +
    "\uffc3\015\uffc3\020\uffc3\031\uffc3\034\uffc3\035\uffc3\036\uffc3" +
    "\041\uffc3\046\uffc3\054\uffc3\056\uffc3\057\uffc3\060\uffc3\061" +
    "\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3" +
    "\070\uffc3\001\002\000\004\016\345\001\002\000\054\007" +
    "\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c\014\uff9c\016\uff9c" +
    "\021\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027" +
    "\uff9c\030\uff9c\032\uff9c\033\uff9c\037\uff9c\041\uff9c\044\uff9c" +
    "\053\uff9c\001\002\000\026\004\101\005\163\010\114\015" +
    "\104\034\123\035\125\036\141\046\132\050\350\070\113" +
    "\001\002\000\004\041\356\001\002\000\010\005\273\006" +
    "\037\031\041\001\002\000\004\041\355\001\002\000\006" +
    "\021\uffd5\041\uffd5\001\002\000\006\021\045\041\354\001" +
    "\002\000\062\004\uffcf\005\uffcf\006\uffcf\010\uffcf\015\uffcf" +
    "\020\uffcf\031\uffcf\034\uffcf\035\uffcf\036\uffcf\041\uffcf\046" +
    "\uffcf\054\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf" +
    "\063\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\070\uffcf\001" +
    "\002\000\062\004\uffce\005\uffce\006\uffce\010\uffce\015\uffce" +
    "\020\uffce\031\uffce\034\uffce\035\uffce\036\uffce\041\uffce\046" +
    "\uffce\054\uffce\056\uffce\057\uffce\060\uffce\061\uffce\062\uffce" +
    "\063\uffce\064\uffce\065\uffce\066\uffce\067\uffce\070\uffce\001" +
    "\002\000\062\004\uffd0\005\uffd0\006\uffd0\010\uffd0\015\uffd0" +
    "\020\uffd0\031\uffd0\034\uffd0\035\uffd0\036\uffd0\041\uffd0\046" +
    "\uffd0\054\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0" +
    "\063\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0\070\uffd0\001" +
    "\002\000\062\004\uffc4\005\uffc4\006\uffc4\010\uffc4\015\uffc4" +
    "\020\uffc4\031\uffc4\034\uffc4\035\uffc4\036\uffc4\041\uffc4\046" +
    "\uffc4\054\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4" +
    "\063\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4\070\uffc4\001" +
    "\002\000\054\004\101\005\115\006\037\010\114\015\104" +
    "\031\041\034\123\035\125\036\141\041\107\046\132\054" +
    "\111\056\131\060\126\062\137\063\105\064\102\065\146" +
    "\066\120\067\361\070\113\001\002\000\004\041\362\001" +
    "\002\000\004\020\363\001\002\000\022\020\uffe7\042\uffe7" +
    "\043\uffe7\045\uffe7\051\uffe7\052\uffe7\071\uffe7\072\uffe7\001" +
    "\002\000\014\042\ufff8\043\ufff8\045\ufff8\051\ufff8\052\ufff8" +
    "\001\002\000\012\005\uffe3\006\uffe3\016\uffe5\031\uffe3\001" +
    "\002\000\004\016\367\001\002\000\004\017\370\001\002" +
    "\000\054\004\uffe0\005\uffe0\006\uffe0\010\uffe0\015\uffe0\020" +
    "\uffe0\031\uffe0\034\uffe0\035\uffe0\036\uffe0\041\uffe0\046\uffe0" +
    "\054\uffe0\056\uffe0\060\uffe0\062\uffe0\063\uffe0\064\uffe0\065" +
    "\uffe0\066\uffe0\070\uffe0\001\002\000\054\004\101\005\115" +
    "\006\037\010\114\015\104\020\372\031\041\034\123\035" +
    "\125\036\141\041\107\046\132\054\111\056\131\060\126" +
    "\062\137\063\105\064\102\065\146\066\120\070\113\001" +
    "\002\000\012\005\ufff4\020\ufff4\071\ufff4\072\ufff4\001\002" +
    "\000\004\017\374\001\002\000\010\005\uffeb\006\uffeb\031" +
    "\uffeb\001\002\000\010\005\376\006\037\031\041\001\002" +
    "\000\012\005\uff90\015\365\046\uff90\047\uff90\001\002\000" +
    "\006\005\ufff5\020\ufff5\001\002\000\004\041\u0101\001\002" +
    "\000\010\005\uffec\006\uffec\031\uffec\001\002\000\006\005" +
    "\027\020\u0103\001\002\000\014\042\uffed\043\uffed\045\uffed" +
    "\051\uffed\052\uffed\001\002\000\010\005\u0105\006\u0106\031" +
    "\u0108\001\002\000\010\021\uffda\041\uffda\046\uffda\001\002" +
    "\000\010\021\uffdc\041\uffdc\046\uffdc\001\002\000\010\021" +
    "\u010b\041\u0109\046\u010a\001\002\000\010\021\uffdb\041\uffdb" +
    "\046\uffdb\001\002\000\014\042\uffdd\043\uffdd\045\uffdd\051" +
    "\uffdd\052\uffdd\001\002\000\010\021\uffd9\041\uffd9\046\uffd9" +
    "\001\002\000\010\004\047\005\046\022\uff8c\001\002\000" +
    "\004\022\u010d\001\002\000\010\021\uffd8\041\uffd8\046\uffd8" +
    "\001\002\000\004\015\u010f\001\002\000\004\016\u0110\001" +
    "\002\000\004\040\u0111\001\002\000\004\006\u0112\001\002" +
    "\000\004\017\u0113\001\002\000\054\004\uffe0\005\uffe0\006" +
    "\uffe0\010\uffe0\015\uffe0\031\uffe0\034\uffe0\035\uffe0\036\uffe0" +
    "\041\uffe0\046\uffe0\054\uffe0\056\uffe0\060\uffe0\062\uffe0\063" +
    "\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\070\uffe0\001\002" +
    "\000\054\004\101\005\115\006\037\010\114\015\104\031" +
    "\041\034\123\035\125\036\141\041\107\046\132\054\111" +
    "\056\131\060\126\062\137\063\105\064\102\065\146\066" +
    "\120\067\u0115\070\113\001\002\000\004\004\u0116\001\002" +
    "\000\004\041\u0117\001\002\000\004\020\u0118\001\002\000" +
    "\004\002\uffbc\001\002\000\010\004\101\035\125\036\141" +
    "\001\002\000\004\041\u011b\001\002\000\014\042\uffde\043" +
    "\uffde\045\uffde\051\uffde\052\uffde\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011a\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\024\004\021\005\022\013\005\020\013\021\007" +
    "\022\014\030\016\031\020\052\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\025\001\001\000\010" +
    "\006\027\010\030\011\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\054\001\001\000\010\016\037" +
    "\073\041\101\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\043\001\001\000\002\001\001\000\004\074\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\055\012\056\001\001\000" +
    "\002\001\001\000\004\011\057\001\001\000\010\020\060" +
    "\021\007\022\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\024\064\025\065\001\001" +
    "\000\002\001\001\000\012\016\067\023\066\073\041\101" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\357\001\001\000" +
    "\006\073\074\101\035\001\001\000\002\001\001\000\004" +
    "\026\076\001\001\000\102\016\127\033\157\034\077\035" +
    "\135\037\107\042\111\043\152\044\132\045\134\047\105" +
    "\050\123\051\116\053\102\054\153\055\151\056\146\057" +
    "\143\060\141\061\156\062\155\063\154\064\150\065\147" +
    "\066\144\067\142\072\137\073\041\075\126\076\120\077" +
    "\133\100\115\101\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\053" +
    "\343\054\153\055\151\056\146\057\143\060\141\061\156" +
    "\062\155\063\154\064\150\065\147\066\144\067\142\072" +
    "\137\076\120\077\133\100\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\062\312\063\154\064\150\065\147\066\144\067\142\072" +
    "\137\076\120\077\133\100\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\027\303\053\302\054\153\055\151" +
    "\056\146\057\143\060\141\061\156\062\155\063\154\064" +
    "\150\065\147\066\144\067\142\072\137\076\120\077\133" +
    "\100\115\001\001\000\032\060\301\061\156\062\155\063" +
    "\154\064\150\065\147\066\144\067\142\072\137\076\120" +
    "\077\133\100\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\065\242\066\144\067\142\072" +
    "\137\076\120\077\133\100\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\062\200\063\154\064" +
    "\150\065\147\066\144\067\142\072\137\076\120\077\133" +
    "\100\115\001\001\000\026\062\163\063\154\064\150\065" +
    "\147\066\144\067\142\072\137\076\120\077\133\100\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\063" +
    "\171\064\150\065\147\066\144\067\142\072\137\076\120" +
    "\077\133\100\115\001\001\000\024\063\170\064\150\065" +
    "\147\066\144\067\142\072\137\076\120\077\133\100\115" +
    "\001\001\000\024\063\167\064\150\065\147\066\144\067" +
    "\142\072\137\076\120\077\133\100\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\070" +
    "\173\071\174\001\001\000\002\001\001\000\044\053\175" +
    "\054\153\055\151\056\146\057\143\060\141\061\156\062" +
    "\155\063\154\064\150\065\147\066\144\067\142\072\137" +
    "\076\120\077\133\100\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\055\220\056\146\057\143\060\141\061\156\062\155\063" +
    "\154\064\150\065\147\066\144\067\142\072\137\076\120" +
    "\077\133\100\115\001\001\000\036\056\215\057\143\060" +
    "\141\061\156\062\155\063\154\064\150\065\147\066\144" +
    "\067\142\072\137\076\120\077\133\100\115\001\001\000" +
    "\040\055\214\056\146\057\143\060\141\061\156\062\155" +
    "\063\154\064\150\065\147\066\144\067\142\072\137\076" +
    "\120\077\133\100\115\001\001\000\040\055\213\056\146" +
    "\057\143\060\141\061\156\062\155\063\154\064\150\065" +
    "\147\066\144\067\142\072\137\076\120\077\133\100\115" +
    "\001\001\000\040\055\212\056\146\057\143\060\141\061" +
    "\156\062\155\063\154\064\150\065\147\066\144\067\142" +
    "\072\137\076\120\077\133\100\115\001\001\000\040\055" +
    "\211\056\146\057\143\060\141\061\156\062\155\063\154" +
    "\064\150\065\147\066\144\067\142\072\137\076\120\077" +
    "\133\100\115\001\001\000\040\055\210\056\146\057\143" +
    "\060\141\061\156\062\155\063\154\064\150\065\147\066" +
    "\144\067\142\072\137\076\120\077\133\100\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\057\217\060\141\061\156\062\155\063\154\064\150\065" +
    "\147\066\144\067\142\072\137\076\120\077\133\100\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\064" +
    "\222\065\147\066\144\067\142\072\137\076\120\077\133" +
    "\100\115\001\001\000\002\001\001\000\044\053\224\054" +
    "\153\055\151\056\146\057\143\060\141\061\156\062\155" +
    "\063\154\064\150\065\147\066\144\067\142\072\137\076" +
    "\120\077\133\100\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\066\233\067\142\072" +
    "\137\076\120\077\133\100\115\001\001\000\044\053\231" +
    "\054\153\055\151\056\146\057\143\060\141\061\156\062" +
    "\155\063\154\064\150\065\147\066\144\067\142\072\137" +
    "\076\120\077\133\100\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\053\235\054\153" +
    "\055\151\056\146\057\143\060\141\061\156\062\155\063" +
    "\154\064\150\065\147\066\144\067\142\072\137\076\120" +
    "\077\133\100\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\240\001\001\000\102\016\127\033\157" +
    "\034\077\035\135\037\107\042\111\043\152\044\132\045" +
    "\134\047\105\050\123\051\116\053\102\054\153\055\151" +
    "\056\146\057\143\060\141\061\156\062\155\063\154\064" +
    "\150\065\147\066\144\067\142\072\137\073\041\075\126" +
    "\076\120\077\133\100\115\101\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\053\244\054\153\055\151" +
    "\056\146\057\143\060\141\061\156\062\155\063\154\064" +
    "\150\065\147\066\144\067\142\072\137\076\120\077\133" +
    "\100\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\247\001\001\000\004\041\251\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\077" +
    "\254\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\257\001\001\000\102\016\127\033\157\034\077\035" +
    "\135\037\107\042\111\043\152\044\132\045\134\047\105" +
    "\050\123\051\116\053\102\054\153\055\151\056\146\057" +
    "\143\060\141\061\156\062\155\063\154\064\150\065\147" +
    "\066\144\067\142\072\137\073\041\075\126\076\120\077" +
    "\133\100\115\101\035\001\001\000\002\001\001\000\004" +
    "\026\262\001\001\000\102\016\127\033\157\034\077\035" +
    "\135\037\107\042\111\043\152\044\132\045\134\047\105" +
    "\050\123\051\116\053\102\054\153\055\151\056\146\057" +
    "\143\060\141\061\156\062\155\063\154\064\150\065\147" +
    "\066\144\067\142\072\137\073\041\075\126\076\120\077" +
    "\133\100\115\101\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\053\270\054\153\055" +
    "\151\056\146\057\143\060\141\061\156\062\155\063\154" +
    "\064\150\065\147\066\144\067\142\072\137\076\120\077" +
    "\133\100\115\001\001\000\010\073\274\100\273\101\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\275\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\053\307\054" +
    "\153\055\151\056\146\057\143\060\141\061\156\062\155" +
    "\063\154\064\150\065\147\066\144\067\142\072\137\076" +
    "\120\077\133\100\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\053\316\054\153\055\151" +
    "\056\146\057\143\060\141\061\156\062\155\063\154\064" +
    "\150\065\147\066\144\067\142\072\137\076\120\077\133" +
    "\100\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\321\001\001\000\102\016\127\033\157\034\077" +
    "\035\135\037\107\042\111\043\152\044\132\045\134\047" +
    "\105\050\123\051\116\053\102\054\153\055\151\056\146" +
    "\057\143\060\141\061\156\062\155\063\154\064\150\065" +
    "\147\066\144\067\142\072\137\073\041\075\126\076\120" +
    "\077\133\100\115\101\035\001\001\000\004\036\324\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\326" +
    "\001\001\000\102\016\127\033\157\034\077\035\135\037" +
    "\107\042\111\043\152\044\132\045\134\047\105\050\123" +
    "\051\116\053\102\054\153\055\151\056\146\057\143\060" +
    "\141\061\156\062\155\063\154\064\150\065\147\066\144" +
    "\067\142\072\137\073\041\075\126\076\120\077\133\100" +
    "\115\101\035\001\001\000\002\001\001\000\046\046\332" +
    "\053\331\054\153\055\151\056\146\057\143\060\141\061" +
    "\156\062\155\063\154\064\150\065\147\066\144\067\142" +
    "\072\137\076\120\077\133\100\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\053\334\054\153\055\151" +
    "\056\146\057\143\060\141\061\156\062\155\063\154\064" +
    "\150\065\147\066\144\067\142\072\137\076\120\077\133" +
    "\100\115\001\001\000\002\001\001\000\046\046\336\053" +
    "\331\054\153\055\151\056\146\057\143\060\141\061\156" +
    "\062\155\063\154\064\150\065\147\066\144\067\142\072" +
    "\137\076\120\077\133\100\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\341\001\001\000\102\016" +
    "\127\033\157\034\077\035\135\037\107\042\111\043\152" +
    "\044\132\045\134\047\105\050\123\051\116\053\102\054" +
    "\153\055\151\056\146\057\143\060\141\061\156\062\155" +
    "\063\154\064\150\065\147\066\144\067\142\072\137\073" +
    "\041\075\126\076\120\077\133\100\115\101\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\053\346\054\153\055\151\056\146\057\143\060\141" +
    "\061\156\062\155\063\154\064\150\065\147\066\144\067" +
    "\142\072\137\076\120\077\133\100\115\001\001\000\002" +
    "\001\001\000\010\073\351\100\350\101\035\001\001\000" +
    "\002\001\001\000\004\017\352\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\102\016\127\033\157\034\077\035\135" +
    "\037\107\042\111\043\152\044\132\045\134\047\105\050" +
    "\123\051\116\053\102\054\153\055\151\056\146\057\143" +
    "\060\141\061\156\062\155\063\154\064\150\065\147\066" +
    "\144\067\142\072\137\073\041\075\126\076\120\077\133" +
    "\100\115\101\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\365" +
    "\025\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\370\001\001\000\102\016\127\033\157\034\077" +
    "\035\135\037\107\042\111\043\152\044\132\045\134\047" +
    "\105\050\123\051\116\053\102\054\153\055\151\056\146" +
    "\057\143\060\141\061\156\062\155\063\154\064\150\065" +
    "\147\066\144\067\142\072\137\073\041\075\126\076\120" +
    "\077\133\100\115\101\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\374\001\001\000\012\010\376" +
    "\016\377\073\041\101\035\001\001\000\002\001\001\000" +
    "\004\007\u0101\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\055\001\001\000\002\001\001\000\004\032" +
    "\u0106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\074\u010b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\u0113" +
    "\001\001\000\102\016\127\033\157\034\077\035\135\037" +
    "\107\042\111\043\152\044\132\045\134\047\105\050\123" +
    "\051\116\053\102\054\153\055\151\056\146\057\143\060" +
    "\141\061\156\062\155\063\154\064\150\065\147\066\144" +
    "\067\142\072\137\073\041\075\126\076\120\077\133\100" +
    "\115\101\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\077\u0119\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((LexiconUnit)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= S1 MAIN_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S1 ::= S1 DEF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S1",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S1",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DEF ::= CLASS_DEF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEF",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DEF ::= STRUCT_DEF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEF",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DEF ::= DEFINE_DEF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEF",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DEF ::= TYPEDEF_DEF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEF",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DEF ::= FUNCTION_DEF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEF",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CLASS_DEF ::= CLASS_T ID BRACKET_OPEN DECLARATIONS_CLASS CLASS_INIT BRACKET_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CLASS_DEF",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CLASS_INIT ::= CONSTRUCTOR MORE_CONSTRUCTORS METHODS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CLASS_INIT",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MORE_CONSTRUCTORS ::= MORE_CONSTRUCTORS CONSTRUCTOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_CONSTRUCTORS",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MORE_CONSTRUCTORS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_CONSTRUCTORS",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONSTRUCTOR ::= ID PARENTESIS_OPEN ARGUMENTS PARENTESIS_CLOSE BRACKET_OPEN FUNCTION_BODY BRACKET_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // METHODS ::= METHODS VISIBILITY FUNCTION_DEF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("METHODS",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // METHODS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("METHODS",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VISIBILITY ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VISIBILITY",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VISIBILITY ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VISIBILITY",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARATIONS_CLASS ::= DECLARATIONS_CLASS VISIBILITY DECLARATION SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS_CLASS",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARATIONS_CLASS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS_CLASS",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STRUCT_DEF ::= STRUCT_T ID BRACKET_OPEN DECLARATIONS_STRUCT CONSTRUCTOR MORE_CONSTRUCTORS BRACKET_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("STRUCT_DEF",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARATIONS_STRUCT ::= DECLARATIONS_STRUCT DECLARATION SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS_STRUCT",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARATIONS_STRUCT ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS_STRUCT",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNCTION_DEF ::= TYPED_FUNCTION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUNCTION_DEF",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNCTION_DEF ::= VOID_FUNCTION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUNCTION_DEF",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TYPED_FUNCTION ::= FUNC_T ID PARENTESIS_OPEN ARGUMENTS PARENTESIS_CLOSE COLON TYPE BRACKET_OPEN FUNCTION_BODY RETURN RETURN_VALUE SEMICOLON BRACKET_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPED_FUNCTION",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VOID_FUNCTION ::= FUNC_T ID PARENTESIS_OPEN ARGUMENTS PARENTESIS_CLOSE BRACKET_OPEN FUNCTION_BODY RETURN SEMICOLON BRACKET_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VOID_FUNCTION",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ARGUMENTS ::= MORE_ARGUMENTS ARGUMENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTS",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ARGUMENTS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTS",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MORE_ARGUMENTS ::= MORE_ARGUMENTS ARGUMENT COMMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_ARGUMENTS",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MORE_ARGUMENTS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_ARGUMENTS",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ARGUMENT ::= DECLARATION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENT",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUNCTION_BODY ::= FUNCTION_BODY SENTENCE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUNCTION_BODY",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUNCTION_BODY ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUNCTION_BODY",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // RETURN_VALUE ::= EXPRESSION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RETURN_VALUE",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DEFINE_DEF ::= DEFINE ID LITERAL SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEFINE_DEF",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TYPEDEF_DEF ::= TYPEDEF ID TYPE_TYPEDEF SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPEDEF_DEF",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TYPE_TYPEDEF ::= INT_T 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE_TYPEDEF",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TYPE_TYPEDEF ::= BOOLEAN_T 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE_TYPEDEF",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TYPE_TYPEDEF ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE_TYPEDEF",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TYPE_TYPEDEF ::= TYPE_TYPEDEF POINTER_OP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE_TYPEDEF",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TYPE_TYPEDEF ::= TYPE_TYPEDEF SQ_BRACKET_OPEN OPT_INTEGER SQ_BRACKET_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE_TYPEDEF",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARATION ::= TYPE ID ARRAY_CONSTRUCTOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ARRAY_CONSTRUCTOR ::= ARRAY_CONSTRUCTOR SQ_BRACKET_OPEN OPT_INTEGER SQ_BRACKET_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRAY_CONSTRUCTOR",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ARRAY_CONSTRUCTOR ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRAY_CONSTRUCTOR",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ID_PARENTESIS ::= ID PARENTESIS_OPEN EXPRESSIONS PARENTESIS_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ID_PARENTESIS",62, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARATION_AND_ASSIGNATION_INS ::= DECLARATION ASSIGNATION_OP EXPRESSION SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION_AND_ASSIGNATION_INS",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARATION_AND_ASSIGNATION_INS ::= DECLARATION ASSIGNATION_OP NEW_OP TYPE ARRAY_CONSTRUCTOR SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION_AND_ASSIGNATION_INS",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARATION_AND_ASSIGNATION_INS ::= DECLARATION ASSIGNATION_OP NEW_OP ID_PARENTESIS SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION_AND_ASSIGNATION_INS",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ASSIGNATION_INS ::= EXPRESSION ASSIGNATION_OP EXPRESSION SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASSIGNATION_INS",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ASSIGNATION_INS ::= EXPRESSION ASSIGNATION_OP NEW_OP TYPE ARRAY_CONSTRUCTOR SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASSIGNATION_INS",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ASSIGNATION_INS ::= EXPRESSION ASSIGNATION_OP NEW_OP ID_PARENTESIS SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASSIGNATION_INS",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IF_INS ::= IF PARENTESIS_OPEN EXPRESSION PARENTESIS_CLOSE BRACKET_OPEN FUNCTION_BODY BRACKET_CLOSE ELSE_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IF_INS",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ELSE_INS ::= ELSE BRACKET_OPEN FUNCTION_BODY BRACKET_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ELSE_INS",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ELSE_INS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ELSE_INS",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SWITCH_INS ::= SWITCH PARENTESIS_OPEN EXPRESSION PARENTESIS_CLOSE BRACKET_OPEN CASES_INS DEFAULT_CASE BRACKET_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SWITCH_INS",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CASES_INS ::= CASES_INS CASE PARENTESIS_OPEN LITERAL PARENTESIS_CLOSE COLON FUNCTION_BODY 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASES_INS",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CASES_INS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASES_INS",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DEFAULT_CASE ::= DEFAULT COLON FUNCTION_BODY BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEFAULT_CASE",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // WHILE_INS ::= WHILE PARENTESIS_OPEN EXPRESSION PARENTESIS_CLOSE BRACKET_OPEN FUNCTION_BODY BRACKET_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("WHILE_INS",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BREAK_INS ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BREAK_INS",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CONTINUE_INS ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONTINUE_INS",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FOR_INS ::= FOR PARENTESIS_OPEN OPTIONAL_EXPRESSION SEMICOLON EXPRESSION SEMICOLON OPTIONAL_EXPRESSION PARENTESIS_CLOSE BRACKET_OPEN FUNCTION_BODY BRACKET_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FOR_INS",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPTIONAL_EXPRESSION ::= EXPRESSION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPTIONAL_EXPRESSION",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPTIONAL_EXPRESSION ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPTIONAL_EXPRESSION",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IO_INS ::= INPUT_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IO_INS",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IO_INS ::= OUTPUT_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IO_INS",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // INPUT_INS ::= INPUT_FUNC PARENTESIS_OPEN EXPRESSION PARENTESIS_CLOSE SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INPUT_INS",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OUTPUT_INS ::= OUTPUT_FUNC PARENTESIS_OPEN EXPRESSION PARENTESIS_CLOSE SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OUTPUT_INS",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // MAIN_INS ::= FUNC_T MAIN PARENTESIS_OPEN PARENTESIS_CLOSE COLON INT_T BRACKET_OPEN FUNCTION_BODY RETURN INTEGER SEMICOLON BRACKET_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MAIN_INS",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESSION ::= B0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPRESSION",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // B0 ::= B1 LESS_OR_EQ_OP B1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // B0 ::= B1 GREATER_OR_EQ_OP B1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // B0 ::= B1 LESS_OP B1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // B0 ::= B1 GREATER_OP B1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // B0 ::= B1 EQUAL_OP B1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // B0 ::= B1 NOT_EQUAL_OP B1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // B0 ::= B1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // B1 ::= B1 OR_OP B2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B1",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // B1 ::= B2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B1",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // B2 ::= B2 AND_OP B3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B2",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // B2 ::= B3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B2",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // B3 ::= NOT_OP B4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B3",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // B3 ::= B4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B3",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // B4 ::= E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B4",46, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E0 ::= E0 SUM_OP E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E0 ::= E0 SUBS_OP E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E0 ::= SUBS_OP E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E1 ::= E1 MULT_OP E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E1 ::= E1 DIV_OP E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E1 ::= E1 MOD_OP E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E2 ::= E3 POW_OP E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",49, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",49, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E3 ::= POINTER_OP E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",50, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E3 ::= E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",50, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E4 ::= E5 FIELD_ACCESS E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",51, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",51, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // E5 ::= E5 SQ_BRACKET_OPEN EXPRESSION SQ_BRACKET_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",52, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // E5 ::= E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",52, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // E6 ::= PARENTESIS_OPEN EXPRESSION PARENTESIS_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",53, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E6 ::= TERMINAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",53, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPRESSIONS ::= MORE_EXPRESSIONS EXPRESSION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPRESSIONS",54, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPRESSIONS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPRESSIONS",54, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // MORE_EXPRESSIONS ::= MORE_EXPRESSIONS EXPRESSION COMMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_EXPRESSIONS",55, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // MORE_EXPRESSIONS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_EXPRESSIONS",55, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TERMINAL ::= LITERAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TERMINAL",56, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TERMINAL ::= ID_EX 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TERMINAL",56, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TYPE ::= SUPERTYPE REFERENCE_OP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",57, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TYPE ::= SUPERTYPE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",57, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SUPERTYPE ::= INT_T 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SUPERTYPE",63, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SUPERTYPE ::= BOOLEAN_T 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SUPERTYPE",63, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SUPERTYPE ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SUPERTYPE",63, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SUPERTYPE ::= SUPERTYPE POINTER_OP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SUPERTYPE",63, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OPT_INTEGER ::= INTEGER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPT_INTEGER",58, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OPT_INTEGER ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPT_INTEGER",58, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OPT_INTEGER ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPT_INTEGER",58, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SENTENCE ::= DECLARATION SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",59, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SENTENCE ::= ASSIGNATION_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",59, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SENTENCE ::= DECLARATION_AND_ASSIGNATION_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",59, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SENTENCE ::= IF_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",59, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SENTENCE ::= SWITCH_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",59, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SENTENCE ::= WHILE_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",59, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SENTENCE ::= FOR_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",59, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SENTENCE ::= BREAK_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",59, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // SENTENCE ::= CONTINUE_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",59, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // SENTENCE ::= IO_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",59, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // SENTENCE ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",59, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ID_EX ::= THIS FIELD_ACCESS ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ID_EX",60, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ID_EX ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ID_EX",60, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ID_EX ::= ID_PARENTESIS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ID_EX",60, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // LITERAL ::= INTEGER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LITERAL",61, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // LITERAL ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LITERAL",61, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // LITERAL ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LITERAL",61, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

