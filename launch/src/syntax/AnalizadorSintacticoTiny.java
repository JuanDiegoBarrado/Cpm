
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun Apr 07 23:35:13 CEST 2024
//----------------------------------------------------

package syntax;

import java_cup.runtime.*;
import lexicon.AnalizadorLexicoTiny;
import lexicon.LexiconUnit;
import lexicon.TokenValue;
import errors.GestionErroresTiny;
import ast.*;
import ast.operators.*;
import ast.preamble.*;
import ast.sentences.*;
import ast.sentences.declarations.*;
import ast.sentences.instructions.*;
import ast.types.*;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun Apr 07 23:35:13 CEST 2024
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\200\000\002\002\004\000\002\002\004\000\002\071" +
    "\004\000\002\071\002\000\002\064\003\000\002\064\003" +
    "\000\002\064\003\000\002\064\003\000\002\064\003\000" +
    "\002\065\010\000\002\073\005\000\002\062\004\000\002" +
    "\062\002\000\002\057\011\000\002\063\005\000\002\063" +
    "\002\000\002\072\003\000\002\072\003\000\002\051\006" +
    "\000\002\051\002\000\002\066\011\000\002\052\005\000" +
    "\002\052\002\000\002\056\003\000\002\056\003\000\002" +
    "\060\017\000\002\061\014\000\002\053\004\000\002\053" +
    "\002\000\002\054\005\000\002\054\002\000\002\050\003" +
    "\000\002\074\004\000\002\074\002\000\002\024\003\000" +
    "\002\067\006\000\002\070\004\000\002\047\005\000\002" +
    "\003\006\000\002\003\002\000\002\026\006\000\002\045" +
    "\006\000\002\045\010\000\002\045\007\000\002\044\006" +
    "\000\002\044\007\000\002\044\007\000\002\032\012\000" +
    "\002\075\006\000\002\075\002\000\002\033\012\000\002" +
    "\046\011\000\002\046\002\000\002\034\007\000\002\035" +
    "\011\000\002\036\004\000\002\037\004\000\002\040\015" +
    "\000\002\041\003\000\002\041\003\000\002\042\007\000" +
    "\002\043\007\000\002\055\016\000\002\004\003\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\003" +
    "\000\002\006\005\000\002\006\003\000\002\007\005\000" +
    "\002\007\003\000\002\010\004\000\002\010\003\000\002" +
    "\011\003\000\002\012\005\000\002\012\005\000\002\012" +
    "\004\000\002\012\003\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\003\000\002\014\005\000" +
    "\002\014\003\000\002\015\004\000\002\015\004\000\002" +
    "\015\003\000\002\016\005\000\002\016\003\000\002\017" +
    "\006\000\002\017\003\000\002\020\005\000\002\020\003" +
    "\000\002\027\004\000\002\027\002\000\002\030\005\000" +
    "\002\030\002\000\002\025\003\000\002\025\003\000\002" +
    "\076\004\000\002\076\003\000\002\077\003\000\002\077" +
    "\003\000\002\077\003\000\002\077\004\000\002\021\003" +
    "\000\002\021\002\000\002\031\004\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\022\005" +
    "\000\002\022\003\000\002\022\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0113\000\014\040\ufffe\041\ufffe\043\ufffe\047\ufffe\050" +
    "\ufffe\001\002\000\004\002\u0115\001\002\000\014\040\020" +
    "\041\016\043\012\047\013\050\007\001\002\000\014\040" +
    "\ufffc\041\ufffc\043\ufffc\047\ufffc\050\ufffc\001\002\000\004" +
    "\072\u0112\001\002\000\022\016\uffea\040\uffea\041\uffea\043" +
    "\uffea\047\uffea\050\uffea\067\uffea\070\uffea\001\002\000\004" +
    "\002\001\001\002\000\006\071\u0107\072\173\001\002\000" +
    "\010\004\037\027\041\072\035\001\002\000\014\040\ufff9" +
    "\041\ufff9\043\ufff9\047\ufff9\050\ufff9\001\002\000\022\016" +
    "\uffe9\040\uffe9\041\uffe9\043\uffe9\047\uffe9\050\uffe9\067\uffe9" +
    "\070\uffe9\001\002\000\004\072\375\001\002\000\014\040" +
    "\ufffb\041\ufffb\043\ufffb\047\ufffb\050\ufffb\001\002\000\004" +
    "\072\024\001\002\000\014\040\ufffa\041\ufffa\043\ufffa\047" +
    "\ufffa\050\ufffa\001\002\000\014\040\uffff\041\uffff\043\uffff" +
    "\047\uffff\050\uffff\001\002\000\014\040\ufffd\041\ufffd\043" +
    "\ufffd\047\ufffd\050\ufffd\001\002\000\004\015\025\001\002" +
    "\000\010\067\uffee\070\uffee\072\uffee\001\002\000\010\067" +
    "\033\070\034\072\027\001\002\000\004\013\367\001\002" +
    "\000\004\016\366\001\002\000\012\016\ufff5\067\ufff5\070" +
    "\ufff5\072\ufff5\001\002\000\010\004\037\027\041\072\035" +
    "\001\002\000\012\004\ufff1\027\ufff1\043\ufff1\072\ufff1\001" +
    "\002\000\012\004\ufff0\027\ufff0\043\ufff0\072\ufff0\001\002" +
    "\000\016\015\uff96\017\uff96\037\uff96\044\uff96\045\uff96\072" +
    "\uff96\001\002\000\016\015\uff99\017\uff99\037\uff99\044\164" +
    "\045\163\072\uff99\001\002\000\016\015\uff98\017\uff98\037" +
    "\uff98\044\uff98\045\uff98\072\uff98\001\002\000\004\037\162" +
    "\001\002\000\016\015\uff97\017\uff97\037\uff97\044\uff97\045" +
    "\uff97\072\uff97\001\002\000\004\072\043\001\002\000\026" +
    "\014\uffda\017\uffda\035\uffda\037\uffda\040\uffda\041\uffda\043" +
    "\uffda\047\uffda\050\uffda\051\uffda\001\002\000\026\014\uffdc" +
    "\017\045\035\uffdc\037\uffdc\040\uffdc\041\uffdc\043\uffdc\047" +
    "\uffdc\050\uffdc\051\uffdc\001\002\000\030\006\077\013\070" +
    "\020\uff93\032\061\033\047\034\076\044\060\045\101\066" +
    "\065\072\064\073\100\001\002\000\056\005\uff85\006\uff85" +
    "\007\uff85\010\uff85\011\uff85\012\uff85\014\uff85\017\uff85\020" +
    "\uff85\021\uff85\022\uff85\023\uff85\024\uff85\025\uff85\026\uff85" +
    "\030\uff85\031\uff85\035\uff85\037\uff85\042\uff85\046\uff85\051" +
    "\uff85\001\002\000\056\005\uff83\006\uff83\007\uff83\010\uff83" +
    "\011\uff83\012\uff83\014\uff83\017\uff83\020\uff83\021\uff83\022" +
    "\uff83\023\uff83\024\uff83\025\uff83\026\uff83\030\uff83\031\uff83" +
    "\035\uff83\037\uff83\042\uff83\046\uff83\051\uff83\001\002\000" +
    "\056\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3" +
    "\014\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024" +
    "\uffa3\025\uffa3\026\uffa3\030\uffa3\031\uffa3\035\uffa3\037\uffa3" +
    "\042\uffa3\046\uffa3\051\uffa3\001\002\000\056\005\uff9b\006" +
    "\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\014\uff9b\017\uff9b" +
    "\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026" +
    "\uff9b\030\uff9b\031\uff9b\035\uff9b\037\uff9b\042\uff9b\046\uff9b" +
    "\051\uff9b\001\002\000\004\020\161\001\002\000\036\014" +
    "\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5" +
    "\026\uffb5\030\uffb5\031\uffb5\035\uffb5\037\uffb5\046\uffb5\051" +
    "\uffb5\001\002\000\056\005\uffa5\006\uffa5\007\uffa5\010\uffa5" +
    "\011\uffa5\012\uffa5\014\uffa5\017\155\020\uffa5\021\uffa5\022" +
    "\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\030\uffa5\031\uffa5" +
    "\035\uffa5\037\uffa5\042\154\046\uffa5\051\uffa5\001\002\000" +
    "\056\005\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c" +
    "\014\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024" +
    "\uff9c\025\uff9c\026\uff9c\030\uff9c\031\uff9c\035\uff9c\037\uff9c" +
    "\042\uff9c\046\uff9c\051\uff9c\001\002\000\052\005\uffa7\006" +
    "\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7\014\uffa7\020\uffa7" +
    "\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\030" +
    "\uffa7\031\uffa7\035\uffa7\037\uffa7\046\uffa7\051\uffa7\001\002" +
    "\000\036\014\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024" +
    "\uffb7\025\uffb7\026\uffb7\030\uffb7\031\uffb7\035\uffb7\037\uffb7" +
    "\046\uffb7\051\uffb7\001\002\000\016\013\070\033\047\034" +
    "\076\066\065\072\064\073\100\001\002\000\024\006\077" +
    "\013\070\033\047\034\076\044\060\045\101\066\065\072" +
    "\064\073\100\001\002\000\036\014\uffb9\020\uffb9\021\uffb9" +
    "\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\030\135\031" +
    "\uffb9\035\uffb9\037\uffb9\046\uffb9\051\uffb9\001\002\000\052" +
    "\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\150\014" +
    "\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa" +
    "\026\uffaa\030\uffaa\031\uffaa\035\uffaa\037\uffaa\046\uffaa\051" +
    "\uffaa\001\002\000\060\005\uff86\006\uff86\007\uff86\010\uff86" +
    "\011\uff86\012\uff86\013\142\014\uff86\017\uff86\020\uff86\021" +
    "\uff86\022\uff86\023\uff86\024\uff86\025\uff86\026\uff86\030\uff86" +
    "\031\uff86\035\uff86\037\uff86\042\uff86\046\uff86\051\uff86\001" +
    "\002\000\004\042\140\001\002\000\050\005\uffac\006\uffac" +
    "\007\uffac\010\uffac\011\uffac\014\uffac\020\uffac\021\uffac\022" +
    "\uffac\023\uffac\024\uffac\025\uffac\026\uffac\030\uffac\031\uffac" +
    "\035\uffac\037\uffac\046\uffac\051\uffac\001\002\000\034\014" +
    "\uffbb\020\uffbb\021\122\022\125\023\120\024\124\025\126" +
    "\026\123\031\121\035\uffbb\037\uffbb\046\uffbb\051\uffbb\001" +
    "\002\000\026\006\077\013\070\032\061\033\047\034\076" +
    "\044\060\045\101\066\065\072\064\073\100\001\002\000" +
    "\016\014\uffc2\020\uffc2\035\uffc2\037\uffc2\046\uffc2\051\uffc2" +
    "\001\002\000\050\005\uffb0\006\uffb0\007\104\010\106\011" +
    "\105\014\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0" +
    "\025\uffb0\026\uffb0\030\uffb0\031\uffb0\035\uffb0\037\uffb0\046" +
    "\uffb0\051\uffb0\001\002\000\042\005\112\006\113\014\uffb4" +
    "\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026" +
    "\uffb4\030\uffb4\031\uffb4\035\uffb4\037\uffb4\046\uffb4\051\uffb4" +
    "\001\002\000\056\005\uffa1\006\uffa1\007\uffa1\010\uffa1\011" +
    "\uffa1\012\uffa1\014\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1" +
    "\023\uffa1\024\uffa1\025\uffa1\026\uffa1\030\uffa1\031\uffa1\035" +
    "\uffa1\037\uffa1\042\uffa1\046\uffa1\051\uffa1\001\002\000\004" +
    "\020\uff94\001\002\000\056\005\uff82\006\uff82\007\uff82\010" +
    "\uff82\011\uff82\012\uff82\014\uff82\017\uff82\020\uff82\021\uff82" +
    "\022\uff82\023\uff82\024\uff82\025\uff82\026\uff82\030\uff82\031" +
    "\uff82\035\uff82\037\uff82\042\uff82\046\uff82\051\uff82\001\002" +
    "\000\022\013\070\033\047\034\076\044\060\045\101\066" +
    "\065\072\064\073\100\001\002\000\056\005\uff84\006\uff84" +
    "\007\uff84\010\uff84\011\uff84\012\uff84\014\uff84\017\uff84\020" +
    "\uff84\021\uff84\022\uff84\023\uff84\024\uff84\025\uff84\026\uff84" +
    "\030\uff84\031\uff84\035\uff84\037\uff84\042\uff84\046\uff84\051" +
    "\uff84\001\002\000\016\013\070\033\047\034\076\066\065" +
    "\072\064\073\100\001\002\000\052\005\uffa8\006\uffa8\007" +
    "\uffa8\010\uffa8\011\uffa8\012\uffa8\014\uffa8\020\uffa8\021\uffa8" +
    "\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\030\uffa8\031" +
    "\uffa8\035\uffa8\037\uffa8\046\uffa8\051\uffa8\001\002\000\050" +
    "\005\uffb1\006\uffb1\007\104\010\106\011\105\014\uffb1\020" +
    "\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1" +
    "\030\uffb1\031\uffb1\035\uffb1\037\uffb1\046\uffb1\051\uffb1\001" +
    "\002\000\022\013\070\033\047\034\076\044\060\045\101" +
    "\066\065\072\064\073\100\001\002\000\022\013\070\033" +
    "\047\034\076\044\060\045\101\066\065\072\064\073\100" +
    "\001\002\000\022\013\070\033\047\034\076\044\060\045" +
    "\101\066\065\072\064\073\100\001\002\000\050\005\uffae" +
    "\006\uffae\007\uffae\010\uffae\011\uffae\014\uffae\020\uffae\021" +
    "\uffae\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\030\uffae" +
    "\031\uffae\035\uffae\037\uffae\046\uffae\051\uffae\001\002\000" +
    "\050\005\uffad\006\uffad\007\uffad\010\uffad\011\uffad\014\uffad" +
    "\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\026" +
    "\uffad\030\uffad\031\uffad\035\uffad\037\uffad\046\uffad\051\uffad" +
    "\001\002\000\050\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011" +
    "\uffaf\014\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf" +
    "\025\uffaf\026\uffaf\030\uffaf\031\uffaf\035\uffaf\037\uffaf\046" +
    "\uffaf\051\uffaf\001\002\000\022\013\070\033\047\034\076" +
    "\044\060\045\101\066\065\072\064\073\100\001\002\000" +
    "\022\013\070\033\047\034\076\044\060\045\101\066\065" +
    "\072\064\073\100\001\002\000\050\005\uffb2\006\uffb2\007" +
    "\104\010\106\011\105\014\uffb2\020\uffb2\021\uffb2\022\uffb2" +
    "\023\uffb2\024\uffb2\025\uffb2\026\uffb2\030\uffb2\031\uffb2\035" +
    "\uffb2\037\uffb2\046\uffb2\051\uffb2\001\002\000\050\005\uffb3" +
    "\006\uffb3\007\104\010\106\011\105\014\uffb3\020\uffb3\021" +
    "\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\030\uffb3" +
    "\031\uffb3\035\uffb3\037\uffb3\046\uffb3\051\uffb3\001\002\000" +
    "\004\014\117\001\002\000\056\005\uffa2\006\uffa2\007\uffa2" +
    "\010\uffa2\011\uffa2\012\uffa2\014\uffa2\017\uffa2\020\uffa2\021" +
    "\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\030\uffa2" +
    "\031\uffa2\035\uffa2\037\uffa2\042\uffa2\046\uffa2\051\uffa2\001" +
    "\002\000\026\006\077\013\070\032\061\033\047\034\076" +
    "\044\060\045\101\066\065\072\064\073\100\001\002\000" +
    "\026\006\077\013\070\032\061\033\047\034\076\044\060" +
    "\045\101\066\065\072\064\073\100\001\002\000\026\006" +
    "\077\013\070\032\061\033\047\034\076\044\060\045\101" +
    "\066\065\072\064\073\100\001\002\000\026\006\077\013" +
    "\070\032\061\033\047\034\076\044\060\045\101\066\065" +
    "\072\064\073\100\001\002\000\026\006\077\013\070\032" +
    "\061\033\047\034\076\044\060\045\101\066\065\072\064" +
    "\073\100\001\002\000\026\006\077\013\070\032\061\033" +
    "\047\034\076\044\060\045\101\066\065\072\064\073\100" +
    "\001\002\000\026\006\077\013\070\032\061\033\047\034" +
    "\076\044\060\045\101\066\065\072\064\073\100\001\002" +
    "\000\020\014\uffc0\020\uffc0\031\121\035\uffc0\037\uffc0\046" +
    "\uffc0\051\uffc0\001\002\000\020\014\uffbe\020\uffbe\031\121" +
    "\035\uffbe\037\uffbe\046\uffbe\051\uffbe\001\002\000\020\014" +
    "\uffc1\020\uffc1\031\121\035\uffc1\037\uffc1\046\uffc1\051\uffc1" +
    "\001\002\000\020\014\uffbc\020\uffbc\031\121\035\uffbc\037" +
    "\uffbc\046\uffbc\051\uffbc\001\002\000\020\014\uffbf\020\uffbf" +
    "\031\121\035\uffbf\037\uffbf\046\uffbf\051\uffbf\001\002\000" +
    "\036\014\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba" +
    "\025\uffba\026\uffba\030\135\031\uffba\035\uffba\037\uffba\046" +
    "\uffba\051\uffba\001\002\000\026\006\077\013\070\032\061" +
    "\033\047\034\076\044\060\045\101\066\065\072\064\073" +
    "\100\001\002\000\036\014\uffb8\020\uffb8\021\uffb8\022\uffb8" +
    "\023\uffb8\024\uffb8\025\uffb8\026\uffb8\030\uffb8\031\uffb8\035" +
    "\uffb8\037\uffb8\046\uffb8\051\uffb8\001\002\000\020\014\uffbd" +
    "\020\uffbd\031\121\035\uffbd\037\uffbd\046\uffbd\051\uffbd\001" +
    "\002\000\004\072\141\001\002\000\056\005\uff87\006\uff87" +
    "\007\uff87\010\uff87\011\uff87\012\uff87\014\uff87\017\uff87\020" +
    "\uff87\021\uff87\022\uff87\023\uff87\024\uff87\025\uff87\026\uff87" +
    "\030\uff87\031\uff87\035\uff87\037\uff87\042\uff87\046\uff87\051" +
    "\uff87\001\002\000\030\006\uff9d\013\uff9d\014\uff9f\032\uff9d" +
    "\033\uff9d\034\uff9d\044\uff9d\045\uff9d\066\uff9d\072\uff9d\073" +
    "\uff9d\001\002\000\004\014\147\001\002\000\026\006\077" +
    "\013\070\032\061\033\047\034\076\044\060\045\101\066" +
    "\065\072\064\073\100\001\002\000\006\014\uffa0\035\146" +
    "\001\002\000\026\006\uff9e\013\uff9e\032\uff9e\033\uff9e\034" +
    "\uff9e\044\uff9e\045\uff9e\066\uff9e\072\uff9e\073\uff9e\001\002" +
    "\000\056\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012" +
    "\uffd9\014\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\026\uffd9\030\uffd9\031\uffd9\035\uffd9\037" +
    "\uffd9\042\uffd9\046\uffd9\051\uffd9\001\002\000\022\013\070" +
    "\033\047\034\076\044\060\045\101\066\065\072\064\073" +
    "\100\001\002\000\050\005\uffab\006\uffab\007\uffab\010\uffab" +
    "\011\uffab\014\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024" +
    "\uffab\025\uffab\026\uffab\030\uffab\031\uffab\035\uffab\037\uffab" +
    "\046\uffab\051\uffab\001\002\000\036\014\uffb6\020\uffb6\021" +
    "\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\030\uffb6" +
    "\031\uffb6\035\uffb6\037\uffb6\046\uffb6\051\uffb6\001\002\000" +
    "\052\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9" +
    "\014\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025" +
    "\uffa9\026\uffa9\030\uffa9\031\uffa9\035\uffa9\037\uffa9\046\uffa9" +
    "\051\uffa9\001\002\000\016\013\070\033\047\034\076\066" +
    "\065\072\064\073\100\001\002\000\026\006\077\013\070" +
    "\032\061\033\047\034\076\044\060\045\101\066\065\072" +
    "\064\073\100\001\002\000\004\020\157\001\002\000\056" +
    "\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\014" +
    "\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4" +
    "\025\uffa4\026\uffa4\030\uffa4\031\uffa4\035\uffa4\037\uffa4\042" +
    "\uffa4\046\uffa4\051\uffa4\001\002\000\054\005\uffa6\006\uffa6" +
    "\007\uffa6\010\uffa6\011\uffa6\012\uffa6\014\uffa6\017\155\020" +
    "\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6" +
    "\030\uffa6\031\uffa6\035\uffa6\037\uffa6\046\uffa6\051\uffa6\001" +
    "\002\000\026\014\uffdb\017\uffdb\035\uffdb\037\uffdb\040\uffdb" +
    "\041\uffdb\043\uffdb\047\uffdb\050\uffdb\051\uffdb\001\002\000" +
    "\010\067\uffef\070\uffef\072\uffef\001\002\000\012\015\uff9a" +
    "\017\uff9a\037\uff9a\072\uff9a\001\002\000\016\015\uff95\017" +
    "\uff95\037\uff95\044\uff95\045\uff95\072\uff95\001\002\000\012" +
    "\016\ufff2\067\ufff2\070\ufff2\072\027\001\002\000\012\016" +
    "\ufff6\067\ufff6\070\ufff6\072\ufff6\001\002\000\010\016\ufff7" +
    "\067\033\070\034\001\002\000\004\043\172\001\002\000" +
    "\010\016\ufff3\067\ufff3\070\ufff3\001\002\000\004\072\173" +
    "\001\002\000\004\013\174\001\002\000\012\004\uffe3\014" +
    "\uffe5\027\uffe3\072\uffe3\001\002\000\004\014\202\001\002" +
    "\000\010\004\037\027\041\072\035\001\002\000\006\014" +
    "\uffe6\035\201\001\002\000\006\014\uffe2\035\uffe2\001\002" +
    "\000\010\004\uffe4\027\uffe4\072\uffe4\001\002\000\006\015" +
    "\203\036\204\001\002\000\056\004\uffe0\006\uffe0\013\uffe0" +
    "\027\uffe0\032\uffe0\033\uffe0\034\uffe0\037\uffe0\044\uffe0\045" +
    "\uffe0\052\uffe0\054\uffe0\056\uffe0\060\uffe0\061\uffe0\062\uffe0" +
    "\063\uffe0\064\uffe0\065\uffe0\066\uffe0\072\uffe0\073\uffe0\001" +
    "\002\000\010\004\037\027\041\072\035\001\002\000\004" +
    "\015\206\001\002\000\056\004\uffe0\006\uffe0\013\uffe0\027" +
    "\uffe0\032\uffe0\033\uffe0\034\uffe0\037\uffe0\044\uffe0\045\uffe0" +
    "\052\uffe0\054\uffe0\056\uffe0\060\uffe0\061\uffe0\062\uffe0\063" +
    "\uffe0\064\uffe0\065\uffe0\066\uffe0\072\uffe0\073\uffe0\001\002" +
    "\000\056\004\037\006\077\013\070\027\041\032\061\033" +
    "\047\034\076\037\215\044\060\045\101\052\217\054\230" +
    "\056\226\060\235\061\213\062\211\063\236\064\223\065" +
    "\224\066\065\072\221\073\100\001\002\000\066\004\uff91" +
    "\006\uff91\013\uff91\014\uff91\016\uff91\027\uff91\032\uff91\033" +
    "\uff91\034\uff91\037\uff91\044\uff91\045\uff91\052\uff91\054\uff91" +
    "\055\uff91\056\uff91\057\uff91\060\uff91\061\uff91\062\uff91\063" +
    "\uff91\064\uff91\065\uff91\066\uff91\072\uff91\073\uff91\001\002" +
    "\000\004\037\361\001\002\000\006\046\346\051\347\001" +
    "\002\000\004\013\334\001\002\000\066\004\uff89\006\uff89" +
    "\013\uff89\014\uff89\016\uff89\027\uff89\032\uff89\033\uff89\034" +
    "\uff89\037\uff89\044\uff89\045\uff89\052\uff89\054\uff89\055\uff89" +
    "\056\uff89\057\uff89\060\uff89\061\uff89\062\uff89\063\uff89\064" +
    "\uff89\065\uff89\066\uff89\072\uff89\073\uff89\001\002\000\066" +
    "\004\uff88\006\uff88\013\uff88\014\uff88\016\uff88\027\uff88\032" +
    "\uff88\033\uff88\034\uff88\037\uff88\044\uff88\045\uff88\052\uff88" +
    "\054\uff88\055\uff88\056\uff88\057\uff88\060\uff88\061\uff88\062" +
    "\uff88\063\uff88\064\uff88\065\uff88\066\uff88\072\uff88\073\uff88" +
    "\001\002\000\066\004\uff8e\006\uff8e\013\uff8e\014\uff8e\016" +
    "\uff8e\027\uff8e\032\uff8e\033\uff8e\034\uff8e\037\uff8e\044\uff8e" +
    "\045\uff8e\052\uff8e\054\uff8e\055\uff8e\056\uff8e\057\uff8e\060" +
    "\uff8e\061\uff8e\062\uff8e\063\uff8e\064\uff8e\065\uff8e\066\uff8e" +
    "\072\uff8e\073\uff8e\001\002\000\004\013\321\001\002\000" +
    "\066\004\uff8d\006\uff8d\013\uff8d\014\uff8d\016\uff8d\027\uff8d" +
    "\032\uff8d\033\uff8d\034\uff8d\037\uff8d\044\uff8d\045\uff8d\052" +
    "\uff8d\054\uff8d\055\uff8d\056\uff8d\057\uff8d\060\uff8d\061\uff8d" +
    "\062\uff8d\063\uff8d\064\uff8d\065\uff8d\066\uff8d\072\uff8d\073" +
    "\uff8d\001\002\000\056\005\uff86\006\uff86\007\uff86\010\uff86" +
    "\011\uff86\012\uff86\013\142\017\uff86\021\uff86\022\uff86\023" +
    "\uff86\024\uff86\025\uff86\026\uff86\030\uff86\031\uff86\042\uff86" +
    "\044\uff96\045\uff96\046\uff86\051\uff86\072\uff96\001\002\000" +
    "\066\004\uffc6\006\uffc6\013\uffc6\014\uffc6\016\uffc6\027\uffc6" +
    "\032\uffc6\033\uffc6\034\uffc6\037\uffc6\044\uffc6\045\uffc6\052" +
    "\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6" +
    "\062\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\072\uffc6\073" +
    "\uffc6\001\002\000\004\013\315\001\002\000\026\006\077" +
    "\013\070\032\061\033\047\034\076\044\060\045\101\066" +
    "\065\072\064\073\100\001\002\000\066\004\uffc7\006\uffc7" +
    "\013\uffc7\014\uffc7\016\uffc7\027\uffc7\032\uffc7\033\uffc7\034" +
    "\uffc7\037\uffc7\044\uffc7\045\uffc7\052\uffc7\054\uffc7\055\uffc7" +
    "\056\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\064" +
    "\uffc7\065\uffc7\066\uffc7\072\uffc7\073\uffc7\001\002\000\004" +
    "\037\310\001\002\000\064\004\uffe1\006\uffe1\013\uffe1\016" +
    "\uffe1\027\uffe1\032\uffe1\033\uffe1\034\uffe1\037\uffe1\044\uffe1" +
    "\045\uffe1\052\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060" +
    "\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1" +
    "\072\uffe1\073\uffe1\001\002\000\004\013\266\001\002\000" +
    "\006\037\253\051\254\001\002\000\066\004\uff8a\006\uff8a" +
    "\013\uff8a\014\uff8a\016\uff8a\027\uff8a\032\uff8a\033\uff8a\034" +
    "\uff8a\037\uff8a\044\uff8a\045\uff8a\052\uff8a\054\uff8a\055\uff8a" +
    "\056\uff8a\057\uff8a\060\uff8a\061\uff8a\062\uff8a\063\uff8a\064" +
    "\uff8a\065\uff8a\066\uff8a\072\uff8a\073\uff8a\001\002\000\066" +
    "\004\uff8c\006\uff8c\013\uff8c\014\uff8c\016\uff8c\027\uff8c\032" +
    "\uff8c\033\uff8c\034\uff8c\037\uff8c\044\uff8c\045\uff8c\052\uff8c" +
    "\054\uff8c\055\uff8c\056\uff8c\057\uff8c\060\uff8c\061\uff8c\062" +
    "\uff8c\063\uff8c\064\uff8c\065\uff8c\066\uff8c\072\uff8c\073\uff8c" +
    "\001\002\000\066\004\uff8f\006\uff8f\013\uff8f\014\uff8f\016" +
    "\uff8f\027\uff8f\032\uff8f\033\uff8f\034\uff8f\037\uff8f\044\uff8f" +
    "\045\uff8f\052\uff8f\054\uff8f\055\uff8f\056\uff8f\057\uff8f\060" +
    "\uff8f\061\uff8f\062\uff8f\063\uff8f\064\uff8f\065\uff8f\066\uff8f" +
    "\072\uff8f\073\uff8f\001\002\000\004\013\245\001\002\000" +
    "\004\013\241\001\002\000\066\004\uff8b\006\uff8b\013\uff8b" +
    "\014\uff8b\016\uff8b\027\uff8b\032\uff8b\033\uff8b\034\uff8b\037" +
    "\uff8b\044\uff8b\045\uff8b\052\uff8b\054\uff8b\055\uff8b\056\uff8b" +
    "\057\uff8b\060\uff8b\061\uff8b\062\uff8b\063\uff8b\064\uff8b\065" +
    "\uff8b\066\uff8b\072\uff8b\073\uff8b\001\002\000\066\004\uff90" +
    "\006\uff90\013\uff90\014\uff90\016\uff90\027\uff90\032\uff90\033" +
    "\uff90\034\uff90\037\uff90\044\uff90\045\uff90\052\uff90\054\uff90" +
    "\055\uff90\056\uff90\057\uff90\060\uff90\061\uff90\062\uff90\063" +
    "\uff90\064\uff90\065\uff90\066\uff90\072\uff90\073\uff90\001\002" +
    "\000\026\006\077\013\070\032\061\033\047\034\076\044" +
    "\060\045\101\066\065\072\064\073\100\001\002\000\004" +
    "\014\243\001\002\000\004\037\244\001\002\000\066\004" +
    "\uffc5\006\uffc5\013\uffc5\014\uffc5\016\uffc5\027\uffc5\032\uffc5" +
    "\033\uffc5\034\uffc5\037\uffc5\044\uffc5\045\uffc5\052\uffc5\054" +
    "\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5" +
    "\063\uffc5\064\uffc5\065\uffc5\066\uffc5\072\uffc5\073\uffc5\001" +
    "\002\000\026\006\077\013\070\032\061\033\047\034\076" +
    "\044\060\045\101\066\065\072\064\073\100\001\002\000" +
    "\004\014\247\001\002\000\004\015\250\001\002\000\056" +
    "\004\uffe0\006\uffe0\013\uffe0\016\uffe0\027\uffe0\032\uffe0\033" +
    "\uffe0\034\uffe0\037\uffe0\044\uffe0\045\uffe0\052\uffe0\054\uffe0" +
    "\056\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\066" +
    "\uffe0\072\uffe0\073\uffe0\001\002\000\056\004\037\006\077" +
    "\013\070\016\252\027\041\032\061\033\047\034\076\037" +
    "\215\044\060\045\101\052\217\054\230\056\226\060\235" +
    "\061\213\062\211\063\236\064\223\066\065\072\221\073" +
    "\100\001\002\000\066\004\uffcb\006\uffcb\013\uffcb\014\uffcb" +
    "\016\uffcb\027\uffcb\032\uffcb\033\uffcb\034\uffcb\037\uffcb\044" +
    "\uffcb\045\uffcb\052\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb" +
    "\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\066" +
    "\uffcb\072\uffcb\073\uffcb\001\002\000\066\004\uff92\006\uff92" +
    "\013\uff92\014\uff92\016\uff92\027\uff92\032\uff92\033\uff92\034" +
    "\uff92\037\uff92\044\uff92\045\uff92\052\uff92\054\uff92\055\uff92" +
    "\056\uff92\057\uff92\060\uff92\061\uff92\062\uff92\063\uff92\064" +
    "\uff92\065\uff92\066\uff92\072\uff92\073\uff92\001\002\000\030" +
    "\006\077\013\070\032\061\033\047\034\076\044\060\045" +
    "\101\046\255\066\065\072\064\073\100\001\002\000\010" +
    "\004\037\027\041\072\260\001\002\000\004\037\257\001" +
    "\002\000\066\004\uffd8\006\uffd8\013\uffd8\014\uffd8\016\uffd8" +
    "\027\uffd8\032\uffd8\033\uffd8\034\uffd8\037\uffd8\044\uffd8\045" +
    "\uffd8\052\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8" +
    "\061\uffd8\062\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8\072" +
    "\uffd8\073\uffd8\001\002\000\014\013\142\017\uff96\037\uff96" +
    "\044\uff96\045\uff96\001\002\000\004\037\265\001\002\000" +
    "\006\017\uffda\037\uffda\001\002\000\006\017\045\037\264" +
    "\001\002\000\066\004\uffd7\006\uffd7\013\uffd7\014\uffd7\016" +
    "\uffd7\027\uffd7\032\uffd7\033\uffd7\034\uffd7\037\uffd7\044\uffd7" +
    "\045\uffd7\052\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060" +
    "\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7" +
    "\072\uffd7\073\uffd7\001\002\000\066\004\uffd6\006\uffd6\013" +
    "\uffd6\014\uffd6\016\uffd6\027\uffd6\032\uffd6\033\uffd6\034\uffd6" +
    "\037\uffd6\044\uffd6\045\uffd6\052\uffd6\054\uffd6\055\uffd6\056" +
    "\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6\064\uffd6" +
    "\065\uffd6\066\uffd6\072\uffd6\073\uffd6\001\002\000\026\006" +
    "\077\013\070\032\061\033\047\034\076\044\060\045\101" +
    "\066\065\072\064\073\100\001\002\000\004\014\270\001" +
    "\002\000\004\015\271\001\002\000\006\055\uffcd\057\uffcd" +
    "\001\002\000\006\055\275\057\273\001\002\000\004\036" +
    "\304\001\002\000\004\016\303\001\002\000\004\013\276" +
    "\001\002\000\010\033\047\034\076\073\100\001\002\000" +
    "\004\014\300\001\002\000\004\036\301\001\002\000\060" +
    "\004\uffe0\006\uffe0\013\uffe0\027\uffe0\032\uffe0\033\uffe0\034" +
    "\uffe0\037\uffe0\044\uffe0\045\uffe0\052\uffe0\054\uffe0\055\uffe0" +
    "\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064" +
    "\uffe0\066\uffe0\072\uffe0\073\uffe0\001\002\000\060\004\037" +
    "\006\077\013\070\027\041\032\061\033\047\034\076\037" +
    "\215\044\060\045\101\052\217\054\230\055\uffce\056\226" +
    "\057\uffce\060\235\061\213\062\211\063\236\064\223\066" +
    "\065\072\221\073\100\001\002\000\066\004\uffcf\006\uffcf" +
    "\013\uffcf\014\uffcf\016\uffcf\027\uffcf\032\uffcf\033\uffcf\034" +
    "\uffcf\037\uffcf\044\uffcf\045\uffcf\052\uffcf\054\uffcf\055\uffcf" +
    "\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064" +
    "\uffcf\065\uffcf\066\uffcf\072\uffcf\073\uffcf\001\002\000\054" +
    "\004\uffe0\006\uffe0\013\uffe0\027\uffe0\032\uffe0\033\uffe0\034" +
    "\uffe0\037\uffe0\044\uffe0\045\uffe0\052\uffe0\054\uffe0\056\uffe0" +
    "\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\066\uffe0\072" +
    "\uffe0\073\uffe0\001\002\000\054\004\037\006\077\013\070" +
    "\027\041\032\061\033\047\034\076\037\215\044\060\045" +
    "\101\052\217\054\230\056\306\060\235\061\213\062\211" +
    "\063\236\064\223\066\065\072\221\073\100\001\002\000" +
    "\004\037\307\001\002\000\056\004\uffca\006\uffca\013\uffca" +
    "\016\uffcc\027\uffca\032\uffca\033\uffca\034\uffca\037\uffca\044" +
    "\uffca\045\uffca\052\uffca\054\uffca\056\uffca\060\uffca\061\uffca" +
    "\062\uffca\063\uffca\064\uffca\066\uffca\072\uffca\073\uffca\001" +
    "\002\000\066\004\uffca\006\uffca\013\uffca\014\uffca\016\uffca" +
    "\027\uffca\032\uffca\033\uffca\034\uffca\037\uffca\044\uffca\045" +
    "\uffca\052\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca" +
    "\061\uffca\062\uffca\063\uffca\064\uffca\065\uffca\066\uffca\072" +
    "\uffca\073\uffca\001\002\000\004\037\uffdf\001\002\000\004" +
    "\037\313\001\002\000\004\016\314\001\002\000\022\016" +
    "\uffe8\040\uffe8\041\uffe8\043\uffe8\047\uffe8\050\uffe8\067\uffe8" +
    "\070\uffe8\001\002\000\026\006\077\013\070\032\061\033" +
    "\047\034\076\044\060\045\101\066\065\072\064\073\100" +
    "\001\002\000\004\014\317\001\002\000\004\037\320\001" +
    "\002\000\066\004\uffc4\006\uffc4\013\uffc4\014\uffc4\016\uffc4" +
    "\027\uffc4\032\uffc4\033\uffc4\034\uffc4\037\uffc4\044\uffc4\045" +
    "\uffc4\052\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4" +
    "\061\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4\072" +
    "\uffc4\073\uffc4\001\002\000\026\006\077\013\070\032\061" +
    "\033\047\034\076\044\060\045\101\066\065\072\064\073" +
    "\100\001\002\000\004\014\323\001\002\000\004\015\324" +
    "\001\002\000\056\004\uffe0\006\uffe0\013\uffe0\016\uffe0\027" +
    "\uffe0\032\uffe0\033\uffe0\034\uffe0\037\uffe0\044\uffe0\045\uffe0" +
    "\052\uffe0\054\uffe0\056\uffe0\060\uffe0\061\uffe0\062\uffe0\063" +
    "\uffe0\064\uffe0\066\uffe0\072\uffe0\073\uffe0\001\002\000\056" +
    "\004\037\006\077\013\070\016\326\027\041\032\061\033" +
    "\047\034\076\037\215\044\060\045\101\052\217\054\230" +
    "\056\226\060\235\061\213\062\211\063\236\064\223\066" +
    "\065\072\221\073\100\001\002\000\070\004\uffd0\006\uffd0" +
    "\013\uffd0\014\uffd0\016\uffd0\027\uffd0\032\uffd0\033\uffd0\034" +
    "\uffd0\037\uffd0\044\uffd0\045\uffd0\052\uffd0\053\327\054\uffd0" +
    "\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063" +
    "\uffd0\064\uffd0\065\uffd0\066\uffd0\072\uffd0\073\uffd0\001\002" +
    "\000\004\015\331\001\002\000\066\004\uffd2\006\uffd2\013" +
    "\uffd2\014\uffd2\016\uffd2\027\uffd2\032\uffd2\033\uffd2\034\uffd2" +
    "\037\uffd2\044\uffd2\045\uffd2\052\uffd2\054\uffd2\055\uffd2\056" +
    "\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2" +
    "\065\uffd2\066\uffd2\072\uffd2\073\uffd2\001\002\000\056\004" +
    "\uffe0\006\uffe0\013\uffe0\016\uffe0\027\uffe0\032\uffe0\033\uffe0" +
    "\034\uffe0\037\uffe0\044\uffe0\045\uffe0\052\uffe0\054\uffe0\056" +
    "\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\066\uffe0" +
    "\072\uffe0\073\uffe0\001\002\000\056\004\037\006\077\013" +
    "\070\016\333\027\041\032\061\033\047\034\076\037\215" +
    "\044\060\045\101\052\217\054\230\056\226\060\235\061" +
    "\213\062\211\063\236\064\223\066\065\072\221\073\100" +
    "\001\002\000\066\004\uffd1\006\uffd1\013\uffd1\014\uffd1\016" +
    "\uffd1\027\uffd1\032\uffd1\033\uffd1\034\uffd1\037\uffd1\044\uffd1" +
    "\045\uffd1\052\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\060" +
    "\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1" +
    "\072\uffd1\073\uffd1\001\002\000\054\004\037\006\077\013" +
    "\070\027\041\032\061\033\047\034\076\037\215\044\060" +
    "\045\101\052\217\054\230\056\226\060\235\061\213\062" +
    "\211\063\236\064\223\066\065\072\221\073\100\001\002" +
    "\000\004\037\336\001\002\000\026\006\077\013\070\032" +
    "\061\033\047\034\076\044\060\045\101\066\065\072\064" +
    "\073\100\001\002\000\004\037\340\001\002\000\054\004" +
    "\037\006\077\013\070\027\041\032\061\033\047\034\076" +
    "\037\215\044\060\045\101\052\217\054\230\056\226\060" +
    "\235\061\213\062\211\063\236\064\223\066\065\072\221" +
    "\073\100\001\002\000\004\014\342\001\002\000\004\015" +
    "\343\001\002\000\056\004\uffe0\006\uffe0\013\uffe0\016\uffe0" +
    "\027\uffe0\032\uffe0\033\uffe0\034\uffe0\037\uffe0\044\uffe0\045" +
    "\uffe0\052\uffe0\054\uffe0\056\uffe0\060\uffe0\061\uffe0\062\uffe0" +
    "\063\uffe0\064\uffe0\066\uffe0\072\uffe0\073\uffe0\001\002\000" +
    "\056\004\037\006\077\013\070\016\345\027\041\032\061" +
    "\033\047\034\076\037\215\044\060\045\101\052\217\054" +
    "\230\056\226\060\235\061\213\062\211\063\236\064\223" +
    "\066\065\072\221\073\100\001\002\000\066\004\uffc8\006" +
    "\uffc8\013\uffc8\014\uffc8\016\uffc8\027\uffc8\032\uffc8\033\uffc8" +
    "\034\uffc8\037\uffc8\044\uffc8\045\uffc8\052\uffc8\054\uffc8\055" +
    "\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8" +
    "\064\uffc8\065\uffc8\066\uffc8\072\uffc8\073\uffc8\001\002\000" +
    "\010\004\037\027\041\072\035\001\002\000\030\006\077" +
    "\013\070\032\061\033\047\034\076\044\060\045\101\046" +
    "\351\066\065\072\064\073\100\001\002\000\004\037\355" +
    "\001\002\000\004\072\352\001\002\000\004\013\142\001" +
    "\002\000\004\037\354\001\002\000\066\004\uffd3\006\uffd3" +
    "\013\uffd3\014\uffd3\016\uffd3\027\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\037\uffd3\044\uffd3\045\uffd3\052\uffd3\054\uffd3\055\uffd3" +
    "\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3\064" +
    "\uffd3\065\uffd3\066\uffd3\072\uffd3\073\uffd3\001\002\000\066" +
    "\004\uffd5\006\uffd5\013\uffd5\014\uffd5\016\uffd5\027\uffd5\032" +
    "\uffd5\033\uffd5\034\uffd5\037\uffd5\044\uffd5\045\uffd5\052\uffd5" +
    "\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062" +
    "\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\072\uffd5\073\uffd5" +
    "\001\002\000\006\017\uffda\037\uffda\001\002\000\006\017" +
    "\045\037\360\001\002\000\066\004\uffd4\006\uffd4\013\uffd4" +
    "\014\uffd4\016\uffd4\027\uffd4\032\uffd4\033\uffd4\034\uffd4\037" +
    "\uffd4\044\uffd4\045\uffd4\052\uffd4\054\uffd4\055\uffd4\056\uffd4" +
    "\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065" +
    "\uffd4\066\uffd4\072\uffd4\073\uffd4\001\002\000\066\004\uffc9" +
    "\006\uffc9\013\uffc9\014\uffc9\016\uffc9\027\uffc9\032\uffc9\033" +
    "\uffc9\034\uffc9\037\uffc9\044\uffc9\045\uffc9\052\uffc9\054\uffc9" +
    "\055\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9\063" +
    "\uffc9\064\uffc9\065\uffc9\066\uffc9\072\uffc9\073\uffc9\001\002" +
    "\000\056\004\037\006\077\013\070\027\041\032\061\033" +
    "\047\034\076\037\215\044\060\045\101\052\217\054\230" +
    "\056\226\060\235\061\213\062\211\063\236\064\223\065" +
    "\363\066\065\072\221\073\100\001\002\000\004\037\364" +
    "\001\002\000\004\016\365\001\002\000\022\016\uffe7\040" +
    "\uffe7\041\uffe7\043\uffe7\047\uffe7\050\uffe7\067\uffe7\070\uffe7" +
    "\001\002\000\014\040\ufff8\041\ufff8\043\ufff8\047\ufff8\050" +
    "\ufff8\001\002\000\012\004\uffe3\014\uffe5\027\uffe3\072\uffe3" +
    "\001\002\000\004\014\371\001\002\000\004\015\372\001" +
    "\002\000\056\004\uffe0\006\uffe0\013\uffe0\016\uffe0\027\uffe0" +
    "\032\uffe0\033\uffe0\034\uffe0\037\uffe0\044\uffe0\045\uffe0\052" +
    "\uffe0\054\uffe0\056\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0" +
    "\064\uffe0\066\uffe0\072\uffe0\073\uffe0\001\002\000\056\004" +
    "\037\006\077\013\070\016\374\027\041\032\061\033\047" +
    "\034\076\037\215\044\060\045\101\052\217\054\230\056" +
    "\226\060\235\061\213\062\211\063\236\064\223\066\065" +
    "\072\221\073\100\001\002\000\012\016\ufff4\067\ufff4\070" +
    "\ufff4\072\ufff4\001\002\000\004\015\376\001\002\000\010" +
    "\004\uffeb\027\uffeb\072\uffeb\001\002\000\010\004\037\027" +
    "\041\072\u0100\001\002\000\012\013\367\044\uff96\045\uff96" +
    "\072\uff96\001\002\000\006\016\ufff5\072\ufff5\001\002\000" +
    "\004\037\u0103\001\002\000\010\004\uffec\027\uffec\072\uffec" +
    "\001\002\000\006\016\u0105\072\027\001\002\000\014\040" +
    "\uffed\041\uffed\043\uffed\047\uffed\050\uffed\001\002\000\014" +
    "\040\uffdd\041\uffdd\043\uffdd\047\uffdd\050\uffdd\001\002\000" +
    "\004\013\u0108\001\002\000\004\014\u0109\001\002\000\004" +
    "\036\u010a\001\002\000\004\004\u010b\001\002\000\004\015" +
    "\u010c\001\002\000\056\004\uffe0\006\uffe0\013\uffe0\027\uffe0" +
    "\032\uffe0\033\uffe0\034\uffe0\037\uffe0\044\uffe0\045\uffe0\052" +
    "\uffe0\054\uffe0\056\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0" +
    "\064\uffe0\065\uffe0\066\uffe0\072\uffe0\073\uffe0\001\002\000" +
    "\056\004\037\006\077\013\070\027\041\032\061\033\047" +
    "\034\076\037\215\044\060\045\101\052\217\054\230\056" +
    "\226\060\235\061\213\062\211\063\236\064\223\065\u010e" +
    "\066\065\072\221\073\100\001\002\000\004\073\u010f\001" +
    "\002\000\004\037\u0110\001\002\000\004\016\u0111\001\002" +
    "\000\004\002\uffc3\001\002\000\010\033\047\034\076\073" +
    "\100\001\002\000\004\037\u0114\001\002\000\014\040\uffde" +
    "\041\uffde\043\uffde\047\uffde\050\uffde\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0113\000\006\002\003\071\004\001\001\000\002\001" +
    "\001\000\024\055\010\056\013\060\007\061\014\064\021" +
    "\065\022\066\005\067\016\070\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\047\u0105\076\041\077\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\025\001\001\000\010\057\030\072\031\073\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\062\164" +
    "\001\001\000\010\047\037\076\041\077\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\043\001\001\000\002" +
    "\001\001\000\046\004\074\005\070\006\066\007\061\010" +
    "\056\011\052\012\072\013\071\014\065\015\062\016\055" +
    "\017\053\020\047\021\051\022\050\023\054\025\073\026" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\016\152\017\053\020\047\022" +
    "\050\023\054\025\073\026\045\001\001\000\032\011\151" +
    "\012\072\013\071\014\065\015\062\016\055\017\053\020" +
    "\047\022\050\023\054\025\073\026\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\004\115" +
    "\005\070\006\066\007\061\010\056\011\052\012\072\013" +
    "\071\014\065\015\062\016\055\017\053\020\047\022\050" +
    "\023\054\025\073\026\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\013\102\014\065\015" +
    "\062\016\055\017\053\020\047\022\050\023\054\025\073" +
    "\026\045\001\001\000\002\001\001\000\020\016\101\017" +
    "\053\020\047\022\050\023\054\025\073\026\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\014\110\015" +
    "\062\016\055\017\053\020\047\022\050\023\054\025\073" +
    "\026\045\001\001\000\024\014\107\015\062\016\055\017" +
    "\053\020\047\022\050\023\054\025\073\026\045\001\001" +
    "\000\024\014\106\015\062\016\055\017\053\020\047\022" +
    "\050\023\054\025\073\026\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\013\114\014" +
    "\065\015\062\016\055\017\053\020\047\022\050\023\054" +
    "\025\073\026\045\001\001\000\026\013\113\014\065\015" +
    "\062\016\055\017\053\020\047\022\050\023\054\025\073" +
    "\026\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\006\136\007\061" +
    "\010\056\011\052\012\072\013\071\014\065\015\062\016" +
    "\055\017\053\020\047\022\050\023\054\025\073\026\045" +
    "\001\001\000\036\007\133\010\056\011\052\012\072\013" +
    "\071\014\065\015\062\016\055\017\053\020\047\022\050" +
    "\023\054\025\073\026\045\001\001\000\040\006\132\007" +
    "\061\010\056\011\052\012\072\013\071\014\065\015\062" +
    "\016\055\017\053\020\047\022\050\023\054\025\073\026" +
    "\045\001\001\000\040\006\131\007\061\010\056\011\052" +
    "\012\072\013\071\014\065\015\062\016\055\017\053\020" +
    "\047\022\050\023\054\025\073\026\045\001\001\000\040" +
    "\006\130\007\061\010\056\011\052\012\072\013\071\014" +
    "\065\015\062\016\055\017\053\020\047\022\050\023\054" +
    "\025\073\026\045\001\001\000\040\006\127\007\061\010" +
    "\056\011\052\012\072\013\071\014\065\015\062\016\055" +
    "\017\053\020\047\022\050\023\054\025\073\026\045\001" +
    "\001\000\040\006\126\007\061\010\056\011\052\012\072" +
    "\013\071\014\065\015\062\016\055\017\053\020\047\022" +
    "\050\023\054\025\073\026\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\010\135\011\052" +
    "\012\072\013\071\014\065\015\062\016\055\017\053\020" +
    "\047\022\050\023\054\025\073\026\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\142\030\143\001\001\000\002\001\001" +
    "\000\044\004\144\005\070\006\066\007\061\010\056\011" +
    "\052\012\072\013\071\014\065\015\062\016\055\017\053" +
    "\020\047\022\050\023\054\025\073\026\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\015\150\016\055\017\053\020\047\022\050\023\054\025" +
    "\073\026\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\017\157\020\047\022\050\023" +
    "\054\025\073\026\045\001\001\000\044\004\155\005\070" +
    "\006\066\007\061\010\056\011\052\012\072\013\071\014" +
    "\065\015\062\016\055\017\053\020\047\022\050\023\054" +
    "\025\073\026\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\057\165\063" +
    "\166\001\001\000\002\001\001\000\004\072\167\001\001" +
    "\000\010\056\170\060\007\061\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\053\174" +
    "\054\175\001\001\000\002\001\001\000\012\047\177\050" +
    "\176\076\041\077\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\074" +
    "\361\001\001\000\006\076\204\077\035\001\001\000\002" +
    "\001\001\000\004\074\206\001\001\000\102\004\211\005" +
    "\070\006\066\007\061\010\056\011\052\012\072\013\071" +
    "\014\065\015\062\016\055\017\053\020\047\022\050\023" +
    "\054\025\073\026\045\031\226\032\233\033\215\035\217" +
    "\036\236\037\231\040\232\041\213\042\224\043\221\044" +
    "\207\045\237\047\230\076\041\077\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\004\310\005\070" +
    "\006\066\007\061\010\056\011\052\012\072\013\071\014" +
    "\065\015\062\016\055\017\053\020\047\022\050\023\054" +
    "\024\311\025\073\026\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\004\241\005\070\006\066\007" +
    "\061\010\056\011\052\012\072\013\071\014\065\015\062" +
    "\016\055\017\053\020\047\022\050\023\054\025\073\026" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\004\245\005\070\006\066\007\061\010" +
    "\056\011\052\012\072\013\071\014\065\015\062\016\055" +
    "\017\053\020\047\022\050\023\054\025\073\026\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\074\250" +
    "\001\001\000\102\004\211\005\070\006\066\007\061\010" +
    "\056\011\052\012\072\013\071\014\065\015\062\016\055" +
    "\017\053\020\047\022\050\023\054\025\073\026\045\031" +
    "\226\032\233\033\215\035\217\036\236\037\231\040\232" +
    "\041\213\042\224\043\221\044\207\045\237\047\230\076" +
    "\041\077\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\004\255\005\070\006\066\007\061\010\056\011" +
    "\052\012\072\013\071\014\065\015\062\016\055\017\053" +
    "\020\047\022\050\023\054\025\073\026\045\001\001\000" +
    "\010\026\260\076\261\077\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\262\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\004\266\005\070\006\066\007" +
    "\061\010\056\011\052\012\072\013\071\014\065\015\062" +
    "\016\055\017\053\020\047\022\050\023\054\025\073\026" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\271\001\001\000\004\034\273\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\276" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\074" +
    "\301\001\001\000\102\004\211\005\070\006\066\007\061" +
    "\010\056\011\052\012\072\013\071\014\065\015\062\016" +
    "\055\017\053\020\047\022\050\023\054\025\073\026\045" +
    "\031\226\032\233\033\215\035\217\036\236\037\231\040" +
    "\232\041\213\042\224\043\221\044\207\045\237\047\230" +
    "\076\041\077\035\001\001\000\002\001\001\000\004\074" +
    "\304\001\001\000\102\004\211\005\070\006\066\007\061" +
    "\010\056\011\052\012\072\013\071\014\065\015\062\016" +
    "\055\017\053\020\047\022\050\023\054\025\073\026\045" +
    "\031\226\032\233\033\215\035\217\036\236\037\231\040" +
    "\232\041\213\042\224\043\221\044\207\045\237\047\230" +
    "\076\041\077\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\004\315\005" +
    "\070\006\066\007\061\010\056\011\052\012\072\013\071" +
    "\014\065\015\062\016\055\017\053\020\047\022\050\023" +
    "\054\025\073\026\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\004\321\005\070\006" +
    "\066\007\061\010\056\011\052\012\072\013\071\014\065" +
    "\015\062\016\055\017\053\020\047\022\050\023\054\025" +
    "\073\026\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\074\324\001\001\000\102\004\211\005\070\006" +
    "\066\007\061\010\056\011\052\012\072\013\071\014\065" +
    "\015\062\016\055\017\053\020\047\022\050\023\054\025" +
    "\073\026\045\031\226\032\233\033\215\035\217\036\236" +
    "\037\231\040\232\041\213\042\224\043\221\044\207\045" +
    "\237\047\230\076\041\077\035\001\001\000\004\075\327" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\074" +
    "\331\001\001\000\102\004\211\005\070\006\066\007\061" +
    "\010\056\011\052\012\072\013\071\014\065\015\062\016" +
    "\055\017\053\020\047\022\050\023\054\025\073\026\045" +
    "\031\226\032\233\033\215\035\217\036\236\037\231\040" +
    "\232\041\213\042\224\043\221\044\207\045\237\047\230" +
    "\076\041\077\035\001\001\000\002\001\001\000\102\004" +
    "\211\005\070\006\066\007\061\010\056\011\052\012\072" +
    "\013\071\014\065\015\062\016\055\017\053\020\047\022" +
    "\050\023\054\025\073\026\045\031\334\032\233\033\215" +
    "\035\217\036\236\037\231\040\232\041\213\042\224\043" +
    "\221\044\207\045\237\047\230\076\041\077\035\001\001" +
    "\000\002\001\001\000\044\004\336\005\070\006\066\007" +
    "\061\010\056\011\052\012\072\013\071\014\065\015\062" +
    "\016\055\017\053\020\047\022\050\023\054\025\073\026" +
    "\045\001\001\000\002\001\001\000\102\004\211\005\070" +
    "\006\066\007\061\010\056\011\052\012\072\013\071\014" +
    "\065\015\062\016\055\017\053\020\047\022\050\023\054" +
    "\025\073\026\045\031\340\032\233\033\215\035\217\036" +
    "\236\037\231\040\232\041\213\042\224\043\221\044\207" +
    "\045\237\047\230\076\041\077\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\074\343\001\001\000\102" +
    "\004\211\005\070\006\066\007\061\010\056\011\052\012" +
    "\072\013\071\014\065\015\062\016\055\017\053\020\047" +
    "\022\050\023\054\025\073\026\045\031\226\032\233\033" +
    "\215\035\217\036\236\037\231\040\232\041\213\042\224" +
    "\043\221\044\207\045\237\047\230\076\041\077\035\001" +
    "\001\000\002\001\001\000\006\076\355\077\035\001\001" +
    "\000\044\004\347\005\070\006\066\007\061\010\056\011" +
    "\052\012\072\013\071\014\065\015\062\016\055\017\053" +
    "\020\047\022\050\023\054\025\073\026\045\001\001\000" +
    "\002\001\001\000\004\026\352\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\356\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\102\004\211\005\070\006\066\007" +
    "\061\010\056\011\052\012\072\013\071\014\065\015\062" +
    "\016\055\017\053\020\047\022\050\023\054\025\073\026" +
    "\045\031\226\032\233\033\215\035\217\036\236\037\231" +
    "\040\232\041\213\042\224\043\221\044\207\045\237\047" +
    "\230\076\041\077\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\053" +
    "\367\054\175\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\074\372\001\001\000\102\004\211\005\070\006" +
    "\066\007\061\010\056\011\052\012\072\013\071\014\065" +
    "\015\062\016\055\017\053\020\047\022\050\023\054\025" +
    "\073\026\045\031\226\032\233\033\215\035\217\036\236" +
    "\037\231\040\232\041\213\042\224\043\221\044\207\045" +
    "\237\047\230\076\041\077\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\376\001\001\000\012\047" +
    "\u0101\057\u0100\076\041\077\035\001\001\000\002\001\001" +
    "\000\004\062\u0103\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\057\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\074\u010c" +
    "\001\001\000\102\004\211\005\070\006\066\007\061\010" +
    "\056\011\052\012\072\013\071\014\065\015\062\016\055" +
    "\017\053\020\047\022\050\023\054\025\073\026\045\031" +
    "\226\032\233\033\215\035\217\036\236\037\231\040\232" +
    "\041\213\042\224\043\221\044\207\045\237\047\230\076" +
    "\041\077\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\u0112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((LexiconUnit)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= S1 MAIN_INS 
            {
              Program RESULT =null;
		List<Definition> array = (List<Definition>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Function m = (Function)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Program(array, m); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S1 ::= S1 DEF 
            {
              List<Definition> RESULT =null;
		List<Definition> array = (List<Definition>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Definition d = (Definition)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 array.add(d); RESULT = array; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S1",55, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S1 ::= 
            {
              List<Definition> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S1",55, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DEF ::= CLASS_DEF 
            {
              Definition RESULT =null;
		Definition c = (Definition)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEF",50, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DEF ::= STRUCT_DEF 
            {
              Definition RESULT =null;
		Definition s = (Definition)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = s; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEF",50, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DEF ::= DEFINE_DEF 
            {
              Definition RESULT =null;
		Definition d = (Definition)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = d; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEF",50, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DEF ::= TYPEDEF_DEF 
            {
              Definition RESULT =null;
		Definition t = (Definition)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = t; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEF",50, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DEF ::= FUNCTION_DEF 
            {
              Definition RESULT =null;
		Function f = (Function)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = f; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEF",50, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CLASS_DEF ::= CLASS_T ID BRACKET_OPEN DECLARATIONS_CLASS CLASS_INIT BRACKET_CLOSE 
            {
              Definition RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<Declaration> dec_class = (List<Declaration>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ClassFunctions class_func = (ClassFunctions)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Class_Def(id.lexeme, dec_class, class_func); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CLASS_DEF",51, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CLASS_INIT ::= CONSTRUCTOR MORE_CONSTRUCTORS METHODS 
            {
              ClassFunctions RESULT =null;
		Function c = (Function)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		List<Function> constructors = (List<Function>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<Function> methods = (List<Function>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 List<Function> allConstructors = new ArrayList<>(); allConstructors.add(c); allConstructors.addAll(constructors); RESULT = new ClassFunctions(allConstructors, methods); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CLASS_INIT",57, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MORE_CONSTRUCTORS ::= MORE_CONSTRUCTORS CONSTRUCTOR 
            {
              List<Function> RESULT =null;
		List<Function> array = (List<Function>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Function c = (Function)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 array.add(c); RESULT = array; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_CONSTRUCTORS",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MORE_CONSTRUCTORS ::= 
            {
              List<Function> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_CONSTRUCTORS",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONSTRUCTOR ::= ID PARENTESIS_OPEN ARGUMENTS PARENTESIS_CLOSE BRACKET_OPEN FUNCTION_BODY BRACKET_CLOSE 
            {
              Function RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		List<Declaration> args = (List<Declaration>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Function(id.lexeme, args, null, body, null); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // METHODS ::= METHODS VISIBILITY FUNCTION_DEF 
            {
              List<Function> RESULT =null;
		List<Function> array = (List<Function>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Visibility vis = (Visibility)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Function func = (Function)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 func.setVisibility(vis); array.add(func); RESULT = array; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("METHODS",49, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // METHODS ::= 
            {
              List<Function> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("METHODS",49, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VISIBILITY ::= PUBLIC 
            {
              Visibility RESULT =null;
		 RESULT = new Public_Vis(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VISIBILITY",56, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VISIBILITY ::= PRIVATE 
            {
              Visibility RESULT =null;
		 RESULT = new Private_Vis(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VISIBILITY",56, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARATIONS_CLASS ::= DECLARATIONS_CLASS VISIBILITY DECLARATION SEMICOLON 
            {
              List<Declaration> RESULT =null;
		List<Declaration> array = (List<Declaration>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Visibility vis = (Visibility)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Declaration dec = (Declaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 dec.setVisibility(vis); array.add(dec); RESULT = array; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS_CLASS",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARATIONS_CLASS ::= 
            {
              List<Declaration> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS_CLASS",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STRUCT_DEF ::= STRUCT_T ID BRACKET_OPEN DECLARATIONS_STRUCT CONSTRUCTOR MORE_CONSTRUCTORS BRACKET_CLOSE 
            {
              Definition RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		List<Declaration> declarations = (List<Declaration>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Function c = (Function)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		List<Function> constructors = (List<Function>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 List<Function> allConstructors = new ArrayList<>(); allConstructors.add(c); allConstructors.addAll(constructors); RESULT = new Struct(id.lexeme, declarations, allConstructors); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("STRUCT_DEF",52, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARATIONS_STRUCT ::= DECLARATIONS_STRUCT DECLARATION SEMICOLON 
            {
              List<Declaration> RESULT =null;
		List<Declaration> array = (List<Declaration>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Declaration dec = (Declaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 array.add(dec); RESULT = array; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS_STRUCT",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARATIONS_STRUCT ::= 
            {
              List<Declaration> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS_STRUCT",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNCTION_DEF ::= TYPED_FUNCTION 
            {
              Function RESULT =null;
		Function func = (Function)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = func; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUNCTION_DEF",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNCTION_DEF ::= VOID_FUNCTION 
            {
              Function RESULT =null;
		Function func = (Function)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = func; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUNCTION_DEF",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TYPED_FUNCTION ::= FUNC_T ID PARENTESIS_OPEN ARGUMENTS PARENTESIS_CLOSE COLON TYPE BRACKET_OPEN FUNCTION_BODY RETURN RETURN_VALUE SEMICOLON BRACKET_CLOSE 
            {
              Function RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-11)).value;
		List<Declaration> args = (List<Declaration>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-9)).value;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Function(id.lexeme, args, t, body, e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPED_FUNCTION",46, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VOID_FUNCTION ::= FUNC_T ID PARENTESIS_OPEN ARGUMENTS PARENTESIS_CLOSE BRACKET_OPEN FUNCTION_BODY RETURN SEMICOLON BRACKET_CLOSE 
            {
              Function RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).value;
		List<Declaration> args = (List<Declaration>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		 RESULT = new Function(id.lexeme, args, null, body, null); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VOID_FUNCTION",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ARGUMENTS ::= MORE_ARGUMENTS ARGUMENT 
            {
              List<Declaration> RESULT =null;
		List<Declaration> array = (List<Declaration>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Declaration arg = (Declaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 array.add(arg); RESULT = array; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTS",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ARGUMENTS ::= 
            {
              List<Declaration> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTS",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MORE_ARGUMENTS ::= MORE_ARGUMENTS ARGUMENT COMMA 
            {
              List<Declaration> RESULT =null;
		List<Declaration> array = (List<Declaration>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Declaration arg = (Declaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 array.add(arg); RESULT = array; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_ARGUMENTS",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MORE_ARGUMENTS ::= 
            {
              List<Declaration> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_ARGUMENTS",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ARGUMENT ::= DECLARATION 
            {
              Declaration RESULT =null;
		Declaration dec = (Declaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = dec; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENT",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUNCTION_BODY ::= FUNCTION_BODY SENTENCE 
            {
              Block RESULT =null;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Sentence s = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 body.add_instruction(s); RESULT = body; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUNCTION_BODY",58, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUNCTION_BODY ::= 
            {
              Block RESULT =null;
		 RESULT = new Block(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUNCTION_BODY",58, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // RETURN_VALUE ::= EXPRESSION 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RETURN_VALUE",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DEFINE_DEF ::= DEFINE ID LITERAL SEMICOLON 
            {
              Definition RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Define(id.lexeme, e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEFINE_DEF",53, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TYPEDEF_DEF ::= TYPEDEF DECLARATION 
            {
              Definition RESULT =null;
		Declaration dec = (Declaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Typedef(dec); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPEDEF_DEF",54, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARATION ::= TYPE ID ARRAY_CONSTRUCTOR 
            {
              Declaration RESULT =null;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Array_Type array = (Array_Type)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = Declaration.manageDeclaration(t, id.lexeme, array); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ARRAY_CONSTRUCTOR ::= ARRAY_CONSTRUCTOR SQ_BRACKET_OPEN OPT_INTEGER SQ_BRACKET_CLOSE 
            {
              Array_Type RESULT =null;
		Array_Type prevArray = (Array_Type)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 Array_Type newArray = new Array_Type(i); RESULT = Array_Type.updateTypes(newArray, prevArray); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRAY_CONSTRUCTOR",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ARRAY_CONSTRUCTOR ::= 
            {
              Array_Type RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRAY_CONSTRUCTOR",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ID_PARENTESIS ::= ID PARENTESIS_OPEN EXPRESSIONS PARENTESIS_CLOSE 
            {
              Expression RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		List<Expression> expressions = (List<Expression>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Parentesis_Op(id.lexeme, expressions); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ID_PARENTESIS",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARATION_AND_ASSIGNATION_INS ::= DECLARATION ASSIGNATION_OP EXPRESSION SEMICOLON 
            {
              Sentence RESULT =null;
		Declaration dec = (Declaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new DeclarationAndAssignation(dec, e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION_AND_ASSIGNATION_INS",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARATION_AND_ASSIGNATION_INS ::= DECLARATION ASSIGNATION_OP NEW_OP TYPE ARRAY_CONSTRUCTOR SEMICOLON 
            {
              Sentence RESULT =null;
		Declaration dec = (Declaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Array_Type array = (Array_Type)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new DeclarationAndAssignation(dec, new New_Op(Declaration.manageType(t, array))); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION_AND_ASSIGNATION_INS",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARATION_AND_ASSIGNATION_INS ::= DECLARATION ASSIGNATION_OP NEW_OP ID_PARENTESIS SEMICOLON 
            {
              Sentence RESULT =null;
		Declaration dec = (Declaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new DeclarationAndAssignation(dec, e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION_AND_ASSIGNATION_INS",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ASSIGNATION_INS ::= EXPRESSION ASSIGNATION_OP EXPRESSION SEMICOLON 
            {
              Sentence RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Assignation_Ins(iz, dc) ; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASSIGNATION_INS",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASSIGNATION_INS ::= EXPRESSION NEW_OP TYPE ARRAY_CONSTRUCTOR SEMICOLON 
            {
              Sentence RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Array_Type array = (Array_Type)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Assignation_Ins(iz, new New_Op(Declaration.manageType(t, array))); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASSIGNATION_INS",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ASSIGNATION_INS ::= EXPRESSION ASSIGNATION_OP NEW_OP ID_PARENTESIS SEMICOLON 
            {
              Sentence RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Assignation_Ins(iz, dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASSIGNATION_INS",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IF_INS ::= IF PARENTESIS_OPEN EXPRESSION PARENTESIS_CLOSE BRACKET_OPEN FUNCTION_BODY BRACKET_CLOSE ELSE_INS 
            {
              Sentence RESULT =null;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		Block if_body = (Block)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Block else_body = (Block)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new If_Ins(cond, if_body, else_body); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IF_INS",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ELSE_INS ::= ELSE BRACKET_OPEN FUNCTION_BODY BRACKET_CLOSE 
            {
              Block RESULT =null;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = body; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ELSE_INS",59, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ELSE_INS ::= 
            {
              Block RESULT =null;
		 RESULT = new Block(new ArrayList<>()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ELSE_INS",59, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SWITCH_INS ::= SWITCH PARENTESIS_OPEN EXPRESSION PARENTESIS_CLOSE BRACKET_OPEN CASES_INS DEFAULT_CASE BRACKET_CLOSE 
            {
              Sentence RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		List<Sentence> array = (List<Sentence>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Sentence default_case = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 array.add(default_case); RESULT = new Switch_Ins(e, new Block(array)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SWITCH_INS",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CASES_INS ::= CASES_INS CASE PARENTESIS_OPEN LITERAL PARENTESIS_CLOSE COLON FUNCTION_BODY 
            {
              List<Sentence> RESULT =null;
		List<Sentence> array = (List<Sentence>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 array.add(new Case_Ins(cond, body)) ; RESULT = array; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASES_INS",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CASES_INS ::= 
            {
              List<Sentence> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASES_INS",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DEFAULT_CASE ::= DEFAULT COLON FUNCTION_BODY BREAK SEMICOLON 
            {
              Sentence RESULT =null;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 body.add_instruction(new Break_Ins()); RESULT = new Default_Ins(body); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEFAULT_CASE",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // WHILE_INS ::= WHILE PARENTESIS_OPEN EXPRESSION PARENTESIS_CLOSE BRACKET_OPEN FUNCTION_BODY BRACKET_CLOSE 
            {
              Sentence RESULT =null;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new While_Ins(cond, body); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("WHILE_INS",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BREAK_INS ::= BREAK SEMICOLON 
            {
              Sentence RESULT =null;
		 RESULT = new Break_Ins(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BREAK_INS",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONTINUE_INS ::= CONTINUE SEMICOLON 
            {
              Sentence RESULT =null;
		 RESULT = new Continue_Ins(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONTINUE_INS",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FOR_INS ::= FOR PARENTESIS_OPEN SENTENCE SEMICOLON EXPRESSION SEMICOLON SENTENCE PARENTESIS_CLOSE BRACKET_OPEN FUNCTION_BODY BRACKET_CLOSE 
            {
              Sentence RESULT =null;
		Sentence s1 = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).value;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		Sentence s2 = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new For_Ins(s1, cond, s2, body); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FOR_INS",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IO_INS ::= INPUT_INS 
            {
              Sentence RESULT =null;
		Sentence s = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = s; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IO_INS",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IO_INS ::= OUTPUT_INS 
            {
              Sentence RESULT =null;
		Sentence s = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = s; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IO_INS",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INPUT_INS ::= INPUT_FUNC PARENTESIS_OPEN EXPRESSION PARENTESIS_CLOSE SEMICOLON 
            {
              Sentence RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Input_Ins(e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INPUT_INS",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OUTPUT_INS ::= OUTPUT_FUNC PARENTESIS_OPEN EXPRESSION PARENTESIS_CLOSE SEMICOLON 
            {
              Sentence RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Output_Ins(e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OUTPUT_INS",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // MAIN_INS ::= FUNC_T MAIN PARENTESIS_OPEN PARENTESIS_CLOSE COLON INT_T BRACKET_OPEN FUNCTION_BODY RETURN INTEGER SEMICOLON BRACKET_CLOSE 
            {
              Function RESULT =null;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Function("main", new ArrayList<>(), new Int_Type(), body, new Int_Value(i.lexeme)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MAIN_INS",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESSION ::= B0 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e ; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPRESSION",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // B0 ::= B1 LESS_OR_EQ_OP B1 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Less_Or_Eq_Op(iz, dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // B0 ::= B1 GREATER_OR_EQ_OP B1 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Greater_Or_Eq_Op(iz, dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // B0 ::= B1 LESS_OP B1 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Less_Op(iz, dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // B0 ::= B1 GREATER_OP B1 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Greater_Op(iz, dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // B0 ::= B1 EQUAL_OP B1 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Equal_Op(iz, dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // B0 ::= B1 NOT_EQUAL_OP B1 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Not_Equal_Op(iz, dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // B0 ::= B1 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // B1 ::= B1 OR_OP B2 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Or_Op(iz, dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B1",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // B1 ::= B2 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B1",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // B2 ::= B2 AND_OP B3 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new And_Op(iz, dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B2",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // B2 ::= B3 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B2",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // B3 ::= NOT_OP B4 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Not_Op(e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B3",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // B3 ::= B4 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B3",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // B4 ::= E0 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B4",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E0 ::= E0 SUM_OP E1 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Sum_Op(iz, dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E0 ::= E0 SUBS_OP E1 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Subs_Op(iz, dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E0 ::= SUBS_OP E1 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Minus_Op(e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E0 ::= E1 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E1 ::= E1 MULT_OP E2 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Mult_Op(iz, dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E1 ::= E1 DIV_OP E2 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Div_Op(iz, dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E1 ::= E1 MOD_OP E2 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Mod_Op(iz, dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E1 ::= E2 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E2 ::= E3 POW_OP E3 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Pow_Op(iz, dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E2 ::= E3 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E3 ::= POINTER_OP E4 
            {
              Expression RESULT =null;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Pointer_Op(dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E3 ::= REFERENCE_OP E4 
            {
              Expression RESULT =null;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Reference_Op(dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E3 ::= E4 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E4 ::= E5 FIELD_ACCESS E5 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Field_Access_Op(iz, dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E4 ::= E5 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E5 ::= E5 SQ_BRACKET_OPEN EXPRESSION SQ_BRACKET_CLOSE 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Sq_Bracket_Op(iz, dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E5 ::= E6 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E6 ::= PARENTESIS_OPEN EXPRESSION PARENTESIS_CLOSE 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E6 ::= TERMINAL 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESSIONS ::= MORE_EXPRESSIONS EXPRESSION 
            {
              List<Expression> RESULT =null;
		List<Expression> array = (List<Expression>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 array.add(e); RESULT = array; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPRESSIONS",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESSIONS ::= 
            {
              List<Expression> RESULT =null;
		 RESULT = new ArrayList<Expression>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPRESSIONS",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // MORE_EXPRESSIONS ::= MORE_EXPRESSIONS EXPRESSION COMMA 
            {
              List<Expression> RESULT =null;
		List<Expression> array = (List<Expression>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 array.add(e); RESULT = array; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_EXPRESSIONS",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // MORE_EXPRESSIONS ::= 
            {
              List<Expression> RESULT =null;
		 RESULT = new ArrayList<Expression>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_EXPRESSIONS",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // TERMINAL ::= LITERAL 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TERMINAL",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TERMINAL ::= ID_EX 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TERMINAL",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // TYPE ::= BASIC_TYPE REFERENCE_OP 
            {
              Type RESULT =null;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Reference_Type(t); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",60, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TYPE ::= BASIC_TYPE 
            {
              Type RESULT =null;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = t; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",60, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // BASIC_TYPE ::= INT_T 
            {
              Type RESULT =null;
		 RESULT = new Int_Type(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BASIC_TYPE",61, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // BASIC_TYPE ::= BOOLEAN_T 
            {
              Type RESULT =null;
		 RESULT = new Bool_Type(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BASIC_TYPE",61, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // BASIC_TYPE ::= ID 
            {
              Type RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Id_Type(id.lexeme); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BASIC_TYPE",61, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // BASIC_TYPE ::= BASIC_TYPE POINTER_OP 
            {
              Type RESULT =null;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Pointer_Type(t); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BASIC_TYPE",61, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OPT_INTEGER ::= EXPRESSION 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPT_INTEGER",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OPT_INTEGER ::= 
            {
              Expression RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPT_INTEGER",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SENTENCE ::= DECLARATION SEMICOLON 
            {
              Sentence RESULT =null;
		Declaration e = (Declaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SENTENCE ::= ASSIGNATION_INS 
            {
              Sentence RESULT =null;
		Sentence e = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SENTENCE ::= DECLARATION_AND_ASSIGNATION_INS 
            {
              Sentence RESULT =null;
		Sentence e = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SENTENCE ::= IF_INS 
            {
              Sentence RESULT =null;
		Sentence e = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SENTENCE ::= SWITCH_INS 
            {
              Sentence RESULT =null;
		Sentence e = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SENTENCE ::= WHILE_INS 
            {
              Sentence RESULT =null;
		Sentence e = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SENTENCE ::= FOR_INS 
            {
              Sentence RESULT =null;
		Sentence e = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SENTENCE ::= BREAK_INS 
            {
              Sentence RESULT =null;
		Sentence e = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SENTENCE ::= CONTINUE_INS 
            {
              Sentence RESULT =null;
		Sentence e = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SENTENCE ::= IO_INS 
            {
              Sentence RESULT =null;
		Sentence e = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SENTENCE ::= SEMICOLON 
            {
              Sentence RESULT =null;
		 RESULT = new Empty_Ins(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ID_EX ::= THIS FIELD_ACCESS ID 
            {
              Expression RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new This_Op(id.lexeme); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ID_EX",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ID_EX ::= ID 
            {
              Expression RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Id_Value(id.lexeme); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ID_EX",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ID_EX ::= ID_PARENTESIS 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e ; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ID_EX",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // LITERAL ::= INTEGER 
            {
              Expression RESULT =null;
		TokenValue e = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Int_Value(e.lexeme); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LITERAL",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // LITERAL ::= TRUE 
            {
              Expression RESULT =null;
		 RESULT = new Bool_Value(true); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LITERAL",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // LITERAL ::= FALSE 
            {
              Expression RESULT =null;
		 RESULT = new Bool_Value(false); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LITERAL",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

