
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Wed Apr 03 19:13:52 CEST 2024
//----------------------------------------------------

package syntax;

import java_cup.runtime.*;
import lexicon.AnalizadorLexicoTiny;
import lexicon.LexiconUnit;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Wed Apr 03 19:13:52 CEST 2024
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\177\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\005\007\000\002\006\005\000\002\006\003\000\002" +
    "\007\012\000\002\010\003\000\002\010\003\000\002\011" +
    "\005\000\002\011\002\000\002\012\007\000\002\013\004" +
    "\000\002\013\003\000\002\014\011\000\002\015\005\000" +
    "\002\016\003\000\002\016\003\000\002\017\017\000\002" +
    "\020\014\000\002\021\004\000\002\021\005\000\002\022" +
    "\004\000\002\022\002\000\002\023\005\000\002\023\002" +
    "\000\002\024\004\000\002\024\002\000\002\025\003\000" +
    "\002\026\006\000\002\027\006\000\002\030\007\000\002" +
    "\030\006\000\002\031\003\000\002\031\004\000\002\031" +
    "\004\000\002\032\012\000\002\033\006\000\002\033\002" +
    "\000\002\034\012\000\002\035\011\000\002\035\002\000" +
    "\002\036\007\000\002\037\011\000\002\040\004\000\002" +
    "\041\004\000\002\042\003\000\002\042\003\000\002\043" +
    "\007\000\002\044\007\000\002\045\016\000\002\046\003" +
    "\000\002\047\005\000\002\047\003\000\002\050\005\000" +
    "\002\050\003\000\002\051\005\000\002\051\003\000\002" +
    "\052\004\000\002\052\003\000\002\053\003\000\002\054" +
    "\005\000\002\054\004\000\002\054\003\000\002\055\005" +
    "\000\002\055\003\000\002\056\005\000\002\056\003\000" +
    "\002\057\004\000\002\057\003\000\002\060\005\000\002" +
    "\060\003\000\002\061\006\000\002\061\003\000\002\062" +
    "\005\000\002\062\003\000\002\063\003\000\002\063\003" +
    "\000\002\063\003\000\002\063\003\000\002\063\003\000" +
    "\002\063\003\000\002\064\003\000\002\065\003\000\002" +
    "\066\003\000\002\067\003\000\002\067\003\000\002\070" +
    "\003\000\002\071\003\000\002\071\003\000\002\072\003" +
    "\000\002\073\003\000\002\074\003\000\002\075\004\000" +
    "\002\075\002\000\002\076\005\000\002\076\002\000\002" +
    "\077\003\000\002\077\003\000\002\077\003\000\002\100" +
    "\006\000\002\101\003\000\002\101\003\000\002\101\003" +
    "\000\002\101\004\000\002\101\006\000\002\102\003\000" +
    "\002\102\002\000\002\103\003\000\002\103\003\000\002" +
    "\103\003\000\002\103\003\000\002\103\003\000\002\103" +
    "\003\000\002\103\003\000\002\103\003\000\002\104\005" +
    "\000\002\104\003\000\002\105\003\000\002\105\003\000" +
    "\002\105\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\014\041\ufffd\042\ufffd\044\ufffd\050\ufffd\051" +
    "\ufffd\001\002\000\004\002\u0101\001\002\000\014\041\021" +
    "\042\020\044\014\050\016\051\006\001\002\000\004\005" +
    "\376\001\002\000\014\041\ufffa\042\ufffa\044\ufffa\050\ufffa" +
    "\051\ufffa\001\002\000\024\017\uffeb\041\uffeb\042\uffeb\044" +
    "\uffeb\050\uffeb\051\uffeb\067\uffeb\070\uffeb\071\uffeb\001\002" +
    "\000\004\002\001\001\002\000\014\041\uffff\042\uffff\044" +
    "\uffff\050\uffff\051\uffff\001\002\000\014\041\ufff9\042\ufff9" +
    "\044\ufff9\050\ufff9\051\ufff9\001\002\000\004\005\354\001" +
    "\002\000\014\041\ufffb\042\ufffb\044\ufffb\050\ufffb\051\ufffb" +
    "\001\002\000\004\005\351\001\002\000\024\017\uffea\041" +
    "\uffea\042\uffea\044\uffea\050\uffea\051\uffea\067\uffea\070\uffea" +
    "\071\uffea\001\002\000\004\005\333\001\002\000\004\005" +
    "\274\001\002\000\016\041\ufffe\042\ufffe\044\ufffe\050\ufffe" +
    "\051\ufffe\071\024\001\002\000\014\041\ufffc\042\ufffc\044" +
    "\ufffc\050\ufffc\051\ufffc\001\002\000\004\014\025\001\002" +
    "\000\004\015\026\001\002\000\004\037\027\001\002\000" +
    "\004\006\030\001\002\000\004\016\031\001\002\000\034" +
    "\005\uffe0\006\uffe0\030\uffe0\040\uffe0\053\uffe0\055\uffe0\057" +
    "\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0" +
    "\001\002\000\034\005\052\006\060\030\042\040\036\053" +
    "\051\055\046\057\057\061\041\062\034\063\061\064\054" +
    "\065\044\066\053\001\002\000\042\005\uff8d\006\uff8d\017" +
    "\uff8d\030\uff8d\040\uff8d\053\uff8d\055\uff8d\056\uff8d\057\uff8d" +
    "\060\uff8d\061\uff8d\062\uff8d\063\uff8d\064\uff8d\065\uff8d\066" +
    "\uff8d\001\002\000\004\040\273\001\002\000\042\005\uff8a" +
    "\006\uff8a\017\uff8a\030\uff8a\040\uff8a\053\uff8a\055\uff8a\056" +
    "\uff8a\057\uff8a\060\uff8a\061\uff8a\062\uff8a\063\uff8a\064\uff8a" +
    "\065\uff8a\066\uff8a\001\002\000\042\005\uff88\006\uff88\017" +
    "\uff88\030\uff88\040\uff88\053\uff88\055\uff88\056\uff88\057\uff88" +
    "\060\uff88\061\uff88\062\uff88\063\uff88\064\uff88\065\uff88\066" +
    "\uff88\001\002\000\042\005\uff8b\006\uff8b\017\uff8b\030\uff8b" +
    "\040\uff8b\053\uff8b\055\uff8b\056\uff8b\057\uff8b\060\uff8b\061" +
    "\uff8b\062\uff8b\063\uff8b\064\uff8b\065\uff8b\066\uff8b\001\002" +
    "\000\042\005\uff8c\006\uff8c\017\uff8c\030\uff8c\040\uff8c\053" +
    "\uff8c\055\uff8c\056\uff8c\057\uff8c\060\uff8c\061\uff8c\062\uff8c" +
    "\063\uff8c\064\uff8c\065\uff8c\066\uff8c\001\002\000\004\014" +
    "\265\001\002\000\016\005\uff95\016\uff95\020\uff95\040\uff95" +
    "\045\uff95\046\uff95\001\002\000\042\005\uff8f\006\uff8f\017" +
    "\uff8f\030\uff8f\040\uff8f\053\uff8f\055\uff8f\056\uff8f\057\uff8f" +
    "\060\uff8f\061\uff8f\062\uff8f\063\uff8f\064\uff8f\065\uff8f\066" +
    "\uff8f\001\002\000\004\004\262\001\002\000\042\005\uff8e" +
    "\006\uff8e\017\uff8e\030\uff8e\040\uff8e\053\uff8e\055\uff8e\056" +
    "\uff8e\057\uff8e\060\uff8e\061\uff8e\062\uff8e\063\uff8e\064\uff8e" +
    "\065\uff8e\066\uff8e\001\002\000\004\014\240\001\002\000" +
    "\004\052\235\001\002\000\042\005\uffcd\006\uffcd\017\uffcd" +
    "\030\uffcd\040\uffcd\053\uffcd\055\uffcd\056\uffcd\057\uffcd\060" +
    "\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd" +
    "\001\002\000\004\014\222\001\002\000\016\005\uff94\014" +
    "\uff86\020\uff94\040\uff94\045\uff94\052\uff86\001\002\000\004" +
    "\043\220\001\002\000\004\014\214\001\002\000\010\005" +
    "\072\020\074\045\073\001\002\000\042\005\uffe1\006\uffe1" +
    "\017\uffe1\030\uffe1\040\uffe1\053\uffe1\055\uffe1\056\uffe1\057" +
    "\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065\uffe1" +
    "\066\uffe1\001\002\000\004\040\071\001\002\000\016\005" +
    "\uff96\016\uff96\020\uff96\040\uff96\045\uff96\046\uff96\001\002" +
    "\000\004\014\064\001\002\000\042\005\uff89\006\uff89\017" +
    "\uff89\030\uff89\040\uff89\053\uff89\055\uff89\056\uff89\057\uff89" +
    "\060\uff89\061\uff89\062\uff89\063\uff89\064\uff89\065\uff89\066" +
    "\uff89\001\002\000\042\005\uffcc\006\uffcc\017\uffcc\030\uffcc" +
    "\040\uffcc\053\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061" +
    "\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc\001\002" +
    "\000\006\005\065\066\053\001\002\000\052\007\uff86\010" +
    "\uff86\011\uff86\012\uff86\013\uff86\014\uff86\015\uff86\020\uff86" +
    "\021\uff86\022\uff86\023\uff86\024\uff86\025\uff86\026\uff86\027" +
    "\uff86\031\uff86\032\uff86\036\uff86\040\uff86\043\uff86\001\002" +
    "\000\004\015\067\001\002\000\004\040\070\001\002\000" +
    "\042\005\uffcb\006\uffcb\017\uffcb\030\uffcb\040\uffcb\053\uffcb" +
    "\055\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063" +
    "\uffcb\064\uffcb\065\uffcb\066\uffcb\001\002\000\042\005\uffcf" +
    "\006\uffcf\017\uffcf\030\uffcf\040\uffcf\053\uffcf\055\uffcf\056" +
    "\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf" +
    "\065\uffcf\066\uffcf\001\002\000\004\052\100\001\002\000" +
    "\016\005\uff93\016\uff93\020\uff93\040\uff93\045\uff93\046\uff93" +
    "\001\002\000\006\004\075\021\uff90\001\002\000\004\021" +
    "\uff91\001\002\000\004\021\077\001\002\000\016\005\uff92" +
    "\016\uff92\020\uff92\040\uff92\045\uff92\046\uff92\001\002\000" +
    "\026\004\134\005\065\010\133\014\120\033\112\034\101" +
    "\035\132\045\111\047\130\066\053\001\002\000\050\007" +
    "\uff84\010\uff84\011\uff84\012\uff84\013\uff84\015\uff84\020\uff84" +
    "\021\uff84\022\uff84\023\uff84\024\uff84\025\uff84\026\uff84\027" +
    "\uff84\031\uff84\032\uff84\036\uff84\040\uff84\043\uff84\001\002" +
    "\000\052\007\uff99\010\uff99\011\uff99\012\uff99\013\uff99\014" +
    "\142\015\uff99\020\uff99\021\uff99\022\uff99\023\uff99\024\uff99" +
    "\025\uff99\026\uff99\027\uff99\031\uff99\032\uff99\036\uff99\040" +
    "\uff99\043\uff99\001\002\000\050\007\uffb2\010\uffb2\011\uffb2" +
    "\012\uffb2\013\uffb2\015\uffb2\020\uffb2\021\uffb2\022\uffb2\023" +
    "\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\031\uffb2\032\uffb2" +
    "\036\uffb2\040\uffb2\043\uffb2\001\002\000\050\007\uff9a\010" +
    "\uff9a\011\uff9a\012\uff9a\013\uff9a\015\uff9a\020\uff9a\021\uff9a" +
    "\022\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\027\uff9a\031" +
    "\uff9a\032\uff9a\036\uff9a\040\uff9a\043\uff9a\001\002\000\032" +
    "\015\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026" +
    "\uffc0\027\uffc0\031\uffc0\032\uffc0\036\uffc0\040\uffc0\001\002" +
    "\000\050\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\015" +
    "\uffb4\020\210\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4" +
    "\026\uffb4\027\uffb4\031\uffb4\032\uffb4\036\uffb4\040\uffb4\043" +
    "\207\001\002\000\032\015\uffc2\021\uffc2\022\uffc2\023\uffc2" +
    "\024\uffc2\025\uffc2\026\uffc2\027\uffc2\031\uffc2\032\uffc2\036" +
    "\uffc2\040\uffc2\001\002\000\044\007\uffb6\010\uffb6\011\uffb6" +
    "\012\uffb6\013\uffb6\015\uffb6\021\uffb6\022\uffb6\023\uffb6\024" +
    "\uffb6\025\uffb6\026\uffb6\027\uffb6\031\uffb6\032\uffb6\036\uffb6" +
    "\040\uffb6\001\002\000\016\004\uffa0\005\uffa0\014\uffa0\034" +
    "\uffa0\035\uffa0\066\uffa0\001\002\000\022\004\uffa7\005\uffa7" +
    "\010\uffa7\014\uffa7\034\uffa7\035\uffa7\045\uffa7\066\uffa7\001" +
    "\002\000\032\015\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4" +
    "\025\uffc4\026\uffc4\027\uffc4\031\201\032\uffc4\036\uffc4\040" +
    "\uffc4\001\002\000\044\007\uffb8\010\uffb8\011\uffb8\012\uffb8" +
    "\013\204\015\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025" +
    "\uffb8\026\uffb8\027\uffb8\031\uffb8\032\uffb8\036\uffb8\040\uffb8" +
    "\001\002\000\042\007\uffba\010\uffba\011\uffba\012\uffba\015" +
    "\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba" +
    "\027\uffba\031\uffba\032\uffba\036\uffba\040\uffba\001\002\000" +
    "\030\015\uffc6\021\uffc6\022\165\023\170\024\173\025\166" +
    "\026\171\027\172\032\167\036\uffc6\040\uffc6\001\002\000" +
    "\020\004\134\005\065\014\120\034\101\035\132\045\111" +
    "\066\053\001\002\000\024\004\134\005\065\010\133\014" +
    "\120\033\112\034\101\035\132\045\111\066\053\001\002" +
    "\000\010\015\uffc8\036\uffc8\040\uffc8\001\002\000\042\007" +
    "\uffbc\010\uffbc\011\156\012\157\015\uffbc\021\uffbc\022\uffbc" +
    "\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\031\uffbc\032" +
    "\uffbc\036\uffbc\040\uffbc\001\002\000\036\007\152\010\153" +
    "\015\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026" +
    "\uffbf\027\uffbf\031\uffbf\032\uffbf\036\uffbf\040\uffbf\001\002" +
    "\000\050\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\015" +
    "\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0" +
    "\026\uffb0\027\uffb0\031\uffb0\032\uffb0\036\uffb0\040\uffb0\043" +
    "\uffb0\001\002\000\022\004\134\005\065\010\133\014\120" +
    "\034\101\035\132\045\111\066\053\001\002\000\016\004" +
    "\134\005\065\014\120\034\101\035\132\066\053\001\002" +
    "\000\004\040\uffda\001\002\000\012\005\052\006\060\030" +
    "\042\066\053\001\002\000\050\007\uff98\010\uff98\011\uff98" +
    "\012\uff98\013\uff98\015\uff98\020\uff98\021\uff98\022\uff98\023" +
    "\uff98\024\uff98\025\uff98\026\uff98\027\uff98\031\uff98\032\uff98" +
    "\036\uff98\040\uff98\043\uff98\001\002\000\050\007\uff83\010" +
    "\uff83\011\uff83\012\uff83\013\uff83\015\uff83\020\uff83\021\uff83" +
    "\022\uff83\023\uff83\024\uff83\025\uff83\026\uff83\027\uff83\031" +
    "\uff83\032\uff83\036\uff83\040\uff83\043\uff83\001\002\000\020" +
    "\004\uffa4\005\uffa4\014\uffa4\034\uffa4\035\uffa4\045\uffa4\066" +
    "\uffa4\001\002\000\050\007\uff85\010\uff85\011\uff85\012\uff85" +
    "\013\uff85\015\uff85\020\uff85\021\uff85\022\uff85\023\uff85\024" +
    "\uff85\025\uff85\026\uff85\027\uff85\031\uff85\032\uff85\036\uff85" +
    "\040\uff85\043\uff85\001\002\000\004\040\136\001\002\000" +
    "\042\005\uffdc\006\uffdc\017\uffdc\030\uffdc\040\uffdc\053\uffdc" +
    "\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063" +
    "\uffdc\064\uffdc\065\uffdc\066\uffdc\001\002\000\004\040\uffd8" +
    "\001\002\000\004\014\142\001\002\000\010\020\074\040" +
    "\uffd9\045\073\001\002\000\026\004\uff9b\005\uff9b\010\uff9b" +
    "\014\uff9b\015\uff9d\033\uff9b\034\uff9b\035\uff9b\045\uff9b\066" +
    "\uff9b\001\002\000\004\015\147\001\002\000\024\004\134" +
    "\005\065\010\133\014\120\033\112\034\101\035\132\045" +
    "\111\066\053\001\002\000\006\015\uff9e\036\146\001\002" +
    "\000\024\004\uff9c\005\uff9c\010\uff9c\014\uff9c\033\uff9c\034" +
    "\uff9c\035\uff9c\045\uff9c\066\uff9c\001\002\000\050\007\uff97" +
    "\010\uff97\011\uff97\012\uff97\013\uff97\015\uff97\020\uff97\021" +
    "\uff97\022\uff97\023\uff97\024\uff97\025\uff97\026\uff97\027\uff97" +
    "\031\uff97\032\uff97\036\uff97\040\uff97\043\uff97\001\002\000" +
    "\044\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\015\uffb7" +
    "\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027" +
    "\uffb7\031\uffb7\032\uffb7\036\uffb7\040\uffb7\001\002\000\032" +
    "\015\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026" +
    "\uffc1\027\uffc1\031\uffc1\032\uffc1\036\uffc1\040\uffc1\001\002" +
    "\000\020\004\uffa6\005\uffa6\014\uffa6\034\uffa6\035\uffa6\045" +
    "\uffa6\066\uffa6\001\002\000\020\004\uffa5\005\uffa5\014\uffa5" +
    "\034\uffa5\035\uffa5\045\uffa5\066\uffa5\001\002\000\020\004" +
    "\134\005\065\014\120\034\101\035\132\045\111\066\053" +
    "\001\002\000\042\007\uffbe\010\uffbe\011\156\012\157\015" +
    "\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe" +
    "\027\uffbe\031\uffbe\032\uffbe\036\uffbe\040\uffbe\001\002\000" +
    "\020\004\uffa3\005\uffa3\014\uffa3\034\uffa3\035\uffa3\045\uffa3" +
    "\066\uffa3\001\002\000\020\004\uffa2\005\uffa2\014\uffa2\034" +
    "\uffa2\035\uffa2\045\uffa2\066\uffa2\001\002\000\020\004\134" +
    "\005\065\014\120\034\101\035\132\045\111\066\053\001" +
    "\002\000\042\007\uffbb\010\uffbb\011\uffbb\012\uffbb\015\uffbb" +
    "\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027" +
    "\uffbb\031\uffbb\032\uffbb\036\uffbb\040\uffbb\001\002\000\004" +
    "\015\163\001\002\000\050\007\uffb1\010\uffb1\011\uffb1\012" +
    "\uffb1\013\uffb1\015\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1" +
    "\024\uffb1\025\uffb1\026\uffb1\027\uffb1\031\uffb1\032\uffb1\036" +
    "\uffb1\040\uffb1\043\uffb1\001\002\000\042\007\uffbd\010\uffbd" +
    "\011\156\012\157\015\uffbd\021\uffbd\022\uffbd\023\uffbd\024" +
    "\uffbd\025\uffbd\026\uffbd\027\uffbd\031\uffbd\032\uffbd\036\uffbd" +
    "\040\uffbd\001\002\000\024\004\uffad\005\uffad\010\uffad\014" +
    "\uffad\033\uffad\034\uffad\035\uffad\045\uffad\066\uffad\001\002" +
    "\000\024\004\uffaf\005\uffaf\010\uffaf\014\uffaf\033\uffaf\034" +
    "\uffaf\035\uffaf\045\uffaf\066\uffaf\001\002\000\024\004\uffa9" +
    "\005\uffa9\010\uffa9\014\uffa9\033\uffa9\034\uffa9\035\uffa9\045" +
    "\uffa9\066\uffa9\001\002\000\024\004\uffac\005\uffac\010\uffac" +
    "\014\uffac\033\uffac\034\uffac\035\uffac\045\uffac\066\uffac\001" +
    "\002\000\024\004\uffae\005\uffae\010\uffae\014\uffae\033\uffae" +
    "\034\uffae\035\uffae\045\uffae\066\uffae\001\002\000\024\004" +
    "\uffaa\005\uffaa\010\uffaa\014\uffaa\033\uffaa\034\uffaa\035\uffaa" +
    "\045\uffaa\066\uffaa\001\002\000\024\004\uffab\005\uffab\010" +
    "\uffab\014\uffab\033\uffab\034\uffab\035\uffab\045\uffab\066\uffab" +
    "\001\002\000\024\004\134\005\065\010\133\014\120\033" +
    "\112\034\101\035\132\045\111\066\053\001\002\000\024" +
    "\004\134\005\065\010\133\014\120\033\112\034\101\035" +
    "\132\045\111\066\053\001\002\000\014\015\uffc7\021\uffc7" +
    "\032\167\036\uffc7\040\uffc7\001\002\000\032\015\uffc5\021" +
    "\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5" +
    "\031\201\032\uffc5\036\uffc5\040\uffc5\001\002\000\024\004" +
    "\134\005\065\010\133\014\120\033\112\034\101\035\132" +
    "\045\111\066\053\001\002\000\024\004\uffa8\005\uffa8\010" +
    "\uffa8\014\uffa8\033\uffa8\034\uffa8\035\uffa8\045\uffa8\066\uffa8" +
    "\001\002\000\032\015\uffc3\021\uffc3\022\uffc3\023\uffc3\024" +
    "\uffc3\025\uffc3\026\uffc3\027\uffc3\031\uffc3\032\uffc3\036\uffc3" +
    "\040\uffc3\001\002\000\020\004\134\005\065\014\120\034" +
    "\101\035\132\045\111\066\053\001\002\000\020\004\uffa1" +
    "\005\uffa1\014\uffa1\034\uffa1\035\uffa1\045\uffa1\066\uffa1\001" +
    "\002\000\042\007\uffb9\010\uffb9\011\uffb9\012\uffb9\015\uffb9" +
    "\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027" +
    "\uffb9\031\uffb9\032\uffb9\036\uffb9\040\uffb9\001\002\000\016" +
    "\004\134\005\065\014\120\034\101\035\132\066\053\001" +
    "\002\000\016\004\uff9f\005\uff9f\014\uff9f\034\uff9f\035\uff9f" +
    "\066\uff9f\001\002\000\024\004\134\005\065\010\133\014" +
    "\120\033\112\034\101\035\132\045\111\066\053\001\002" +
    "\000\004\021\212\001\002\000\050\007\uffb3\010\uffb3\011" +
    "\uffb3\012\uffb3\013\uffb3\015\uffb3\020\uffb3\021\uffb3\022\uffb3" +
    "\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\031\uffb3\032" +
    "\uffb3\036\uffb3\040\uffb3\043\uffb3\001\002\000\046\007\uffb5" +
    "\010\uffb5\011\uffb5\012\uffb5\013\uffb5\015\uffb5\020\210\021" +
    "\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5" +
    "\031\uffb5\032\uffb5\036\uffb5\040\uffb5\001\002\000\024\004" +
    "\134\005\065\010\133\014\120\033\112\034\101\035\132" +
    "\045\111\066\053\001\002\000\004\015\216\001\002\000" +
    "\004\040\217\001\002\000\042\005\uffca\006\uffca\017\uffca" +
    "\030\uffca\040\uffca\053\uffca\055\uffca\056\uffca\057\uffca\060" +
    "\uffca\061\uffca\062\uffca\063\uffca\064\uffca\065\uffca\066\uffca" +
    "\001\002\000\004\005\221\001\002\000\054\007\uff87\010" +
    "\uff87\011\uff87\012\uff87\013\uff87\014\uff87\015\uff87\020\uff87" +
    "\021\uff87\022\uff87\023\uff87\024\uff87\025\uff87\026\uff87\027" +
    "\uff87\031\uff87\032\uff87\036\uff87\040\uff87\043\uff87\052\uff87" +
    "\001\002\000\024\004\134\005\065\010\133\014\120\033" +
    "\112\034\101\035\132\045\111\066\053\001\002\000\004" +
    "\015\224\001\002\000\004\016\225\001\002\000\034\005" +
    "\uffe0\006\uffe0\017\uffe0\030\uffe0\040\uffe0\053\uffe0\055\uffe0" +
    "\057\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\066\uffe0\001" +
    "\002\000\034\005\052\006\060\017\227\030\042\040\036" +
    "\053\051\055\046\057\057\061\041\062\034\063\061\064" +
    "\054\066\053\001\002\000\044\005\uffd5\006\uffd5\017\uffd5" +
    "\030\uffd5\040\uffd5\053\uffd5\054\230\055\uffd5\056\uffd5\057" +
    "\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5" +
    "\066\uffd5\001\002\000\004\016\232\001\002\000\042\005" +
    "\uffd7\006\uffd7\017\uffd7\030\uffd7\040\uffd7\053\uffd7\055\uffd7" +
    "\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7\064" +
    "\uffd7\065\uffd7\066\uffd7\001\002\000\034\005\uffe0\006\uffe0" +
    "\017\uffe0\030\uffe0\040\uffe0\053\uffe0\055\uffe0\057\uffe0\061" +
    "\uffe0\062\uffe0\063\uffe0\064\uffe0\066\uffe0\001\002\000\034" +
    "\005\052\006\060\017\234\030\042\040\036\053\051\055" +
    "\046\057\057\061\041\062\034\063\061\064\054\066\053" +
    "\001\002\000\042\005\uffd6\006\uffd6\017\uffd6\030\uffd6\040" +
    "\uffd6\053\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6" +
    "\062\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\001\002\000" +
    "\026\004\134\005\065\010\133\014\120\033\112\034\101" +
    "\035\132\045\111\047\130\066\053\001\002\000\004\040" +
    "\237\001\002\000\042\005\uffdb\006\uffdb\017\uffdb\030\uffdb" +
    "\040\uffdb\053\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061" +
    "\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\001\002" +
    "\000\006\005\065\066\053\001\002\000\004\015\242\001" +
    "\002\000\004\016\243\001\002\000\006\056\uffd2\060\uffd2" +
    "\001\002\000\006\056\247\060\245\001\002\000\004\037" +
    "\256\001\002\000\004\017\255\001\002\000\004\014\250" +
    "\001\002\000\010\004\134\034\101\035\132\001\002\000" +
    "\004\015\252\001\002\000\004\037\253\001\002\000\036" +
    "\005\uffe0\006\uffe0\030\uffe0\040\uffe0\053\uffe0\055\uffe0\056" +
    "\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0" +
    "\066\uffe0\001\002\000\036\005\052\006\060\030\042\040" +
    "\036\053\051\055\046\056\uffd3\057\057\060\uffd3\061\041" +
    "\062\034\063\061\064\054\066\053\001\002\000\042\005" +
    "\uffd4\006\uffd4\017\uffd4\030\uffd4\040\uffd4\053\uffd4\055\uffd4" +
    "\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\064" +
    "\uffd4\065\uffd4\066\uffd4\001\002\000\032\005\uffe0\006\uffe0" +
    "\030\uffe0\040\uffe0\053\uffe0\055\uffe0\057\uffe0\061\uffe0\062" +
    "\uffe0\063\uffe0\064\uffe0\066\uffe0\001\002\000\032\005\052" +
    "\006\060\030\042\040\036\053\051\055\046\057\260\061" +
    "\041\062\034\063\061\064\054\066\053\001\002\000\004" +
    "\040\261\001\002\000\034\005\uffcf\006\uffcf\017\uffd1\030" +
    "\uffcf\040\uffcf\053\uffcf\055\uffcf\057\uffcf\061\uffcf\062\uffcf" +
    "\063\uffcf\064\uffcf\066\uffcf\001\002\000\004\040\263\001" +
    "\002\000\004\017\264\001\002\000\004\002\uffc9\001\002" +
    "\000\024\004\134\005\065\010\133\014\120\033\112\034" +
    "\101\035\132\045\111\066\053\001\002\000\004\015\267" +
    "\001\002\000\004\016\270\001\002\000\034\005\uffe0\006" +
    "\uffe0\017\uffe0\030\uffe0\040\uffe0\053\uffe0\055\uffe0\057\uffe0" +
    "\061\uffe0\062\uffe0\063\uffe0\064\uffe0\066\uffe0\001\002\000" +
    "\034\005\052\006\060\017\272\030\042\040\036\053\051" +
    "\055\046\057\057\061\041\062\034\063\061\064\054\066" +
    "\053\001\002\000\042\005\uffd0\006\uffd0\017\uffd0\030\uffd0" +
    "\040\uffd0\053\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061" +
    "\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\001\002" +
    "\000\042\005\uffce\006\uffce\017\uffce\030\uffce\040\uffce\053" +
    "\uffce\055\uffce\056\uffce\057\uffce\060\uffce\061\uffce\062\uffce" +
    "\063\uffce\064\uffce\065\uffce\066\uffce\001\002\000\004\016" +
    "\275\001\002\000\010\005\276\067\302\070\303\001\002" +
    "\000\004\014\313\001\002\000\004\017\ufff6\001\002\000" +
    "\004\017\312\001\002\000\010\005\304\006\060\030\042" +
    "\001\002\000\012\005\ufff4\006\ufff4\030\ufff4\044\ufff4\001" +
    "\002\000\012\005\ufff3\006\ufff3\030\ufff3\044\ufff3\001\002" +
    "\000\014\005\uff94\016\uff94\020\uff94\045\uff94\046\uff94\001" +
    "\002\000\010\005\276\067\302\070\303\001\002\000\010" +
    "\005\307\020\074\045\073\001\002\000\004\040\310\001" +
    "\002\000\014\005\uffec\006\uffec\030\uffec\067\uffec\070\uffec" +
    "\001\002\000\004\017\ufff7\001\002\000\014\041\ufff8\042" +
    "\ufff8\044\ufff8\050\ufff8\051\ufff8\001\002\000\012\005\uffe2" +
    "\006\uffe2\015\uffe4\030\uffe2\001\002\000\004\015\324\001" +
    "\002\000\010\005\304\006\060\030\042\001\002\000\006" +
    "\015\uffe5\036\323\001\002\000\012\005\320\020\074\045" +
    "\073\046\321\001\002\000\006\015\uffe7\036\uffe7\001\002" +
    "\000\004\005\322\001\002\000\006\015\uffe6\036\uffe6\001" +
    "\002\000\010\005\uffe3\006\uffe3\030\uffe3\001\002\000\004" +
    "\016\325\001\002\000\034\005\uffe0\006\uffe0\017\uffe0\030" +
    "\uffe0\040\uffe0\053\uffe0\055\uffe0\057\uffe0\061\uffe0\062\uffe0" +
    "\063\uffe0\064\uffe0\066\uffe0\001\002\000\034\005\052\006" +
    "\060\017\327\030\042\040\036\053\051\055\046\057\057" +
    "\061\041\062\034\063\061\064\054\066\053\001\002\000" +
    "\010\017\ufff1\067\ufff1\070\ufff1\001\002\000\010\017\ufff5" +
    "\067\302\070\303\001\002\000\004\044\014\001\002\000" +
    "\010\017\ufff2\067\ufff2\070\ufff2\001\002\000\004\016\334" +
    "\001\002\000\010\005\335\006\060\030\042\001\002\000" +
    "\012\005\uff94\014\343\020\uff94\045\uff94\001\002\000\004" +
    "\017\uffee\001\002\000\004\017\342\001\002\000\010\005" +
    "\335\006\060\030\042\001\002\000\004\017\uffef\001\002" +
    "\000\014\041\ufff0\042\ufff0\044\ufff0\050\ufff0\051\ufff0\001" +
    "\002\000\012\005\uffe2\006\uffe2\015\uffe4\030\uffe2\001\002" +
    "\000\004\015\345\001\002\000\004\016\346\001\002\000" +
    "\034\005\uffe0\006\uffe0\017\uffe0\030\uffe0\040\uffe0\053\uffe0" +
    "\055\uffe0\057\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\066" +
    "\uffe0\001\002\000\034\005\052\006\060\017\350\030\042" +
    "\040\036\053\051\055\046\057\057\061\041\062\034\063" +
    "\061\064\054\066\053\001\002\000\004\017\uffed\001\002" +
    "\000\024\004\134\005\065\010\133\014\120\033\112\034" +
    "\101\035\132\045\111\066\053\001\002\000\004\040\353" +
    "\001\002\000\014\041\uffdd\042\uffdd\044\uffdd\050\uffdd\051" +
    "\uffdd\001\002\000\004\014\355\001\002\000\012\005\uffe2" +
    "\006\uffe2\015\uffe4\030\uffe2\001\002\000\004\015\357\001" +
    "\002\000\006\016\360\037\361\001\002\000\034\005\uffe0" +
    "\006\uffe0\030\uffe0\040\uffe0\053\uffe0\055\uffe0\057\uffe0\061" +
    "\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\001\002" +
    "\000\010\005\304\006\060\030\042\001\002\000\010\016" +
    "\363\020\074\045\073\001\002\000\034\005\uffe0\006\uffe0" +
    "\030\uffe0\040\uffe0\053\uffe0\055\uffe0\057\uffe0\061\uffe0\062" +
    "\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\001\002\000\034" +
    "\005\052\006\060\030\042\040\036\053\051\055\046\057" +
    "\057\061\041\062\034\063\061\064\054\065\365\066\053" +
    "\001\002\000\024\004\134\005\065\010\133\014\120\033" +
    "\112\034\101\035\132\045\111\066\053\001\002\000\004" +
    "\040\uffdf\001\002\000\004\040\370\001\002\000\004\017" +
    "\371\001\002\000\024\017\uffe9\041\uffe9\042\uffe9\044\uffe9" +
    "\050\uffe9\051\uffe9\067\uffe9\070\uffe9\071\uffe9\001\002\000" +
    "\034\005\052\006\060\030\042\040\036\053\051\055\046" +
    "\057\057\061\041\062\034\063\061\064\054\065\373\066" +
    "\053\001\002\000\004\040\374\001\002\000\004\017\375" +
    "\001\002\000\024\017\uffe8\041\uffe8\042\uffe8\044\uffe8\050" +
    "\uffe8\051\uffe8\067\uffe8\070\uffe8\071\uffe8\001\002\000\010" +
    "\004\134\034\101\035\132\001\002\000\004\040\u0100\001" +
    "\002\000\014\041\uffde\042\uffde\044\uffde\050\uffde\051\uffde" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\024\004\011\005\022\012\014\016\021\017\007" +
    "\020\016\026\006\027\012\045\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\031\001" +
    "\001\000\032\030\042\032\044\034\032\037\037\040\036" +
    "\041\034\042\061\043\047\044\062\101\054\103\055\104" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\104\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\102\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\031\134\046\126\047\120\050\115\051\112\052\106" +
    "\053\104\054\122\055\121\056\114\057\113\060\107\061" +
    "\105\062\102\066\124\070\116\073\125\077\123\100\130" +
    "\104\101\105\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\074\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\065\177" +
    "\001\001\000\004\072\202\001\001\000\002\001\001\000" +
    "\006\063\174\064\173\001\001\000\030\055\163\056\114" +
    "\057\113\060\107\061\105\062\102\073\125\077\123\100" +
    "\130\104\101\105\103\001\001\000\050\047\161\050\115" +
    "\051\112\052\106\053\104\054\122\055\121\056\114\057" +
    "\113\060\107\061\105\062\102\066\124\070\116\073\125" +
    "\077\123\100\130\104\101\105\103\001\001\000\002\001" +
    "\001\000\004\071\157\001\001\000\004\067\153\001\001" +
    "\000\002\001\001\000\036\053\150\054\122\055\121\056" +
    "\114\057\113\060\107\061\105\062\102\070\116\073\125" +
    "\077\123\100\130\104\101\105\103\001\001\000\020\060" +
    "\147\061\105\062\102\077\123\100\130\104\101\105\103" +
    "\001\001\000\002\001\001\000\010\100\136\101\140\104" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\075\142\076\143\001\001\000\002\001\001\000" +
    "\052\046\144\047\120\050\115\051\112\052\106\053\104" +
    "\054\122\055\121\056\114\057\113\060\107\061\105\062" +
    "\102\066\124\070\116\073\125\077\123\100\130\104\101" +
    "\105\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\055\154\056\114\057" +
    "\113\060\107\061\105\062\102\073\125\077\123\100\130" +
    "\104\101\105\103\001\001\000\004\071\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\056\160\057\113" +
    "\060\107\061\105\062\102\073\125\077\123\100\130\104" +
    "\101\105\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\071\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\051\176\052\106\053\104\054\122\055\121\056\114" +
    "\057\113\060\107\061\105\062\102\066\124\070\116\073" +
    "\125\077\123\100\130\104\101\105\103\001\001\000\046" +
    "\050\175\051\112\052\106\053\104\054\122\055\121\056" +
    "\114\057\113\060\107\061\105\062\102\066\124\070\116" +
    "\073\125\077\123\100\130\104\101\105\103\001\001\000" +
    "\004\064\173\001\001\000\004\065\177\001\001\000\042" +
    "\052\201\053\104\054\122\055\121\056\114\057\113\060" +
    "\107\061\105\062\102\066\124\070\116\073\125\077\123" +
    "\100\130\104\101\105\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\057\204\060\107\061\105\062\102" +
    "\073\125\077\123\100\130\104\101\105\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\061\212\062\102" +
    "\077\123\100\130\104\101\105\103\001\001\000\002\001" +
    "\001\000\050\047\210\050\115\051\112\052\106\053\104" +
    "\054\122\055\121\056\114\057\113\060\107\061\105\062" +
    "\102\066\124\070\116\073\125\077\123\100\130\104\101" +
    "\105\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\046\214\047\120\050\115\051\112" +
    "\052\106\053\104\054\122\055\121\056\114\057\113\060" +
    "\107\061\105\062\102\066\124\070\116\073\125\077\123" +
    "\100\130\104\101\105\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\046\222\047\120\050\115\051\112\052" +
    "\106\053\104\054\122\055\121\056\114\057\113\060\107" +
    "\061\105\062\102\066\124\070\116\073\125\077\123\100" +
    "\130\104\101\105\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\225\001\001\000\032\030\042\032" +
    "\044\034\032\037\037\040\036\041\034\042\061\043\047" +
    "\044\062\101\054\103\055\104\046\001\001\000\004\033" +
    "\230\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\232\001\001\000\032\030\042\032\044\034\032\037" +
    "\037\040\036\041\034\042\061\043\047\044\062\101\054" +
    "\103\055\104\046\001\001\000\002\001\001\000\054\031" +
    "\235\046\126\047\120\050\115\051\112\052\106\053\104" +
    "\054\122\055\121\056\114\057\113\060\107\061\105\062" +
    "\102\066\124\070\116\073\125\077\123\100\130\104\101" +
    "\105\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\104\240\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\243\001\001\000\004\036\245\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\105\250\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\253\001\001\000\032\030\042\032\044\034\032" +
    "\037\037\040\036\041\034\042\061\043\047\044\062\101" +
    "\054\103\055\104\046\001\001\000\002\001\001\000\004" +
    "\024\256\001\001\000\032\030\042\032\044\034\032\037" +
    "\037\040\036\041\034\042\061\043\047\044\062\101\054" +
    "\103\055\104\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\046\265\047\120\050\115\051\112\052\106\053" +
    "\104\054\122\055\121\056\114\057\113\060\107\061\105" +
    "\062\102\066\124\070\116\073\125\077\123\100\130\104" +
    "\101\105\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\270\001\001\000\032\030\042\032\044\034" +
    "\032\037\037\040\036\041\034\042\061\043\047\044\062" +
    "\101\054\103\055\104\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\277\007\276" +
    "\010\300\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\304\101\305\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\310\007\276\010\300\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\022\313\023\314\001\001\000\002\001\001" +
    "\000\006\021\315\101\316\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\325\001\001\000\032\030\042\032\044\034\032\037\037" +
    "\040\036\041\034\042\061\043\047\044\062\101\054\103" +
    "\055\104\046\001\001\000\004\011\327\001\001\000\004" +
    "\010\330\001\001\000\010\016\331\017\007\020\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\013\336" +
    "\014\335\015\337\101\305\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\013\340\014\335" +
    "\015\337\101\305\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\022\343\023\314\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\346\001\001\000\032\030" +
    "\042\032\044\034\032\037\037\040\036\041\034\042\061" +
    "\043\047\044\062\101\054\103\055\104\046\001\001\000" +
    "\002\001\001\000\052\046\351\047\120\050\115\051\112" +
    "\052\106\053\104\054\122\055\121\056\114\057\113\060" +
    "\107\061\105\062\102\066\124\070\116\073\125\077\123" +
    "\100\130\104\101\105\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\022\355\023\314" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\371\001\001\000\004\101\361\001\001\000\002\001\001" +
    "\000\004\024\363\001\001\000\032\030\042\032\044\034" +
    "\032\037\037\040\036\041\034\042\061\043\047\044\062" +
    "\101\054\103\055\104\046\001\001\000\054\025\366\046" +
    "\365\047\120\050\115\051\112\052\106\053\104\054\122" +
    "\055\121\056\114\057\113\060\107\061\105\062\102\066" +
    "\124\070\116\073\125\077\123\100\130\104\101\105\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\030\042\032\044\034\032" +
    "\037\037\040\036\041\034\042\061\043\047\044\062\101" +
    "\054\103\055\104\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\105\376\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((LexiconUnit)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= S1 MAIN_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S1 ::= S1 BT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S1",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S1 ::= S1 FUNCTION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S1",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S1",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BT ::= CLASS_EX 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BT",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BT ::= STRUCT_EX 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BT",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BT ::= DEFINE_EX 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BT",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BT ::= TYPEDEF_EX 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BT",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CLASS_EX ::= CLASS_T ID BRACKET_OPEN CLASS_BODY BRACKET_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CLASS_EX",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CLASS_BODY ::= VISIBILITY DECLARATION CLASS_BODY 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CLASS_BODY",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CLASS_BODY ::= CLASS_INIT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CLASS_BODY",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CLASS_INIT ::= ID PARENTESIS_OPEN ARGUMENTS PARENTESIS_CLOSE BRACKET_OPEN FUNCTION_BODY BRACKET_CLOSE METHODS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CLASS_INIT",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VISIBILITY ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VISIBILITY",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VISIBILITY ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VISIBILITY",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // METHODS ::= METHODS VISIBILITY FUNCTION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("METHODS",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // METHODS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("METHODS",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STRUCT_EX ::= STRUCT_T ID BRACKET_OPEN STRUCT_BODY BRACKET_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("STRUCT_EX",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // STRUCT_BODY ::= DECLARATION STRUCT_BODY 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("STRUCT_BODY",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // STRUCT_BODY ::= STRUCT_INIT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("STRUCT_BODY",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STRUCT_INIT ::= ID PARENTESIS_OPEN ARGUMENTS PARENTESIS_CLOSE BRACKET_OPEN FUNCTION_BODY BRACKET_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("STRUCT_INIT",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARATION ::= TYPE ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FUNCTION ::= TYPED_FUNCTION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUNCTION",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNCTION ::= VOID_FUNCTION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUNCTION",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TYPED_FUNCTION ::= FUNC_T ID PARENTESIS_OPEN ARGUMENTS PARENTESIS_CLOSE COLON TYPE BRACKET_OPEN FUNCTION_BODY RETURN RETURN_VALUE SEMICOLON BRACKET_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPED_FUNCTION",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VOID_FUNCTION ::= FUNC_T ID PARENTESIS_OPEN ARGUMENTS PARENTESIS_CLOSE BRACKET_OPEN FUNCTION_BODY RETURN SEMICOLON BRACKET_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VOID_FUNCTION",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ARGUMENT_EX ::= TYPE ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENT_EX",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ARGUMENT_EX ::= TYPE REFERENCE_OP ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENT_EX",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ARGUMENTS ::= MORE_ARGUMENTS ARGUMENT_EX 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTS",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ARGUMENTS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTS",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MORE_ARGUMENTS ::= MORE_ARGUMENTS ARGUMENT_EX COMMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_ARGUMENTS",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MORE_ARGUMENTS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_ARGUMENTS",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUNCTION_BODY ::= FUNCTION_BODY INSTRUCTION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUNCTION_BODY",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUNCTION_BODY ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUNCTION_BODY",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // RETURN_VALUE ::= EXPRESSION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RETURN_VALUE",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DEFINE_EX ::= DEFINE ID LITERAL SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEFINE_EX",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TYPEDEF_EX ::= TYPEDEF ID EXPRESSION SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPEDEF_EX",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ASSIGNATION_INS ::= TYPE ID ASSIGNATION_OP EXPRESSION_OR_NEW SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASSIGNATION_INS",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ASSIGNATION_INS ::= ID_EX ASSIGNATION_OP EXPRESSION_OR_NEW SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASSIGNATION_INS",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESSION_OR_NEW ::= EXPRESSION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPRESSION_OR_NEW",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESSION_OR_NEW ::= NEW_OP TYPE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPRESSION_OR_NEW",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESSION_OR_NEW ::= NEW_OP ID_AND_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPRESSION_OR_NEW",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IF_INS ::= IF PARENTESIS_OPEN EXPRESSION PARENTESIS_CLOSE BRACKET_OPEN FUNCTION_BODY BRACKET_CLOSE ELSE_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IF_INS",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ELSE_INS ::= ELSE BRACKET_OPEN FUNCTION_BODY BRACKET_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ELSE_INS",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ELSE_INS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ELSE_INS",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SWITCH_INS ::= SWITCH PARENTESIS_OPEN ID_EX PARENTESIS_CLOSE BRACKET_OPEN CASES_INS DEFAULT_CASE BRACKET_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SWITCH_INS",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CASES_INS ::= CASES_INS CASE PARENTESIS_OPEN LITERAL PARENTESIS_CLOSE COLON FUNCTION_BODY 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASES_INS",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CASES_INS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASES_INS",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DEFAULT_CASE ::= DEFAULT COLON FUNCTION_BODY BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEFAULT_CASE",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // WHILE_INS ::= WHILE PARENTESIS_OPEN EXPRESSION PARENTESIS_CLOSE BRACKET_OPEN FUNCTION_BODY BRACKET_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("WHILE_INS",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BREAK_INS ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BREAK_INS",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONTINUE_INS ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONTINUE_INS",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IO_INS ::= INPUT_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IO_INS",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IO_INS ::= OUTPUT_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IO_INS",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INPUT_INS ::= INPUT_FUNC PARENTESIS_OPEN ID_EX PARENTESIS_CLOSE SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INPUT_INS",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OUTPUT_INS ::= OUTPUT_FUNC PARENTESIS_OPEN EXPRESSION PARENTESIS_CLOSE SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OUTPUT_INS",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // MAIN_INS ::= FUNCTION MAIN PARENTESIS_OPEN PARENTESIS_CLOSE COLON INT_T BRACKET_OPEN FUNCTION_BODY RETURN INTEGER SEMICOLON BRACKET_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MAIN_INS",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESSION ::= B0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPRESSION",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // B0 ::= B1 OP_B0 B1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // B0 ::= B1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // B1 ::= B1 OP_B1 B2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B1",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // B1 ::= B2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B1",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // B2 ::= B2 OP_B2 B3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B2",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // B2 ::= B3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B2",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // B3 ::= OP_B3 B4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B3",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // B3 ::= B4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B3",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // B4 ::= E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B4",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E0 ::= E0 OP_E0_BIN E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E0 ::= OP_E0_UN E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E1 ::= E1 OP_E1 E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E2 ::= E3 OP_E2 E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E3 ::= OP_E3 E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E3 ::= E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E4 ::= E5 OP_E4 E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",46, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",46, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E5 ::= E5 SQ_BRACKET_OPEN B0 SQ_BRACKET_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E5 ::= E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E6 ::= PARENTESIS_OPEN B0 PARENTESIS_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E6 ::= TERMINAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP_B0 ::= LESS_OR_EQ_OP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP_B0",49, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OP_B0 ::= GREATER_OR_EQ_OP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP_B0",49, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OP_B0 ::= LESS_OP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP_B0",49, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OP_B0 ::= GREATER_OP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP_B0",49, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OP_B0 ::= EQUAL_OP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP_B0",49, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OP_B0 ::= NOT_EQUAL_OP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP_B0",49, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OP_B1 ::= OR_OP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP_B1",50, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OP_B2 ::= AND_OP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP_B2",51, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OP_B3 ::= NOT_OP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP_B3",52, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OP_E0_BIN ::= SUM_OP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP_E0_BIN",53, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OP_E0_BIN ::= SUBS_OP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP_E0_BIN",53, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OP_E0_UN ::= SUBS_OP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP_E0_UN",54, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OP_E1 ::= MULT_OP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP_E1",55, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OP_E1 ::= DIV_OP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP_E1",55, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OP_E2 ::= POW_OP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP_E2",56, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OP_E3 ::= POINTER_OP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP_E3",57, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OP_E4 ::= FIELD_ACCESS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP_E4",58, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESSIONS ::= MORE_EXPRESSIONS EXPRESSION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPRESSIONS",59, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESSIONS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPRESSIONS",59, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // MORE_EXPRESSIONS ::= MORE_EXPRESSIONS EXPRESSION COMMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_EXPRESSIONS",60, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // MORE_EXPRESSIONS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_EXPRESSIONS",60, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // TERMINAL ::= LITERAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TERMINAL",61, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TERMINAL ::= ID_EX 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TERMINAL",61, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TERMINAL ::= ID_AND_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TERMINAL",61, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ID_AND_PARENTHESIS ::= ID_EX PARENTESIS_OPEN EXPRESSIONS PARENTESIS_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ID_AND_PARENTHESIS",62, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TYPE ::= INT_T 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",63, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TYPE ::= BOOLEAN_T 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",63, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TYPE ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",63, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TYPE ::= TYPE POINTER_OP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",63, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // TYPE ::= TYPE SQ_BRACKET_OPEN OPT_INTEGER SQ_BRACKET_CLOSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",63, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OPT_INTEGER ::= INTEGER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPT_INTEGER",64, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OPT_INTEGER ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPT_INTEGER",64, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // INSTRUCTION ::= ASSIGNATION_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",65, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // INSTRUCTION ::= IF_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",65, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // INSTRUCTION ::= SWITCH_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",65, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // INSTRUCTION ::= WHILE_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",65, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // INSTRUCTION ::= BREAK_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",65, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // INSTRUCTION ::= CONTINUE_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",65, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // INSTRUCTION ::= IO_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",65, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // INSTRUCTION ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",65, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ID_EX ::= THIS FIELD_ACCESS ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ID_EX",66, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ID_EX ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ID_EX",66, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // LITERAL ::= INTEGER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LITERAL",67, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // LITERAL ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LITERAL",67, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // LITERAL ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LITERAL",67, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

