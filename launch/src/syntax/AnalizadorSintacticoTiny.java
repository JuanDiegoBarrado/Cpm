
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Fri Apr 26 18:39:51 CEST 2024
//----------------------------------------------------

package syntax;

import java_cup.runtime.*;
import lexicon.AnalizadorLexicoTiny;
import lexicon.LexiconUnit;
import lexicon.TokenValue;
import errors.GestionErroresTiny;
import ast.*;
import ast.operators.*;
import ast.preamble.*;
import ast.sentences.*;
import ast.sentences.declarations.*;
import ast.sentences.instructions.*;
import ast.types.*;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Fri Apr 26 18:39:51 CEST 2024
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\250\000\002\002\004\000\002\002\004\000\002\071" +
    "\004\000\002\071\002\000\002\064\003\000\002\064\003" +
    "\000\002\064\003\000\002\064\003\000\002\064\003\000" +
    "\002\065\010\000\002\073\005\000\002\062\004\000\002" +
    "\062\002\000\002\057\011\000\002\063\005\000\002\063" +
    "\002\000\002\072\003\000\002\072\003\000\002\051\006" +
    "\000\002\051\002\000\002\066\011\000\002\052\005\000" +
    "\002\052\002\000\002\056\003\000\002\056\003\000\002" +
    "\060\017\000\002\061\014\000\002\053\004\000\002\053" +
    "\002\000\002\054\005\000\002\054\002\000\002\050\003" +
    "\000\002\074\004\000\002\074\002\000\002\024\003\000" +
    "\002\067\006\000\002\070\004\000\002\047\005\000\002" +
    "\003\006\000\002\003\002\000\002\026\006\000\002\045" +
    "\006\000\002\045\010\000\002\045\007\000\002\044\006" +
    "\000\002\044\010\000\002\044\007\000\002\032\012\000" +
    "\002\032\004\000\002\075\006\000\002\075\004\000\002" +
    "\075\002\000\002\033\012\000\002\046\011\000\002\046" +
    "\002\000\002\034\007\000\002\035\011\000\002\035\004" +
    "\000\002\036\004\000\002\037\004\000\002\040\015\000" +
    "\002\040\004\000\002\041\003\000\002\041\003\000\002" +
    "\042\007\000\002\043\007\000\002\055\016\000\002\004" +
    "\003\000\002\004\003\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\003\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\003\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\003\000\002\010\004" +
    "\000\002\010\004\000\002\010\003\000\002\011\003\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\004\000\002\012\004\000\002\012\003\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\003\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\003" +
    "\000\002\015\004\000\002\015\004\000\002\015\004\000" +
    "\002\015\004\000\002\015\003\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\003\000\002\017" +
    "\006\000\002\017\006\000\002\017\003\000\002\020\005" +
    "\000\002\020\003\000\002\027\004\000\002\027\002\000" +
    "\002\030\005\000\002\030\002\000\002\025\003\000\002" +
    "\025\003\000\002\076\004\000\002\076\003\000\002\077" +
    "\003\000\002\077\003\000\002\077\003\000\002\077\004" +
    "\000\002\021\003\000\002\021\002\000\002\031\004\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\022\005\000\002\022\003\000\002\022\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0151\000\014\040\ufffe\041\ufffe\043\ufffe\047\ufffe\050" +
    "\ufffe\001\002\000\004\002\u0153\001\002\000\014\040\020" +
    "\041\016\043\012\047\013\050\007\001\002\000\014\040" +
    "\ufffc\041\ufffc\043\ufffc\047\ufffc\050\ufffc\001\002\000\004" +
    "\072\u0150\001\002\000\022\016\uffea\040\uffea\041\uffea\043" +
    "\uffea\047\uffea\050\uffea\067\uffea\070\uffea\001\002\000\004" +
    "\002\001\001\002\000\006\071\u0145\072\267\001\002\000" +
    "\010\004\040\027\041\072\035\001\002\000\014\040\ufff9" +
    "\041\ufff9\043\ufff9\047\ufff9\050\ufff9\001\002\000\022\016" +
    "\uffe9\040\uffe9\041\uffe9\043\uffe9\047\uffe9\050\uffe9\067\uffe9" +
    "\070\uffe9\001\002\000\004\072\u013b\001\002\000\014\040" +
    "\ufffb\041\ufffb\043\ufffb\047\ufffb\050\ufffb\001\002\000\004" +
    "\072\024\001\002\000\014\040\ufffa\041\ufffa\043\ufffa\047" +
    "\ufffa\050\ufffa\001\002\000\014\040\uffff\041\uffff\043\uffff" +
    "\047\uffff\050\uffff\001\002\000\014\040\ufffd\041\ufffd\043" +
    "\ufffd\047\ufffd\050\ufffd\001\002\000\004\015\025\001\002" +
    "\000\010\067\uffee\070\uffee\072\uffee\001\002\000\010\067" +
    "\033\070\034\072\027\001\002\000\004\013\u0135\001\002" +
    "\000\004\016\u0134\001\002\000\012\016\ufff5\067\ufff5\070" +
    "\ufff5\072\ufff5\001\002\000\010\004\040\027\041\072\035" +
    "\001\002\000\012\004\ufff1\027\ufff1\043\ufff1\072\ufff1\001" +
    "\002\000\012\004\ufff0\027\ufff0\043\ufff0\072\ufff0\001\002" +
    "\000\012\015\uff6e\044\uff6e\045\uff6e\072\uff6e\001\002\000" +
    "\016\015\uff71\017\uff71\037\uff71\044\260\045\257\072\uff71" +
    "\001\002\000\004\037\256\001\002\000\016\015\uff70\017" +
    "\uff70\037\uff70\044\uff70\045\uff70\072\uff70\001\002\000\016" +
    "\015\uff6f\017\uff6f\037\uff6f\044\uff6f\045\uff6f\072\uff6f\001" +
    "\002\000\004\072\043\001\002\000\026\014\uffda\017\uffda" +
    "\035\uffda\037\uffda\040\uffda\041\uffda\043\uffda\047\uffda\050" +
    "\uffda\051\uffda\001\002\000\026\014\uffdc\017\045\035\uffdc" +
    "\037\uffdc\040\uffdc\041\uffdc\043\uffdc\047\uffdc\050\uffdc\051" +
    "\uffdc\001\002\000\032\003\077\006\100\013\071\020\uff6b" +
    "\032\063\033\052\034\076\044\060\045\102\066\065\072" +
    "\061\073\101\001\002\000\054\005\uff5d\006\uff5d\007\uff5d" +
    "\010\uff5d\011\uff5d\012\uff5d\014\uff5d\017\uff5d\020\uff5d\021" +
    "\uff5d\022\uff5d\023\uff5d\024\uff5d\025\uff5d\026\uff5d\030\uff5d" +
    "\031\uff5d\035\uff5d\037\uff5d\042\uff5d\051\uff5d\001\002\000" +
    "\054\005\uff7b\006\uff7b\007\uff7b\010\uff7b\011\uff7b\012\uff7b" +
    "\014\uff7b\017\uff7b\020\uff7b\021\uff7b\022\uff7b\023\uff7b\024" +
    "\uff7b\025\uff7b\026\uff7b\030\uff7b\031\uff7b\035\uff7b\037\uff7b" +
    "\042\uff7b\051\uff7b\001\002\000\054\005\uff73\006\uff73\007" +
    "\uff73\010\uff73\011\uff73\012\uff73\014\uff73\017\uff73\020\uff73" +
    "\021\uff73\022\uff73\023\uff73\024\uff73\025\uff73\026\uff73\030" +
    "\uff73\031\uff73\035\uff73\037\uff73\042\uff73\051\uff73\001\002" +
    "\000\004\020\255\001\002\000\054\005\uff5b\006\uff5b\007" +
    "\uff5b\010\uff5b\011\uff5b\012\uff5b\014\uff5b\017\uff5b\020\uff5b" +
    "\021\uff5b\022\uff5b\023\uff5b\024\uff5b\025\uff5b\026\uff5b\030" +
    "\uff5b\031\uff5b\035\uff5b\037\uff5b\042\uff5b\051\uff5b\001\002" +
    "\000\034\014\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024" +
    "\uff9f\025\uff9f\026\uff9f\030\uff9f\031\uff9f\035\uff9f\037\uff9f" +
    "\051\uff9f\001\002\000\054\005\uff7e\006\uff7e\007\uff7e\010" +
    "\uff7e\011\uff7e\012\uff7e\014\uff7e\017\113\020\uff7e\021\uff7e" +
    "\022\uff7e\023\uff7e\024\uff7e\025\uff7e\026\uff7e\030\uff7e\031" +
    "\uff7e\035\uff7e\037\uff7e\042\252\051\uff7e\001\002\000\054" +
    "\005\uff74\006\uff74\007\uff74\010\uff74\011\uff74\012\uff74\014" +
    "\uff74\017\uff74\020\uff74\021\uff74\022\uff74\023\uff74\024\uff74" +
    "\025\uff74\026\uff74\030\uff74\031\uff74\035\uff74\037\uff74\042" +
    "\uff74\051\uff74\001\002\000\034\014\uffa2\020\uffa2\021\uffa2" +
    "\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\030\uffa2\031" +
    "\uffa2\035\uffa2\037\uffa2\051\uffa2\001\002\000\050\005\uff82" +
    "\006\uff82\007\uff82\010\uff82\011\uff82\012\uff82\014\uff82\020" +
    "\uff82\021\uff82\022\uff82\023\uff82\024\uff82\025\uff82\026\uff82" +
    "\030\uff82\031\uff82\035\uff82\037\uff82\051\uff82\001\002\000" +
    "\020\003\250\013\071\033\052\034\076\066\065\072\061" +
    "\073\101\001\002\000\056\005\uff5e\006\uff5e\007\uff5e\010" +
    "\uff5e\011\uff5e\012\uff5e\013\242\014\uff5e\017\uff5e\020\uff5e" +
    "\021\uff5e\022\uff5e\023\uff5e\024\uff5e\025\uff5e\026\uff5e\030" +
    "\uff5e\031\uff5e\035\uff5e\037\uff5e\042\uff5e\051\uff5e\001\002" +
    "\000\034\014\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024" +
    "\uffa6\025\uffa6\026\uffa6\030\164\031\uffa6\035\uffa6\037\uffa6" +
    "\051\uffa6\001\002\000\026\003\241\006\100\013\071\033" +
    "\052\034\076\044\060\045\102\066\065\072\061\073\101" +
    "\001\002\000\050\005\uff87\006\uff87\007\uff87\010\uff87\011" +
    "\uff87\012\235\014\uff87\020\uff87\021\uff87\022\uff87\023\uff87" +
    "\024\uff87\025\uff87\026\uff87\030\uff87\031\uff87\035\uff87\037" +
    "\uff87\051\uff87\001\002\000\004\042\233\001\002\000\046" +
    "\005\uff8b\006\uff8b\007\uff8b\010\uff8b\011\uff8b\014\uff8b\020" +
    "\uff8b\021\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b\026\uff8b" +
    "\030\uff8b\031\uff8b\035\uff8b\037\uff8b\051\uff8b\001\002\000" +
    "\032\014\uffaa\020\uffaa\021\212\022\215\023\211\024\214" +
    "\025\216\026\213\031\161\035\uffaa\037\uffaa\051\uffaa\001" +
    "\002\000\014\014\uffbe\020\uffbe\035\uffbe\037\uffbe\051\uffbe" +
    "\001\002\000\030\003\077\006\100\013\071\032\063\033" +
    "\052\034\076\044\060\045\102\066\065\072\061\073\101" +
    "\001\002\000\046\005\uff95\006\uff95\007\132\010\134\011" +
    "\133\014\uff95\020\uff95\021\uff95\022\uff95\023\uff95\024\uff95" +
    "\025\uff95\026\uff95\030\uff95\031\uff95\035\uff95\037\uff95\051" +
    "\uff95\001\002\000\040\005\201\006\202\014\uff9e\020\uff9e" +
    "\021\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\030" +
    "\uff9e\031\uff9e\035\uff9e\037\uff9e\051\uff9e\001\002\000\054" +
    "\005\uff79\006\uff79\007\uff79\010\uff79\011\uff79\012\uff79\014" +
    "\uff79\017\uff79\020\uff79\021\uff79\022\uff79\023\uff79\024\uff79" +
    "\025\uff79\026\uff79\030\uff79\031\uff79\035\uff79\037\uff79\042" +
    "\uff79\051\uff79\001\002\000\004\020\uff6c\001\002\000\054" +
    "\005\uff5a\006\uff5a\007\uff5a\010\uff5a\011\uff5a\012\uff5a\014" +
    "\uff5a\017\uff5a\020\uff5a\021\uff5a\022\uff5a\023\uff5a\024\uff5a" +
    "\025\uff5a\026\uff5a\030\uff5a\031\uff5a\035\uff5a\037\uff5a\042" +
    "\uff5a\051\uff5a\001\002\000\054\005\151\006\145\007\120" +
    "\010\122\011\121\012\123\014\uffbd\017\106\020\uffbd\021" +
    "\143\022\147\023\153\024\144\025\150\026\152\030\154" +
    "\031\146\035\uffbd\037\uffbd\042\105\051\uffbd\001\002\000" +
    "\024\003\117\013\071\033\052\034\076\044\060\045\102" +
    "\066\065\072\061\073\101\001\002\000\054\005\uff5c\006" +
    "\uff5c\007\uff5c\010\uff5c\011\uff5c\012\uff5c\014\uff5c\017\uff5c" +
    "\020\uff5c\021\uff5c\022\uff5c\023\uff5c\024\uff5c\025\uff5c\026" +
    "\uff5c\030\uff5c\031\uff5c\035\uff5c\037\uff5c\042\uff5c\051\uff5c" +
    "\001\002\000\020\003\103\013\071\033\052\034\076\066" +
    "\065\072\061\073\101\001\002\000\054\005\uff83\006\uff83" +
    "\007\uff83\010\uff83\011\uff83\012\uff83\014\uff83\017\106\020" +
    "\uff83\021\uff83\022\uff83\023\uff83\024\uff83\025\uff83\026\uff83" +
    "\030\uff83\031\uff83\035\uff83\037\uff83\042\105\051\uff83\001" +
    "\002\000\050\005\uff84\006\uff84\007\uff84\010\uff84\011\uff84" +
    "\012\uff84\014\uff84\020\uff84\021\uff84\022\uff84\023\uff84\024" +
    "\uff84\025\uff84\026\uff84\030\uff84\031\uff84\035\uff84\037\uff84" +
    "\051\uff84\001\002\000\020\003\111\013\071\033\052\034" +
    "\076\066\065\072\061\073\101\001\002\000\030\003\077" +
    "\006\100\013\071\032\063\033\052\034\076\044\060\045" +
    "\102\066\065\072\061\073\101\001\002\000\004\020\110" +
    "\001\002\000\054\005\uff7c\006\uff7c\007\uff7c\010\uff7c\011" +
    "\uff7c\012\uff7c\014\uff7c\017\uff7c\020\uff7c\021\uff7c\022\uff7c" +
    "\023\uff7c\024\uff7c\025\uff7c\026\uff7c\030\uff7c\031\uff7c\035" +
    "\uff7c\037\uff7c\042\uff7c\051\uff7c\001\002\000\004\017\106" +
    "\001\002\000\052\005\uff80\006\uff80\007\uff80\010\uff80\011" +
    "\uff80\012\uff80\014\uff80\017\113\020\uff80\021\uff80\022\uff80" +
    "\023\uff80\024\uff80\025\uff80\026\uff80\030\uff80\031\uff80\035" +
    "\uff80\037\uff80\051\uff80\001\002\000\030\003\077\006\100" +
    "\013\071\032\063\033\052\034\076\044\060\045\102\066" +
    "\065\072\061\073\101\001\002\000\004\020\115\001\002" +
    "\000\054\005\uff7d\006\uff7d\007\uff7d\010\uff7d\011\uff7d\012" +
    "\uff7d\014\uff7d\017\uff7d\020\uff7d\021\uff7d\022\uff7d\023\uff7d" +
    "\024\uff7d\025\uff7d\026\uff7d\030\uff7d\031\uff7d\035\uff7d\037" +
    "\uff7d\042\uff7d\051\uff7d\001\002\000\046\005\uff97\006\uff97" +
    "\007\132\010\134\011\133\014\uff97\020\uff97\021\uff97\022" +
    "\uff97\023\uff97\024\uff97\025\uff97\026\uff97\030\uff97\031\uff97" +
    "\035\uff97\037\uff97\051\uff97\001\002\000\054\005\uff96\006" +
    "\uff96\007\120\010\122\011\121\012\123\014\uff96\017\106" +
    "\020\uff96\021\uff96\022\uff96\023\uff96\024\uff96\025\uff96\026" +
    "\uff96\030\uff96\031\uff96\035\uff96\037\uff96\042\105\051\uff96" +
    "\001\002\000\024\003\127\013\071\033\052\034\076\044" +
    "\060\045\102\066\065\072\061\073\101\001\002\000\024" +
    "\003\127\013\071\033\052\034\076\044\060\045\102\066" +
    "\065\072\061\073\101\001\002\000\024\003\127\013\071" +
    "\033\052\034\076\044\060\045\102\066\065\072\061\073" +
    "\101\001\002\000\024\003\124\013\071\033\052\034\076" +
    "\044\060\045\102\066\065\072\061\073\101\001\002\000" +
    "\006\017\106\042\105\001\002\000\046\005\uff89\006\uff89" +
    "\007\uff89\010\uff89\011\uff89\014\uff89\020\uff89\021\uff89\022" +
    "\uff89\023\uff89\024\uff89\025\uff89\026\uff89\030\uff89\031\uff89" +
    "\035\uff89\037\uff89\051\uff89\001\002\000\046\005\uff90\006" +
    "\uff90\007\uff90\010\uff90\011\uff90\014\uff90\020\uff90\021\uff90" +
    "\022\uff90\023\uff90\024\uff90\025\uff90\026\uff90\030\uff90\031" +
    "\uff90\035\uff90\037\uff90\051\uff90\001\002\000\010\012\123" +
    "\017\106\042\105\001\002\000\046\005\uff8d\006\uff8d\007" +
    "\uff8d\010\uff8d\011\uff8d\014\uff8d\020\uff8d\021\uff8d\022\uff8d" +
    "\023\uff8d\024\uff8d\025\uff8d\026\uff8d\030\uff8d\031\uff8d\035" +
    "\uff8d\037\uff8d\051\uff8d\001\002\000\046\005\uff93\006\uff93" +
    "\007\uff93\010\uff93\011\uff93\014\uff93\020\uff93\021\uff93\022" +
    "\uff93\023\uff93\024\uff93\025\uff93\026\uff93\030\uff93\031\uff93" +
    "\035\uff93\037\uff93\051\uff93\001\002\000\024\003\142\013" +
    "\071\033\052\034\076\044\060\045\102\066\065\072\061" +
    "\073\101\001\002\000\024\003\140\013\071\033\052\034" +
    "\076\044\060\045\102\066\065\072\061\073\101\001\002" +
    "\000\024\003\136\013\071\033\052\034\076\044\060\045" +
    "\102\066\065\072\061\073\101\001\002\000\046\005\uff91" +
    "\006\uff91\007\uff91\010\uff91\011\uff91\014\uff91\020\uff91\021" +
    "\uff91\022\uff91\023\uff91\024\uff91\025\uff91\026\uff91\030\uff91" +
    "\031\uff91\035\uff91\037\uff91\051\uff91\001\002\000\054\005" +
    "\uff8f\006\uff8f\007\uff8f\010\uff8f\011\uff8f\012\123\014\uff8f" +
    "\017\106\020\uff8f\021\uff8f\022\uff8f\023\uff8f\024\uff8f\025" +
    "\uff8f\026\uff8f\030\uff8f\031\uff8f\035\uff8f\037\uff8f\042\105" +
    "\051\uff8f\001\002\000\046\005\uff8e\006\uff8e\007\uff8e\010" +
    "\uff8e\011\uff8e\014\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e" +
    "\024\uff8e\025\uff8e\026\uff8e\030\uff8e\031\uff8e\035\uff8e\037" +
    "\uff8e\051\uff8e\001\002\000\054\005\uff8c\006\uff8c\007\uff8c" +
    "\010\uff8c\011\uff8c\012\123\014\uff8c\017\106\020\uff8c\021" +
    "\uff8c\022\uff8c\023\uff8c\024\uff8c\025\uff8c\026\uff8c\030\uff8c" +
    "\031\uff8c\035\uff8c\037\uff8c\042\105\051\uff8c\001\002\000" +
    "\046\005\uff94\006\uff94\007\uff94\010\uff94\011\uff94\014\uff94" +
    "\020\uff94\021\uff94\022\uff94\023\uff94\024\uff94\025\uff94\026" +
    "\uff94\030\uff94\031\uff94\035\uff94\037\uff94\051\uff94\001\002" +
    "\000\054\005\uff92\006\uff92\007\uff92\010\uff92\011\uff92\012" +
    "\123\014\uff92\017\106\020\uff92\021\uff92\022\uff92\023\uff92" +
    "\024\uff92\025\uff92\026\uff92\030\uff92\031\uff92\035\uff92\037" +
    "\uff92\042\105\051\uff92\001\002\000\030\003\160\006\100" +
    "\013\071\032\063\033\052\034\076\044\060\045\102\066" +
    "\065\072\061\073\101\001\002\000\030\003\160\006\100" +
    "\013\071\032\063\033\052\034\076\044\060\045\102\066" +
    "\065\072\061\073\101\001\002\000\024\003\171\013\071" +
    "\033\052\034\076\044\060\045\102\066\065\072\061\073" +
    "\101\001\002\000\030\003\175\006\100\013\071\032\063" +
    "\033\052\034\076\044\060\045\102\066\065\072\061\073" +
    "\101\001\002\000\030\003\160\006\100\013\071\032\063" +
    "\033\052\034\076\044\060\045\102\066\065\072\061\073" +
    "\101\001\002\000\030\003\160\006\100\013\071\032\063" +
    "\033\052\034\076\044\060\045\102\066\065\072\061\073" +
    "\101\001\002\000\024\003\171\013\071\033\052\034\076" +
    "\044\060\045\102\066\065\072\061\073\101\001\002\000" +
    "\030\003\160\006\100\013\071\032\063\033\052\034\076" +
    "\044\060\045\102\066\065\072\061\073\101\001\002\000" +
    "\030\003\160\006\100\013\071\032\063\033\052\034\076" +
    "\044\060\045\102\066\065\072\061\073\101\001\002\000" +
    "\030\003\156\006\100\013\071\032\063\033\052\034\076" +
    "\044\060\045\102\066\065\072\061\073\101\001\002\000" +
    "\034\014\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4" +
    "\025\uffa4\026\uffa4\030\uffa4\031\uffa4\035\uffa4\037\uffa4\051" +
    "\uffa4\001\002\000\022\005\151\006\145\007\120\010\122" +
    "\011\121\012\123\017\106\042\105\001\002\000\016\014" +
    "\uffaf\020\uffaf\031\161\035\uffaf\037\uffaf\051\uffaf\001\002" +
    "\000\026\005\151\006\145\007\120\010\122\011\121\012" +
    "\123\017\106\030\154\031\146\042\105\001\002\000\030" +
    "\003\163\006\100\013\071\032\063\033\052\034\076\044" +
    "\060\045\102\066\065\072\061\073\101\001\002\000\034" +
    "\014\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025" +
    "\uffa9\026\uffa9\030\164\031\uffa9\035\uffa9\037\uffa9\051\uffa9" +
    "\001\002\000\054\005\151\006\145\007\120\010\122\011" +
    "\121\012\123\014\uffa7\017\106\020\uffa7\021\uffa7\022\uffa7" +
    "\023\uffa7\024\uffa7\025\uffa7\026\uffa7\030\154\031\uffa7\035" +
    "\uffa7\037\uffa7\042\105\051\uffa7\001\002\000\030\003\166" +
    "\006\100\013\071\032\063\033\052\034\076\044\060\045" +
    "\102\066\065\072\061\073\101\001\002\000\034\014\uffa5" +
    "\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026" +
    "\uffa5\030\uffa5\031\uffa5\035\uffa5\037\uffa5\051\uffa5\001\002" +
    "\000\054\005\151\006\145\007\120\010\122\011\121\012" +
    "\123\014\uffa3\017\106\020\uffa3\021\uffa3\022\uffa3\023\uffa3" +
    "\024\uffa3\025\uffa3\026\uffa3\030\uffa3\031\uffa3\035\uffa3\037" +
    "\uffa3\042\105\051\uffa3\001\002\000\016\014\uffac\020\uffac" +
    "\031\161\035\uffac\037\uffac\051\uffac\001\002\000\046\005" +
    "\uff9c\006\uff9c\007\132\010\134\011\133\014\uff9c\020\uff9c" +
    "\021\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c\030" +
    "\uff9c\031\uff9c\035\uff9c\037\uff9c\051\uff9c\001\002\000\016" +
    "\007\120\010\122\011\121\012\123\017\106\042\105\001" +
    "\002\000\016\014\uffb8\020\uffb8\031\161\035\uffb8\037\uffb8" +
    "\051\uffb8\001\002\000\016\014\uffb2\020\uffb2\031\161\035" +
    "\uffb2\037\uffb2\051\uffb2\001\002\000\034\014\uffa8\020\uffa8" +
    "\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\030" +
    "\164\031\uffa8\035\uffa8\037\uffa8\051\uffa8\001\002\000\024" +
    "\005\151\006\145\007\120\010\122\011\121\012\123\017" +
    "\106\030\154\042\105\001\002\000\046\005\uff99\006\uff99" +
    "\007\132\010\134\011\133\014\uff99\020\uff99\021\uff99\022" +
    "\uff99\023\uff99\024\uff99\025\uff99\026\uff99\030\uff99\031\uff99" +
    "\035\uff99\037\uff99\051\uff99\001\002\000\016\014\uffbb\020" +
    "\uffbb\031\161\035\uffbb\037\uffbb\051\uffbb\001\002\000\016" +
    "\014\uffb5\020\uffb5\031\161\035\uffb5\037\uffb5\051\uffb5\001" +
    "\002\000\024\003\206\013\071\033\052\034\076\044\060" +
    "\045\102\066\065\072\061\073\101\001\002\000\024\003" +
    "\204\013\071\033\052\034\076\044\060\045\102\066\065" +
    "\072\061\073\101\001\002\000\046\005\uff9a\006\uff9a\007" +
    "\132\010\134\011\133\014\uff9a\020\uff9a\021\uff9a\022\uff9a" +
    "\023\uff9a\024\uff9a\025\uff9a\026\uff9a\030\uff9a\031\uff9a\035" +
    "\uff9a\037\uff9a\051\uff9a\001\002\000\054\005\uff98\006\uff98" +
    "\007\120\010\122\011\121\012\123\014\uff98\017\106\020" +
    "\uff98\021\uff98\022\uff98\023\uff98\024\uff98\025\uff98\026\uff98" +
    "\030\uff98\031\uff98\035\uff98\037\uff98\042\105\051\uff98\001" +
    "\002\000\046\005\uff9d\006\uff9d\007\132\010\134\011\133" +
    "\014\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025" +
    "\uff9d\026\uff9d\030\uff9d\031\uff9d\035\uff9d\037\uff9d\051\uff9d" +
    "\001\002\000\054\005\uff9b\006\uff9b\007\120\010\122\011" +
    "\121\012\123\014\uff9b\017\106\020\uff9b\021\uff9b\022\uff9b" +
    "\023\uff9b\024\uff9b\025\uff9b\026\uff9b\030\uff9b\031\uff9b\035" +
    "\uff9b\037\uff9b\042\105\051\uff9b\001\002\000\004\014\210" +
    "\001\002\000\054\005\uff7a\006\uff7a\007\uff7a\010\uff7a\011" +
    "\uff7a\012\uff7a\014\uff7a\017\uff7a\020\uff7a\021\uff7a\022\uff7a" +
    "\023\uff7a\024\uff7a\025\uff7a\026\uff7a\030\uff7a\031\uff7a\035" +
    "\uff7a\037\uff7a\042\uff7a\051\uff7a\001\002\000\030\003\232" +
    "\006\100\013\071\032\063\033\052\034\076\044\060\045" +
    "\102\066\065\072\061\073\101\001\002\000\030\003\230" +
    "\006\100\013\071\032\063\033\052\034\076\044\060\045" +
    "\102\066\065\072\061\073\101\001\002\000\030\003\226" +
    "\006\100\013\071\032\063\033\052\034\076\044\060\045" +
    "\102\066\065\072\061\073\101\001\002\000\030\003\224" +
    "\006\100\013\071\032\063\033\052\034\076\044\060\045" +
    "\102\066\065\072\061\073\101\001\002\000\030\003\222" +
    "\006\100\013\071\032\063\033\052\034\076\044\060\045" +
    "\102\066\065\072\061\073\101\001\002\000\030\003\220" +
    "\006\100\013\071\032\063\033\052\034\076\044\060\045" +
    "\102\066\065\072\061\073\101\001\002\000\016\014\uffb9" +
    "\020\uffb9\031\161\035\uffb9\037\uffb9\051\uffb9\001\002\000" +
    "\040\005\151\006\145\007\120\010\122\011\121\012\123" +
    "\014\uffb7\017\106\020\uffb7\030\154\031\146\035\uffb7\037" +
    "\uffb7\042\105\051\uffb7\001\002\000\016\014\uffb3\020\uffb3" +
    "\031\161\035\uffb3\037\uffb3\051\uffb3\001\002\000\040\005" +
    "\151\006\145\007\120\010\122\011\121\012\123\014\uffb1" +
    "\017\106\020\uffb1\030\154\031\146\035\uffb1\037\uffb1\042" +
    "\105\051\uffb1\001\002\000\016\014\uffbc\020\uffbc\031\161" +
    "\035\uffbc\037\uffbc\051\uffbc\001\002\000\040\005\151\006" +
    "\145\007\120\010\122\011\121\012\123\014\uffba\017\106" +
    "\020\uffba\030\154\031\146\035\uffba\037\uffba\042\105\051" +
    "\uffba\001\002\000\016\014\uffad\020\uffad\031\161\035\uffad" +
    "\037\uffad\051\uffad\001\002\000\040\005\151\006\145\007" +
    "\120\010\122\011\121\012\123\014\uffab\017\106\020\uffab" +
    "\030\154\031\146\035\uffab\037\uffab\042\105\051\uffab\001" +
    "\002\000\016\014\uffb6\020\uffb6\031\161\035\uffb6\037\uffb6" +
    "\051\uffb6\001\002\000\040\005\151\006\145\007\120\010" +
    "\122\011\121\012\123\014\uffb4\017\106\020\uffb4\030\154" +
    "\031\146\035\uffb4\037\uffb4\042\105\051\uffb4\001\002\000" +
    "\016\014\uffb0\020\uffb0\031\161\035\uffb0\037\uffb0\051\uffb0" +
    "\001\002\000\040\005\151\006\145\007\120\010\122\011" +
    "\121\012\123\014\uffae\017\106\020\uffae\030\154\031\146" +
    "\035\uffae\037\uffae\042\105\051\uffae\001\002\000\004\072" +
    "\234\001\002\000\054\005\uff5f\006\uff5f\007\uff5f\010\uff5f" +
    "\011\uff5f\012\uff5f\014\uff5f\017\uff5f\020\uff5f\021\uff5f\022" +
    "\uff5f\023\uff5f\024\uff5f\025\uff5f\026\uff5f\030\uff5f\031\uff5f" +
    "\035\uff5f\037\uff5f\042\uff5f\051\uff5f\001\002\000\024\003" +
    "\236\013\071\033\052\034\076\044\060\045\102\066\065" +
    "\072\061\073\101\001\002\000\052\005\uff88\006\uff88\007" +
    "\uff88\010\uff88\011\uff88\014\uff88\017\106\020\uff88\021\uff88" +
    "\022\uff88\023\uff88\024\uff88\025\uff88\026\uff88\030\uff88\031" +
    "\uff88\035\uff88\037\uff88\042\105\051\uff88\001\002\000\046" +
    "\005\uff8a\006\uff8a\007\uff8a\010\uff8a\011\uff8a\014\uff8a\020" +
    "\uff8a\021\uff8a\022\uff8a\023\uff8a\024\uff8a\025\uff8a\026\uff8a" +
    "\030\uff8a\031\uff8a\035\uff8a\037\uff8a\051\uff8a\001\002\000" +
    "\034\014\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1" +
    "\025\uffa1\026\uffa1\030\uffa1\031\uffa1\035\uffa1\037\uffa1\051" +
    "\uffa1\001\002\000\054\005\151\006\145\007\120\010\122" +
    "\011\121\012\123\014\uffa0\017\106\020\uffa0\021\uffa0\022" +
    "\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0\030\uffa0\031\uffa0" +
    "\035\uffa0\037\uffa0\042\105\051\uffa0\001\002\000\032\003" +
    "\uff75\006\uff75\013\uff75\014\uff77\032\uff75\033\uff75\034\uff75" +
    "\044\uff75\045\uff75\066\uff75\072\uff75\073\uff75\001\002\000" +
    "\004\014\247\001\002\000\030\003\077\006\100\013\071" +
    "\032\063\033\052\034\076\044\060\045\102\066\065\072" +
    "\061\073\101\001\002\000\006\014\uff78\035\246\001\002" +
    "\000\030\003\uff76\006\uff76\013\uff76\032\uff76\033\uff76\034" +
    "\uff76\044\uff76\045\uff76\066\uff76\072\uff76\073\uff76\001\002" +
    "\000\054\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012" +
    "\uffd9\014\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\026\uffd9\030\uffd9\031\uffd9\035\uffd9\037" +
    "\uffd9\042\uffd9\051\uffd9\001\002\000\054\005\uff85\006\uff85" +
    "\007\uff85\010\uff85\011\uff85\012\uff85\014\uff85\017\106\020" +
    "\uff85\021\uff85\022\uff85\023\uff85\024\uff85\025\uff85\026\uff85" +
    "\030\uff85\031\uff85\035\uff85\037\uff85\042\105\051\uff85\001" +
    "\002\000\050\005\uff86\006\uff86\007\uff86\010\uff86\011\uff86" +
    "\012\uff86\014\uff86\020\uff86\021\uff86\022\uff86\023\uff86\024" +
    "\uff86\025\uff86\026\uff86\030\uff86\031\uff86\035\uff86\037\uff86" +
    "\051\uff86\001\002\000\020\003\253\013\071\033\052\034" +
    "\076\066\065\072\061\073\101\001\002\000\052\005\uff7f" +
    "\006\uff7f\007\uff7f\010\uff7f\011\uff7f\012\uff7f\014\uff7f\017" +
    "\106\020\uff7f\021\uff7f\022\uff7f\023\uff7f\024\uff7f\025\uff7f" +
    "\026\uff7f\030\uff7f\031\uff7f\035\uff7f\037\uff7f\051\uff7f\001" +
    "\002\000\052\005\uff81\006\uff81\007\uff81\010\uff81\011\uff81" +
    "\012\uff81\014\uff81\017\113\020\uff81\021\uff81\022\uff81\023" +
    "\uff81\024\uff81\025\uff81\026\uff81\030\uff81\031\uff81\035\uff81" +
    "\037\uff81\051\uff81\001\002\000\026\014\uffdb\017\uffdb\035" +
    "\uffdb\037\uffdb\040\uffdb\041\uffdb\043\uffdb\047\uffdb\050\uffdb" +
    "\051\uffdb\001\002\000\010\067\uffef\070\uffef\072\uffef\001" +
    "\002\000\012\015\uff72\017\uff72\037\uff72\072\uff72\001\002" +
    "\000\016\015\uff6d\017\uff6d\037\uff6d\044\uff6d\045\uff6d\072" +
    "\uff6d\001\002\000\012\016\ufff2\067\ufff2\070\ufff2\072\027" +
    "\001\002\000\012\016\ufff6\067\ufff6\070\ufff6\072\ufff6\001" +
    "\002\000\010\016\ufff7\067\033\070\034\001\002\000\004" +
    "\043\266\001\002\000\010\016\ufff3\067\ufff3\070\ufff3\001" +
    "\002\000\004\072\267\001\002\000\004\013\270\001\002" +
    "\000\012\004\uffe3\014\uffe5\027\uffe3\072\uffe3\001\002\000" +
    "\004\014\276\001\002\000\010\004\040\027\041\072\035" +
    "\001\002\000\006\014\uffe6\035\275\001\002\000\006\014" +
    "\uffe2\035\uffe2\001\002\000\010\004\uffe4\027\uffe4\072\uffe4" +
    "\001\002\000\006\015\277\036\300\001\002\000\060\003" +
    "\uffe0\004\uffe0\006\uffe0\013\uffe0\027\uffe0\032\uffe0\033\uffe0" +
    "\034\uffe0\037\uffe0\044\uffe0\045\uffe0\052\uffe0\054\uffe0\056" +
    "\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0" +
    "\066\uffe0\072\uffe0\073\uffe0\001\002\000\010\004\040\027" +
    "\041\072\035\001\002\000\004\015\302\001\002\000\060" +
    "\003\uffe0\004\uffe0\006\uffe0\013\uffe0\027\uffe0\032\uffe0\033" +
    "\uffe0\034\uffe0\037\uffe0\044\uffe0\045\uffe0\052\uffe0\054\uffe0" +
    "\056\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\065" +
    "\uffe0\066\uffe0\072\uffe0\073\uffe0\001\002\000\060\003\077" +
    "\004\040\006\100\013\071\027\041\032\063\033\052\034" +
    "\076\037\311\044\060\045\102\052\314\054\324\056\322" +
    "\060\331\061\307\062\305\063\332\064\317\065\320\066" +
    "\065\072\315\073\101\001\002\000\070\003\uff69\004\uff69" +
    "\006\uff69\013\uff69\014\uff69\016\uff69\027\uff69\032\uff69\033" +
    "\uff69\034\uff69\037\uff69\044\uff69\045\uff69\052\uff69\054\uff69" +
    "\055\uff69\056\uff69\057\uff69\060\uff69\061\uff69\062\uff69\063" +
    "\uff69\064\uff69\065\uff69\066\uff69\072\uff69\073\uff69\001\002" +
    "\000\004\037\u012f\001\002\000\004\051\u0126\001\002\000" +
    "\006\003\u011b\013\u011c\001\002\000\070\003\uff61\004\uff61" +
    "\006\uff61\013\uff61\014\uff61\016\uff61\027\uff61\032\uff61\033" +
    "\uff61\034\uff61\037\uff61\044\uff61\045\uff61\052\uff61\054\uff61" +
    "\055\uff61\056\uff61\057\uff61\060\uff61\061\uff61\062\uff61\063" +
    "\uff61\064\uff61\065\uff61\066\uff61\072\uff61\073\uff61\001\002" +
    "\000\070\003\uff60\004\uff60\006\uff60\013\uff60\014\uff60\016" +
    "\uff60\027\uff60\032\uff60\033\uff60\034\uff60\037\uff60\044\uff60" +
    "\045\uff60\052\uff60\054\uff60\055\uff60\056\uff60\057\uff60\060" +
    "\uff60\061\uff60\062\uff60\063\uff60\064\uff60\065\uff60\066\uff60" +
    "\072\uff60\073\uff60\001\002\000\070\003\uff66\004\uff66\006" +
    "\uff66\013\uff66\014\uff66\016\uff66\027\uff66\032\uff66\033\uff66" +
    "\034\uff66\037\uff66\044\uff66\045\uff66\052\uff66\054\uff66\055" +
    "\uff66\056\uff66\057\uff66\060\uff66\061\uff66\062\uff66\063\uff66" +
    "\064\uff66\065\uff66\066\uff66\072\uff66\073\uff66\001\002\000" +
    "\070\003\uff65\004\uff65\006\uff65\013\uff65\014\uff65\016\uff65" +
    "\027\uff65\032\uff65\033\uff65\034\uff65\037\uff65\044\uff65\045" +
    "\uff65\052\uff65\054\uff65\055\uff65\056\uff65\057\uff65\060\uff65" +
    "\061\uff65\062\uff65\063\uff65\064\uff65\065\uff65\066\uff65\072" +
    "\uff65\073\uff65\001\002\000\006\003\u010e\013\u010f\001\002" +
    "\000\054\005\uff5e\006\uff5e\007\uff5e\010\uff5e\011\uff5e\012" +
    "\uff5e\013\242\017\uff5e\021\uff5e\022\uff5e\023\uff5e\024\uff5e" +
    "\025\uff5e\026\uff5e\030\uff5e\031\uff5e\042\uff5e\044\uff6e\045" +
    "\uff6e\051\uff5e\072\uff6e\001\002\000\070\003\uffc2\004\uffc2" +
    "\006\uffc2\013\uffc2\014\uffc2\016\uffc2\027\uffc2\032\uffc2\033" +
    "\uffc2\034\uffc2\037\uffc2\044\uffc2\045\uffc2\052\uffc2\054\uffc2" +
    "\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063" +
    "\uffc2\064\uffc2\065\uffc2\066\uffc2\072\uffc2\073\uffc2\001\002" +
    "\000\004\013\u010a\001\002\000\030\003\077\006\100\013" +
    "\071\032\063\033\052\034\076\044\060\045\102\066\065" +
    "\072\061\073\101\001\002\000\070\003\uffc3\004\uffc3\006" +
    "\uffc3\013\uffc3\014\uffc3\016\uffc3\027\uffc3\032\uffc3\033\uffc3" +
    "\034\uffc3\037\uffc3\044\uffc3\045\uffc3\052\uffc3\054\uffc3\055" +
    "\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3" +
    "\064\uffc3\065\uffc3\066\uffc3\072\uffc3\073\uffc3\001\002\000" +
    "\004\037\u0105\001\002\000\066\003\uffe1\004\uffe1\006\uffe1" +
    "\013\uffe1\016\uffe1\027\uffe1\032\uffe1\033\uffe1\034\uffe1\037" +
    "\uffe1\044\uffe1\045\uffe1\052\uffe1\054\uffe1\055\uffe1\056\uffe1" +
    "\057\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065" +
    "\uffe1\066\uffe1\072\uffe1\073\uffe1\001\002\000\004\013\363" +
    "\001\002\000\006\037\350\051\351\001\002\000\070\003" +
    "\uff62\004\uff62\006\uff62\013\uff62\014\uff62\016\uff62\027\uff62" +
    "\032\uff62\033\uff62\034\uff62\037\uff62\044\uff62\045\uff62\052" +
    "\uff62\054\uff62\055\uff62\056\uff62\057\uff62\060\uff62\061\uff62" +
    "\062\uff62\063\uff62\064\uff62\065\uff62\066\uff62\072\uff62\073" +
    "\uff62\001\002\000\070\003\uff64\004\uff64\006\uff64\013\uff64" +
    "\014\uff64\016\uff64\027\uff64\032\uff64\033\uff64\034\uff64\037" +
    "\uff64\044\uff64\045\uff64\052\uff64\054\uff64\055\uff64\056\uff64" +
    "\057\uff64\060\uff64\061\uff64\062\uff64\063\uff64\064\uff64\065" +
    "\uff64\066\uff64\072\uff64\073\uff64\001\002\000\070\003\uff67" +
    "\004\uff67\006\uff67\013\uff67\014\uff67\016\uff67\027\uff67\032" +
    "\uff67\033\uff67\034\uff67\037\uff67\044\uff67\045\uff67\052\uff67" +
    "\054\uff67\055\uff67\056\uff67\057\uff67\060\uff67\061\uff67\062" +
    "\uff67\063\uff67\064\uff67\065\uff67\066\uff67\072\uff67\073\uff67" +
    "\001\002\000\006\003\341\013\342\001\002\000\004\013" +
    "\335\001\002\000\070\003\uff63\004\uff63\006\uff63\013\uff63" +
    "\014\uff63\016\uff63\027\uff63\032\uff63\033\uff63\034\uff63\037" +
    "\uff63\044\uff63\045\uff63\052\uff63\054\uff63\055\uff63\056\uff63" +
    "\057\uff63\060\uff63\061\uff63\062\uff63\063\uff63\064\uff63\065" +
    "\uff63\066\uff63\072\uff63\073\uff63\001\002\000\070\003\uff68" +
    "\004\uff68\006\uff68\013\uff68\014\uff68\016\uff68\027\uff68\032" +
    "\uff68\033\uff68\034\uff68\037\uff68\044\uff68\045\uff68\052\uff68" +
    "\054\uff68\055\uff68\056\uff68\057\uff68\060\uff68\061\uff68\062" +
    "\uff68\063\uff68\064\uff68\065\uff68\066\uff68\072\uff68\073\uff68" +
    "\001\002\000\030\003\077\006\100\013\071\032\063\033" +
    "\052\034\076\044\060\045\102\066\065\072\061\073\101" +
    "\001\002\000\004\014\337\001\002\000\004\037\340\001" +
    "\002\000\070\003\uffc1\004\uffc1\006\uffc1\013\uffc1\014\uffc1" +
    "\016\uffc1\027\uffc1\032\uffc1\033\uffc1\034\uffc1\037\uffc1\044" +
    "\uffc1\045\uffc1\052\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1" +
    "\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066" +
    "\uffc1\072\uffc1\073\uffc1\001\002\000\070\003\uffc8\004\uffc8" +
    "\006\uffc8\013\uffc8\014\uffc8\016\uffc8\027\uffc8\032\uffc8\033" +
    "\uffc8\034\uffc8\037\uffc8\044\uffc8\045\uffc8\052\uffc8\054\uffc8" +
    "\055\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063" +
    "\uffc8\064\uffc8\065\uffc8\066\uffc8\072\uffc8\073\uffc8\001\002" +
    "\000\030\003\077\006\100\013\071\032\063\033\052\034" +
    "\076\044\060\045\102\066\065\072\061\073\101\001\002" +
    "\000\004\014\344\001\002\000\004\015\345\001\002\000" +
    "\060\003\uffe0\004\uffe0\006\uffe0\013\uffe0\016\uffe0\027\uffe0" +
    "\032\uffe0\033\uffe0\034\uffe0\037\uffe0\044\uffe0\045\uffe0\052" +
    "\uffe0\054\uffe0\056\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0" +
    "\064\uffe0\066\uffe0\072\uffe0\073\uffe0\001\002\000\060\003" +
    "\077\004\040\006\100\013\071\016\347\027\041\032\063" +
    "\033\052\034\076\037\311\044\060\045\102\052\314\054" +
    "\324\056\322\060\331\061\307\062\305\063\332\064\317" +
    "\066\065\072\315\073\101\001\002\000\070\003\uffc9\004" +
    "\uffc9\006\uffc9\013\uffc9\014\uffc9\016\uffc9\027\uffc9\032\uffc9" +
    "\033\uffc9\034\uffc9\037\uffc9\044\uffc9\045\uffc9\052\uffc9\054" +
    "\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9" +
    "\063\uffc9\064\uffc9\065\uffc9\066\uffc9\072\uffc9\073\uffc9\001" +
    "\002\000\070\003\uff6a\004\uff6a\006\uff6a\013\uff6a\014\uff6a" +
    "\016\uff6a\027\uff6a\032\uff6a\033\uff6a\034\uff6a\037\uff6a\044" +
    "\uff6a\045\uff6a\052\uff6a\054\uff6a\055\uff6a\056\uff6a\057\uff6a" +
    "\060\uff6a\061\uff6a\062\uff6a\063\uff6a\064\uff6a\065\uff6a\066" +
    "\uff6a\072\uff6a\073\uff6a\001\002\000\032\003\077\006\100" +
    "\013\071\032\063\033\052\034\076\044\060\045\102\046" +
    "\352\066\065\072\061\073\101\001\002\000\010\004\040" +
    "\027\041\072\355\001\002\000\004\037\354\001\002\000" +
    "\070\003\uffd8\004\uffd8\006\uffd8\013\uffd8\014\uffd8\016\uffd8" +
    "\027\uffd8\032\uffd8\033\uffd8\034\uffd8\037\uffd8\044\uffd8\045" +
    "\uffd8\052\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8" +
    "\061\uffd8\062\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8\072" +
    "\uffd8\073\uffd8\001\002\000\014\013\242\017\uff6e\037\uff6e" +
    "\044\uff6e\045\uff6e\001\002\000\004\037\362\001\002\000" +
    "\006\017\uffda\037\uffda\001\002\000\006\017\045\037\361" +
    "\001\002\000\070\003\uffd7\004\uffd7\006\uffd7\013\uffd7\014" +
    "\uffd7\016\uffd7\027\uffd7\032\uffd7\033\uffd7\034\uffd7\037\uffd7" +
    "\044\uffd7\045\uffd7\052\uffd7\054\uffd7\055\uffd7\056\uffd7\057" +
    "\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7" +
    "\066\uffd7\072\uffd7\073\uffd7\001\002\000\070\003\uffd6\004" +
    "\uffd6\006\uffd6\013\uffd6\014\uffd6\016\uffd6\027\uffd6\032\uffd6" +
    "\033\uffd6\034\uffd6\037\uffd6\044\uffd6\045\uffd6\052\uffd6\054" +
    "\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6" +
    "\063\uffd6\064\uffd6\065\uffd6\066\uffd6\072\uffd6\073\uffd6\001" +
    "\002\000\030\003\077\006\100\013\071\032\063\033\052" +
    "\034\076\044\060\045\102\066\065\072\061\073\101\001" +
    "\002\000\004\014\365\001\002\000\004\015\366\001\002" +
    "\000\006\055\uffcb\057\uffcb\001\002\000\006\055\372\057" +
    "\370\001\002\000\004\036\u0101\001\002\000\004\016\u0100" +
    "\001\002\000\004\013\373\001\002\000\010\033\052\034" +
    "\076\073\101\001\002\000\004\014\375\001\002\000\004" +
    "\036\376\001\002\000\062\003\uffe0\004\uffe0\006\uffe0\013" +
    "\uffe0\027\uffe0\032\uffe0\033\uffe0\034\uffe0\037\uffe0\044\uffe0" +
    "\045\uffe0\052\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060" +
    "\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\066\uffe0\072\uffe0" +
    "\073\uffe0\001\002\000\062\003\077\004\040\006\100\013" +
    "\071\027\041\032\063\033\052\034\076\037\311\044\060" +
    "\045\102\052\314\054\324\055\uffcc\056\322\057\uffcc\060" +
    "\331\061\307\062\305\063\332\064\317\066\065\072\315" +
    "\073\101\001\002\000\070\003\uffcd\004\uffcd\006\uffcd\013" +
    "\uffcd\014\uffcd\016\uffcd\027\uffcd\032\uffcd\033\uffcd\034\uffcd" +
    "\037\uffcd\044\uffcd\045\uffcd\052\uffcd\054\uffcd\055\uffcd\056" +
    "\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd" +
    "\065\uffcd\066\uffcd\072\uffcd\073\uffcd\001\002\000\056\003" +
    "\uffe0\004\uffe0\006\uffe0\013\uffe0\027\uffe0\032\uffe0\033\uffe0" +
    "\034\uffe0\037\uffe0\044\uffe0\045\uffe0\052\uffe0\054\uffe0\056" +
    "\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\066\uffe0" +
    "\072\uffe0\073\uffe0\001\002\000\056\003\077\004\040\006" +
    "\100\013\071\027\041\032\063\033\052\034\076\037\311" +
    "\044\060\045\102\052\314\054\324\056\u0103\060\331\061" +
    "\307\062\305\063\332\064\317\066\065\072\315\073\101" +
    "\001\002\000\004\037\u0104\001\002\000\060\003\uffc7\004" +
    "\uffc7\006\uffc7\013\uffc7\016\uffca\027\uffc7\032\uffc7\033\uffc7" +
    "\034\uffc7\037\uffc7\044\uffc7\045\uffc7\052\uffc7\054\uffc7\056" +
    "\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\066\uffc7" +
    "\072\uffc7\073\uffc7\001\002\000\070\003\uffc7\004\uffc7\006" +
    "\uffc7\013\uffc7\014\uffc7\016\uffc7\027\uffc7\032\uffc7\033\uffc7" +
    "\034\uffc7\037\uffc7\044\uffc7\045\uffc7\052\uffc7\054\uffc7\055" +
    "\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7" +
    "\064\uffc7\065\uffc7\066\uffc7\072\uffc7\073\uffc7\001\002\000" +
    "\004\037\uffdf\001\002\000\004\037\u0108\001\002\000\004" +
    "\016\u0109\001\002\000\022\016\uffe8\040\uffe8\041\uffe8\043" +
    "\uffe8\047\uffe8\050\uffe8\067\uffe8\070\uffe8\001\002\000\030" +
    "\003\077\006\100\013\071\032\063\033\052\034\076\044" +
    "\060\045\102\066\065\072\061\073\101\001\002\000\004" +
    "\014\u010c\001\002\000\004\037\u010d\001\002\000\070\003" +
    "\uffc0\004\uffc0\006\uffc0\013\uffc0\014\uffc0\016\uffc0\027\uffc0" +
    "\032\uffc0\033\uffc0\034\uffc0\037\uffc0\044\uffc0\045\uffc0\052" +
    "\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0" +
    "\062\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0\072\uffc0\073" +
    "\uffc0\001\002\000\070\003\uffd1\004\uffd1\006\uffd1\013\uffd1" +
    "\014\uffd1\016\uffd1\027\uffd1\032\uffd1\033\uffd1\034\uffd1\037" +
    "\uffd1\044\uffd1\045\uffd1\052\uffd1\054\uffd1\055\uffd1\056\uffd1" +
    "\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1\065" +
    "\uffd1\066\uffd1\072\uffd1\073\uffd1\001\002\000\030\003\077" +
    "\006\100\013\071\032\063\033\052\034\076\044\060\045" +
    "\102\066\065\072\061\073\101\001\002\000\004\014\u0111" +
    "\001\002\000\004\015\u0112\001\002\000\060\003\uffe0\004" +
    "\uffe0\006\uffe0\013\uffe0\016\uffe0\027\uffe0\032\uffe0\033\uffe0" +
    "\034\uffe0\037\uffe0\044\uffe0\045\uffe0\052\uffe0\054\uffe0\056" +
    "\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\066\uffe0" +
    "\072\uffe0\073\uffe0\001\002\000\060\003\077\004\040\006" +
    "\100\013\071\016\u0114\027\041\032\063\033\052\034\076" +
    "\037\311\044\060\045\102\052\314\054\324\056\322\060" +
    "\331\061\307\062\305\063\332\064\317\066\065\072\315" +
    "\073\101\001\002\000\072\003\uffce\004\uffce\006\uffce\013" +
    "\uffce\014\uffce\016\uffce\027\uffce\032\uffce\033\uffce\034\uffce" +
    "\037\uffce\044\uffce\045\uffce\052\uffce\053\u0115\054\uffce\055" +
    "\uffce\056\uffce\057\uffce\060\uffce\061\uffce\062\uffce\063\uffce" +
    "\064\uffce\065\uffce\066\uffce\072\uffce\073\uffce\001\002\000" +
    "\006\003\u0117\015\u0118\001\002\000\070\003\uffd2\004\uffd2" +
    "\006\uffd2\013\uffd2\014\uffd2\016\uffd2\027\uffd2\032\uffd2\033" +
    "\uffd2\034\uffd2\037\uffd2\044\uffd2\045\uffd2\052\uffd2\054\uffd2" +
    "\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063" +
    "\uffd2\064\uffd2\065\uffd2\066\uffd2\072\uffd2\073\uffd2\001\002" +
    "\000\070\003\uffcf\004\uffcf\006\uffcf\013\uffcf\014\uffcf\016" +
    "\uffcf\027\uffcf\032\uffcf\033\uffcf\034\uffcf\037\uffcf\044\uffcf" +
    "\045\uffcf\052\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\060" +
    "\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf\066\uffcf" +
    "\072\uffcf\073\uffcf\001\002\000\060\003\uffe0\004\uffe0\006" +
    "\uffe0\013\uffe0\016\uffe0\027\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\037\uffe0\044\uffe0\045\uffe0\052\uffe0\054\uffe0\056\uffe0\060" +
    "\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\066\uffe0\072\uffe0" +
    "\073\uffe0\001\002\000\060\003\077\004\040\006\100\013" +
    "\071\016\u011a\027\041\032\063\033\052\034\076\037\311" +
    "\044\060\045\102\052\314\054\324\056\322\060\331\061" +
    "\307\062\305\063\332\064\317\066\065\072\315\073\101" +
    "\001\002\000\070\003\uffd0\004\uffd0\006\uffd0\013\uffd0\014" +
    "\uffd0\016\uffd0\027\uffd0\032\uffd0\033\uffd0\034\uffd0\037\uffd0" +
    "\044\uffd0\045\uffd0\052\uffd0\054\uffd0\055\uffd0\056\uffd0\057" +
    "\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0" +
    "\066\uffd0\072\uffd0\073\uffd0\001\002\000\070\003\uffc4\004" +
    "\uffc4\006\uffc4\013\uffc4\014\uffc4\016\uffc4\027\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\037\uffc4\044\uffc4\045\uffc4\052\uffc4\054" +
    "\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4" +
    "\063\uffc4\064\uffc4\065\uffc4\066\uffc4\072\uffc4\073\uffc4\001" +
    "\002\000\056\003\077\004\040\006\100\013\071\027\041" +
    "\032\063\033\052\034\076\037\311\044\060\045\102\052" +
    "\314\054\324\056\322\060\331\061\307\062\305\063\332" +
    "\064\317\066\065\072\315\073\101\001\002\000\004\037" +
    "\u011e\001\002\000\030\003\077\006\100\013\071\032\063" +
    "\033\052\034\076\044\060\045\102\066\065\072\061\073" +
    "\101\001\002\000\004\037\u0120\001\002\000\056\003\077" +
    "\004\040\006\100\013\071\027\041\032\063\033\052\034" +
    "\076\037\311\044\060\045\102\052\314\054\324\056\322" +
    "\060\331\061\307\062\305\063\332\064\317\066\065\072" +
    "\315\073\101\001\002\000\004\014\u0122\001\002\000\004" +
    "\015\u0123\001\002\000\060\003\uffe0\004\uffe0\006\uffe0\013" +
    "\uffe0\016\uffe0\027\uffe0\032\uffe0\033\uffe0\034\uffe0\037\uffe0" +
    "\044\uffe0\045\uffe0\052\uffe0\054\uffe0\056\uffe0\060\uffe0\061" +
    "\uffe0\062\uffe0\063\uffe0\064\uffe0\066\uffe0\072\uffe0\073\uffe0" +
    "\001\002\000\060\003\077\004\040\006\100\013\071\016" +
    "\u0125\027\041\032\063\033\052\034\076\037\311\044\060" +
    "\045\102\052\314\054\324\056\322\060\331\061\307\062" +
    "\305\063\332\064\317\066\065\072\315\073\101\001\002" +
    "\000\070\003\uffc5\004\uffc5\006\uffc5\013\uffc5\014\uffc5\016" +
    "\uffc5\027\uffc5\032\uffc5\033\uffc5\034\uffc5\037\uffc5\044\uffc5" +
    "\045\uffc5\052\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060" +
    "\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5" +
    "\072\uffc5\073\uffc5\001\002\000\032\003\077\006\100\013" +
    "\071\032\063\033\052\034\076\044\060\045\102\046\u0127" +
    "\066\065\072\061\073\101\001\002\000\010\004\040\027" +
    "\041\072\355\001\002\000\004\037\u0129\001\002\000\070" +
    "\003\uffd5\004\uffd5\006\uffd5\013\uffd5\014\uffd5\016\uffd5\027" +
    "\uffd5\032\uffd5\033\uffd5\034\uffd5\037\uffd5\044\uffd5\045\uffd5" +
    "\052\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061" +
    "\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\072\uffd5" +
    "\073\uffd5\001\002\000\004\037\u012e\001\002\000\006\017" +
    "\uffda\037\uffda\001\002\000\006\017\045\037\u012d\001\002" +
    "\000\070\003\uffd4\004\uffd4\006\uffd4\013\uffd4\014\uffd4\016" +
    "\uffd4\027\uffd4\032\uffd4\033\uffd4\034\uffd4\037\uffd4\044\uffd4" +
    "\045\uffd4\052\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060" +
    "\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4\066\uffd4" +
    "\072\uffd4\073\uffd4\001\002\000\070\003\uffd3\004\uffd3\006" +
    "\uffd3\013\uffd3\014\uffd3\016\uffd3\027\uffd3\032\uffd3\033\uffd3" +
    "\034\uffd3\037\uffd3\044\uffd3\045\uffd3\052\uffd3\054\uffd3\055" +
    "\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3" +
    "\064\uffd3\065\uffd3\066\uffd3\072\uffd3\073\uffd3\001\002\000" +
    "\070\003\uffc6\004\uffc6\006\uffc6\013\uffc6\014\uffc6\016\uffc6" +
    "\027\uffc6\032\uffc6\033\uffc6\034\uffc6\037\uffc6\044\uffc6\045" +
    "\uffc6\052\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6" +
    "\061\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\072" +
    "\uffc6\073\uffc6\001\002\000\060\003\077\004\040\006\100" +
    "\013\071\027\041\032\063\033\052\034\076\037\311\044" +
    "\060\045\102\052\314\054\324\056\322\060\331\061\307" +
    "\062\305\063\332\064\317\065\u0131\066\065\072\315\073" +
    "\101\001\002\000\004\037\u0132\001\002\000\004\016\u0133" +
    "\001\002\000\022\016\uffe7\040\uffe7\041\uffe7\043\uffe7\047" +
    "\uffe7\050\uffe7\067\uffe7\070\uffe7\001\002\000\014\040\ufff8" +
    "\041\ufff8\043\ufff8\047\ufff8\050\ufff8\001\002\000\012\004" +
    "\uffe3\014\uffe5\027\uffe3\072\uffe3\001\002\000\004\014\u0137" +
    "\001\002\000\004\015\u0138\001\002\000\060\003\uffe0\004" +
    "\uffe0\006\uffe0\013\uffe0\016\uffe0\027\uffe0\032\uffe0\033\uffe0" +
    "\034\uffe0\037\uffe0\044\uffe0\045\uffe0\052\uffe0\054\uffe0\056" +
    "\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\066\uffe0" +
    "\072\uffe0\073\uffe0\001\002\000\060\003\077\004\040\006" +
    "\100\013\071\016\u013a\027\041\032\063\033\052\034\076" +
    "\037\311\044\060\045\102\052\314\054\324\056\322\060" +
    "\331\061\307\062\305\063\332\064\317\066\065\072\315" +
    "\073\101\001\002\000\012\016\ufff4\067\ufff4\070\ufff4\072" +
    "\ufff4\001\002\000\004\015\u013c\001\002\000\010\004\uffeb" +
    "\027\uffeb\072\uffeb\001\002\000\010\004\040\027\041\072" +
    "\u013e\001\002\000\012\013\u0135\044\uff6e\045\uff6e\072\uff6e" +
    "\001\002\000\006\016\ufff5\072\ufff5\001\002\000\004\037" +
    "\u0141\001\002\000\010\004\uffec\027\uffec\072\uffec\001\002" +
    "\000\006\016\u0143\072\027\001\002\000\014\040\uffed\041" +
    "\uffed\043\uffed\047\uffed\050\uffed\001\002\000\014\040\uffdd" +
    "\041\uffdd\043\uffdd\047\uffdd\050\uffdd\001\002\000\004\013" +
    "\u0146\001\002\000\004\014\u0147\001\002\000\004\036\u0148" +
    "\001\002\000\004\004\u0149\001\002\000\004\015\u014a\001" +
    "\002\000\060\003\uffe0\004\uffe0\006\uffe0\013\uffe0\027\uffe0" +
    "\032\uffe0\033\uffe0\034\uffe0\037\uffe0\044\uffe0\045\uffe0\052" +
    "\uffe0\054\uffe0\056\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0" +
    "\064\uffe0\065\uffe0\066\uffe0\072\uffe0\073\uffe0\001\002\000" +
    "\060\003\077\004\040\006\100\013\071\027\041\032\063" +
    "\033\052\034\076\037\311\044\060\045\102\052\314\054" +
    "\324\056\322\060\331\061\307\062\305\063\332\064\317" +
    "\065\u014c\066\065\072\315\073\101\001\002\000\004\073" +
    "\u014d\001\002\000\004\037\u014e\001\002\000\004\016\u014f" +
    "\001\002\000\004\002\uffbf\001\002\000\010\033\052\034" +
    "\076\073\101\001\002\000\004\037\u0152\001\002\000\014" +
    "\040\uffde\041\uffde\043\uffde\047\uffde\050\uffde\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0151\000\006\002\003\071\004\001\001\000\002\001" +
    "\001\000\024\055\010\056\013\060\007\061\014\064\021" +
    "\065\022\066\005\067\016\070\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\047\u0143\076\041\077\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\025\001\001\000\010\057\030\072\031\073\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\062\260" +
    "\001\001\000\010\047\036\076\041\077\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\043\001\001\000\002" +
    "\001\001\000\046\004\074\005\067\006\066\007\061\010" +
    "\055\011\052\012\072\013\071\014\065\015\063\016\056" +
    "\017\053\020\046\021\050\022\047\023\054\025\073\026" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\016\250\017\053\020\046\022" +
    "\047\023\054\025\073\026\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\011\237\012\072\013\071\014" +
    "\065\015\063\016\056\017\053\020\046\022\047\023\054" +
    "\025\073\026\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\004\206\005\067\006\066\007\061\010\055\011" +
    "\052\012\072\013\071\014\065\015\063\016\056\017\053" +
    "\020\046\022\047\023\054\025\073\026\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\013" +
    "\115\014\065\015\063\016\056\017\053\020\046\022\047" +
    "\023\054\025\073\026\045\001\001\000\002\001\001\000" +
    "\020\016\103\017\053\020\046\022\047\023\054\025\073" +
    "\026\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\017\111\020\046\022\047\023\054\025\073\026\045" +
    "\001\001\000\044\004\106\005\067\006\066\007\061\010" +
    "\055\011\052\012\072\013\071\014\065\015\063\016\056" +
    "\017\053\020\046\022\047\023\054\025\073\026\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\004\113\005\067\006\066\007" +
    "\061\010\055\011\052\012\072\013\071\014\065\015\063" +
    "\016\056\017\053\020\046\022\047\023\054\025\073\026" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\014\130\015\063\016" +
    "\056\017\053\020\046\022\047\023\054\025\073\026\045" +
    "\001\001\000\024\014\127\015\063\016\056\017\053\020" +
    "\046\022\047\023\054\025\073\026\045\001\001\000\024" +
    "\014\125\015\063\016\056\017\053\020\046\022\047\023" +
    "\054\025\073\026\045\001\001\000\022\015\124\016\056" +
    "\017\053\020\046\022\047\023\054\025\073\026\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\014\140\015\063\016\056\017\053\020\046\022\047" +
    "\023\054\025\073\026\045\001\001\000\024\014\136\015" +
    "\063\016\056\017\053\020\046\022\047\023\054\025\073" +
    "\026\045\001\001\000\024\014\134\015\063\016\056\017" +
    "\053\020\046\022\047\023\054\025\073\026\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\006\177\007\061\010\055\011\052\012\072\013\071\014" +
    "\065\015\063\016\056\017\053\020\046\022\047\023\054" +
    "\025\073\026\045\001\001\000\040\006\176\007\061\010" +
    "\055\011\052\012\072\013\071\014\065\015\063\016\056" +
    "\017\053\020\046\022\047\023\054\025\073\026\045\001" +
    "\001\000\026\013\175\014\065\015\063\016\056\017\053" +
    "\020\046\022\047\023\054\025\073\026\045\001\001\000" +
    "\036\007\173\010\055\011\052\012\072\013\071\014\065" +
    "\015\063\016\056\017\053\020\046\022\047\023\054\025" +
    "\073\026\045\001\001\000\040\006\172\007\061\010\055" +
    "\011\052\012\072\013\071\014\065\015\063\016\056\017" +
    "\053\020\046\022\047\023\054\025\073\026\045\001\001" +
    "\000\040\006\171\007\061\010\055\011\052\012\072\013" +
    "\071\014\065\015\063\016\056\017\053\020\046\022\047" +
    "\023\054\025\073\026\045\001\001\000\026\013\167\014" +
    "\065\015\063\016\056\017\053\020\046\022\047\023\054" +
    "\025\073\026\045\001\001\000\040\006\166\007\061\010" +
    "\055\011\052\012\072\013\071\014\065\015\063\016\056" +
    "\017\053\020\046\022\047\023\054\025\073\026\045\001" +
    "\001\000\040\006\156\007\061\010\055\011\052\012\072" +
    "\013\071\014\065\015\063\016\056\017\053\020\046\022" +
    "\047\023\054\025\073\026\045\001\001\000\034\010\154" +
    "\011\052\012\072\013\071\014\065\015\063\016\056\017" +
    "\053\020\046\022\047\023\054\025\073\026\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\007\161\010\055\011\052\012\072" +
    "\013\071\014\065\015\063\016\056\017\053\020\046\022" +
    "\047\023\054\025\073\026\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\010\164\011\052\012\072\013" +
    "\071\014\065\015\063\016\056\017\053\020\046\022\047" +
    "\023\054\025\073\026\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\013\204\014\065\015\063\016" +
    "\056\017\053\020\046\022\047\023\054\025\073\026\045" +
    "\001\001\000\026\013\202\014\065\015\063\016\056\017" +
    "\053\020\046\022\047\023\054\025\073\026\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\006\230\007\061\010\055\011\052\012\072\013\071\014" +
    "\065\015\063\016\056\017\053\020\046\022\047\023\054" +
    "\025\073\026\045\001\001\000\040\006\226\007\061\010" +
    "\055\011\052\012\072\013\071\014\065\015\063\016\056" +
    "\017\053\020\046\022\047\023\054\025\073\026\045\001" +
    "\001\000\040\006\224\007\061\010\055\011\052\012\072" +
    "\013\071\014\065\015\063\016\056\017\053\020\046\022" +
    "\047\023\054\025\073\026\045\001\001\000\040\006\222" +
    "\007\061\010\055\011\052\012\072\013\071\014\065\015" +
    "\063\016\056\017\053\020\046\022\047\023\054\025\073" +
    "\026\045\001\001\000\040\006\220\007\061\010\055\011" +
    "\052\012\072\013\071\014\065\015\063\016\056\017\053" +
    "\020\046\022\047\023\054\025\073\026\045\001\001\000" +
    "\040\006\216\007\061\010\055\011\052\012\072\013\071" +
    "\014\065\015\063\016\056\017\053\020\046\022\047\023" +
    "\054\025\073\026\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\015\236\016\056\017\053\020\046\022\047\023\054\025" +
    "\073\026\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\242\030" +
    "\243\001\001\000\002\001\001\000\044\004\244\005\067" +
    "\006\066\007\061\010\055\011\052\012\072\013\071\014" +
    "\065\015\063\016\056\017\053\020\046\022\047\023\054" +
    "\025\073\026\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\017\253\020\046\022\047\023\054\025\073\026" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\057\261\063\262\001\001\000\002\001\001" +
    "\000\004\072\263\001\001\000\010\056\264\060\007\061" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\053\270\054\271\001\001\000\002\001" +
    "\001\000\012\047\273\050\272\076\041\077\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\074\u012f\001\001\000\006\076\300" +
    "\077\035\001\001\000\002\001\001\000\004\074\302\001" +
    "\001\000\102\004\305\005\067\006\066\007\061\010\055" +
    "\011\052\012\072\013\071\014\065\015\063\016\056\017" +
    "\053\020\046\022\047\023\054\025\073\026\045\031\322" +
    "\032\327\033\311\035\312\036\332\037\325\040\326\041" +
    "\307\042\320\043\315\044\303\045\333\047\324\076\041" +
    "\077\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\004\u0105\005\067\006\066\007\061\010\055\011" +
    "\052\012\072\013\071\014\065\015\063\016\056\017\053" +
    "\020\046\022\047\023\054\024\u0106\025\073\026\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\004" +
    "\335\005\067\006\066\007\061\010\055\011\052\012\072" +
    "\013\071\014\065\015\063\016\056\017\053\020\046\022" +
    "\047\023\054\025\073\026\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\004\342\005\067\006\066\007\061\010\055\011\052" +
    "\012\072\013\071\014\065\015\063\016\056\017\053\020" +
    "\046\022\047\023\054\025\073\026\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\074\345\001\001\000" +
    "\102\004\305\005\067\006\066\007\061\010\055\011\052" +
    "\012\072\013\071\014\065\015\063\016\056\017\053\020" +
    "\046\022\047\023\054\025\073\026\045\031\322\032\327" +
    "\033\311\035\312\036\332\037\325\040\326\041\307\042" +
    "\320\043\315\044\303\045\333\047\324\076\041\077\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\004" +
    "\352\005\067\006\066\007\061\010\055\011\052\012\072" +
    "\013\071\014\065\015\063\016\056\017\053\020\046\022" +
    "\047\023\054\025\073\026\045\001\001\000\010\026\355" +
    "\076\356\077\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\357" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\004\363\005\067\006\066\007\061\010\055" +
    "\011\052\012\072\013\071\014\065\015\063\016\056\017" +
    "\053\020\046\022\047\023\054\025\073\026\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\366\001" +
    "\001\000\004\034\370\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\373\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\074\376\001\001" +
    "\000\102\004\305\005\067\006\066\007\061\010\055\011" +
    "\052\012\072\013\071\014\065\015\063\016\056\017\053" +
    "\020\046\022\047\023\054\025\073\026\045\031\322\032" +
    "\327\033\311\035\312\036\332\037\325\040\326\041\307" +
    "\042\320\043\315\044\303\045\333\047\324\076\041\077" +
    "\035\001\001\000\002\001\001\000\004\074\u0101\001\001" +
    "\000\102\004\305\005\067\006\066\007\061\010\055\011" +
    "\052\012\072\013\071\014\065\015\063\016\056\017\053" +
    "\020\046\022\047\023\054\025\073\026\045\031\322\032" +
    "\327\033\311\035\312\036\332\037\325\040\326\041\307" +
    "\042\320\043\315\044\303\045\333\047\324\076\041\077" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\004\u010a\005\067\006\066" +
    "\007\061\010\055\011\052\012\072\013\071\014\065\015" +
    "\063\016\056\017\053\020\046\022\047\023\054\025\073" +
    "\026\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\004\u010f\005\067" +
    "\006\066\007\061\010\055\011\052\012\072\013\071\014" +
    "\065\015\063\016\056\017\053\020\046\022\047\023\054" +
    "\025\073\026\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\074\u0112\001\001\000\102\004\305\005\067" +
    "\006\066\007\061\010\055\011\052\012\072\013\071\014" +
    "\065\015\063\016\056\017\053\020\046\022\047\023\054" +
    "\025\073\026\045\031\322\032\327\033\311\035\312\036" +
    "\332\037\325\040\326\041\307\042\320\043\315\044\303" +
    "\045\333\047\324\076\041\077\035\001\001\000\004\075" +
    "\u0115\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\074\u0118\001\001\000\102\004\305\005" +
    "\067\006\066\007\061\010\055\011\052\012\072\013\071" +
    "\014\065\015\063\016\056\017\053\020\046\022\047\023" +
    "\054\025\073\026\045\031\322\032\327\033\311\035\312" +
    "\036\332\037\325\040\326\041\307\042\320\043\315\044" +
    "\303\045\333\047\324\076\041\077\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\102\004\305\005\067\006" +
    "\066\007\061\010\055\011\052\012\072\013\071\014\065" +
    "\015\063\016\056\017\053\020\046\022\047\023\054\025" +
    "\073\026\045\031\u011c\032\327\033\311\035\312\036\332" +
    "\037\325\040\326\041\307\042\320\043\315\044\303\045" +
    "\333\047\324\076\041\077\035\001\001\000\002\001\001" +
    "\000\044\004\u011e\005\067\006\066\007\061\010\055\011" +
    "\052\012\072\013\071\014\065\015\063\016\056\017\053" +
    "\020\046\022\047\023\054\025\073\026\045\001\001\000" +
    "\002\001\001\000\102\004\305\005\067\006\066\007\061" +
    "\010\055\011\052\012\072\013\071\014\065\015\063\016" +
    "\056\017\053\020\046\022\047\023\054\025\073\026\045" +
    "\031\u0120\032\327\033\311\035\312\036\332\037\325\040" +
    "\326\041\307\042\320\043\315\044\303\045\333\047\324" +
    "\076\041\077\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\074\u0123\001\001\000\102\004\305\005\067" +
    "\006\066\007\061\010\055\011\052\012\072\013\071\014" +
    "\065\015\063\016\056\017\053\020\046\022\047\023\054" +
    "\025\073\026\045\031\322\032\327\033\311\035\312\036" +
    "\332\037\325\040\326\041\307\042\320\043\315\044\303" +
    "\045\333\047\324\076\041\077\035\001\001\000\002\001" +
    "\001\000\044\004\u0127\005\067\006\066\007\061\010\055" +
    "\011\052\012\072\013\071\014\065\015\063\016\056\017" +
    "\053\020\046\022\047\023\054\025\073\026\045\001\001" +
    "\000\010\026\u0129\076\u012a\077\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\u012b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\102\004\305\005\067\006\066" +
    "\007\061\010\055\011\052\012\072\013\071\014\065\015" +
    "\063\016\056\017\053\020\046\022\047\023\054\025\073" +
    "\026\045\031\322\032\327\033\311\035\312\036\332\037" +
    "\325\040\326\041\307\042\320\043\315\044\303\045\333" +
    "\047\324\076\041\077\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\053\u0135\054\271\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\074\u0138\001\001\000\102\004\305\005\067" +
    "\006\066\007\061\010\055\011\052\012\072\013\071\014" +
    "\065\015\063\016\056\017\053\020\046\022\047\023\054" +
    "\025\073\026\045\031\322\032\327\033\311\035\312\036" +
    "\332\037\325\040\326\041\307\042\320\043\315\044\303" +
    "\045\333\047\324\076\041\077\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\052\u013c\001\001\000\012" +
    "\047\u013f\057\u013e\076\041\077\035\001\001\000\002\001" +
    "\001\000\004\062\u0141\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\057\261\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\074" +
    "\u014a\001\001\000\102\004\305\005\067\006\066\007\061" +
    "\010\055\011\052\012\072\013\071\014\065\015\063\016" +
    "\056\017\053\020\046\022\047\023\054\025\073\026\045" +
    "\031\322\032\327\033\311\035\312\036\332\037\325\040" +
    "\326\041\307\042\320\043\315\044\303\045\333\047\324" +
    "\076\041\077\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\u0150" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((LexiconUnit)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= S1 MAIN_INS 
            {
              Program RESULT =null;
		List<Definition> array = (List<Definition>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Function m = (Function)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Program(array, m); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S1 ::= S1 DEF 
            {
              List<Definition> RESULT =null;
		List<Definition> array = (List<Definition>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Definition d = (Definition)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 array.add(d); RESULT = array; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S1",55, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S1 ::= 
            {
              List<Definition> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S1",55, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DEF ::= CLASS_DEF 
            {
              Definition RESULT =null;
		Definition c = (Definition)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEF",50, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DEF ::= STRUCT_DEF 
            {
              Definition RESULT =null;
		Definition s = (Definition)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = s; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEF",50, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DEF ::= DEFINE_DEF 
            {
              Definition RESULT =null;
		Definition d = (Definition)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = d; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEF",50, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DEF ::= TYPEDEF_DEF 
            {
              Definition RESULT =null;
		Definition t = (Definition)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = t; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEF",50, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DEF ::= FUNCTION_DEF 
            {
              Definition RESULT =null;
		Function f = (Function)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = f; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEF",50, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CLASS_DEF ::= CLASS_T ID BRACKET_OPEN DECLARATIONS_CLASS CLASS_INIT BRACKET_CLOSE 
            {
              Definition RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<Declaration> dec_class = (List<Declaration>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ClassFunctions class_func = (ClassFunctions)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Class_Def(id.lexeme, dec_class, class_func); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CLASS_DEF",51, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CLASS_INIT ::= CONSTRUCTOR MORE_CONSTRUCTORS METHODS 
            {
              ClassFunctions RESULT =null;
		Function c = (Function)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		List<Function> constructors = (List<Function>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<Function> methods = (List<Function>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 List<Function> allConstructors = new ArrayList<>(); allConstructors.add(c); allConstructors.addAll(constructors); RESULT = new ClassFunctions(allConstructors, methods); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CLASS_INIT",57, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MORE_CONSTRUCTORS ::= MORE_CONSTRUCTORS CONSTRUCTOR 
            {
              List<Function> RESULT =null;
		List<Function> array = (List<Function>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Function c = (Function)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 array.add(c); RESULT = array; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_CONSTRUCTORS",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MORE_CONSTRUCTORS ::= 
            {
              List<Function> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_CONSTRUCTORS",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONSTRUCTOR ::= ID PARENTESIS_OPEN ARGUMENTS PARENTESIS_CLOSE BRACKET_OPEN FUNCTION_BODY BRACKET_CLOSE 
            {
              Function RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		List<Declaration> args = (List<Declaration>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Function(id.lexeme, args, null, body, null); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // METHODS ::= METHODS VISIBILITY FUNCTION_DEF 
            {
              List<Function> RESULT =null;
		List<Function> array = (List<Function>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Visibility vis = (Visibility)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Function func = (Function)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 func.setVisibility(vis); array.add(func); RESULT = array; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("METHODS",49, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // METHODS ::= 
            {
              List<Function> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("METHODS",49, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VISIBILITY ::= PUBLIC 
            {
              Visibility RESULT =null;
		 RESULT = new Public_Vis(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VISIBILITY",56, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VISIBILITY ::= PRIVATE 
            {
              Visibility RESULT =null;
		 RESULT = new Private_Vis(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VISIBILITY",56, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARATIONS_CLASS ::= DECLARATIONS_CLASS VISIBILITY DECLARATION SEMICOLON 
            {
              List<Declaration> RESULT =null;
		List<Declaration> array = (List<Declaration>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Visibility vis = (Visibility)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Declaration dec = (Declaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 dec.setVisibility(vis); array.add(dec); RESULT = array; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS_CLASS",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARATIONS_CLASS ::= 
            {
              List<Declaration> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS_CLASS",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STRUCT_DEF ::= STRUCT_T ID BRACKET_OPEN DECLARATIONS_STRUCT CONSTRUCTOR MORE_CONSTRUCTORS BRACKET_CLOSE 
            {
              Definition RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		List<Declaration> declarations = (List<Declaration>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Function c = (Function)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		List<Function> constructors = (List<Function>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 List<Function> allConstructors = new ArrayList<>(); allConstructors.add(c); allConstructors.addAll(constructors); RESULT = new Struct(id.lexeme, declarations, allConstructors); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("STRUCT_DEF",52, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARATIONS_STRUCT ::= DECLARATIONS_STRUCT DECLARATION SEMICOLON 
            {
              List<Declaration> RESULT =null;
		List<Declaration> array = (List<Declaration>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Declaration dec = (Declaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 array.add(dec); RESULT = array; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS_STRUCT",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARATIONS_STRUCT ::= 
            {
              List<Declaration> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS_STRUCT",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNCTION_DEF ::= TYPED_FUNCTION 
            {
              Function RESULT =null;
		Function func = (Function)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = func; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUNCTION_DEF",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNCTION_DEF ::= VOID_FUNCTION 
            {
              Function RESULT =null;
		Function func = (Function)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = func; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUNCTION_DEF",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TYPED_FUNCTION ::= FUNC_T ID PARENTESIS_OPEN ARGUMENTS PARENTESIS_CLOSE COLON TYPE BRACKET_OPEN FUNCTION_BODY RETURN RETURN_VALUE SEMICOLON BRACKET_CLOSE 
            {
              Function RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-11)).value;
		List<Declaration> args = (List<Declaration>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-9)).value;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Function(id.lexeme, args, t, body, e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPED_FUNCTION",46, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VOID_FUNCTION ::= FUNC_T ID PARENTESIS_OPEN ARGUMENTS PARENTESIS_CLOSE BRACKET_OPEN FUNCTION_BODY RETURN SEMICOLON BRACKET_CLOSE 
            {
              Function RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).value;
		List<Declaration> args = (List<Declaration>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		 RESULT = new Function(id.lexeme, args, null, body, null); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VOID_FUNCTION",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ARGUMENTS ::= MORE_ARGUMENTS ARGUMENT 
            {
              List<Declaration> RESULT =null;
		List<Declaration> array = (List<Declaration>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Declaration arg = (Declaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 array.add(arg); RESULT = array; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTS",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ARGUMENTS ::= 
            {
              List<Declaration> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTS",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MORE_ARGUMENTS ::= MORE_ARGUMENTS ARGUMENT COMMA 
            {
              List<Declaration> RESULT =null;
		List<Declaration> array = (List<Declaration>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Declaration arg = (Declaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 array.add(arg); RESULT = array; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_ARGUMENTS",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MORE_ARGUMENTS ::= 
            {
              List<Declaration> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_ARGUMENTS",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ARGUMENT ::= DECLARATION 
            {
              Declaration RESULT =null;
		Declaration dec = (Declaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = dec; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENT",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUNCTION_BODY ::= FUNCTION_BODY SENTENCE 
            {
              Block RESULT =null;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Sentence s = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 body.add_instruction(s); RESULT = body; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUNCTION_BODY",58, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUNCTION_BODY ::= 
            {
              Block RESULT =null;
		 RESULT = new Block(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUNCTION_BODY",58, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // RETURN_VALUE ::= EXPRESSION 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RETURN_VALUE",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DEFINE_DEF ::= DEFINE ID LITERAL SEMICOLON 
            {
              Definition RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Define(id.lexeme, e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEFINE_DEF",53, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TYPEDEF_DEF ::= TYPEDEF DECLARATION 
            {
              Definition RESULT =null;
		Declaration dec = (Declaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Typedef(dec); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPEDEF_DEF",54, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARATION ::= TYPE ID ARRAY_CONSTRUCTOR 
            {
              Declaration RESULT =null;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Array_Type array = (Array_Type)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = Declaration.manageDeclaration(t, id.lexeme, array); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ARRAY_CONSTRUCTOR ::= ARRAY_CONSTRUCTOR SQ_BRACKET_OPEN OPT_INTEGER SQ_BRACKET_CLOSE 
            {
              Array_Type RESULT =null;
		Array_Type prevArray = (Array_Type)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 Array_Type newArray = new Array_Type(i); RESULT = Array_Type.updateTypes(newArray, prevArray); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRAY_CONSTRUCTOR",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ARRAY_CONSTRUCTOR ::= 
            {
              Array_Type RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARRAY_CONSTRUCTOR",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ID_PARENTESIS ::= ID PARENTESIS_OPEN EXPRESSIONS PARENTESIS_CLOSE 
            {
              Expression RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		List<Expression> expressions = (List<Expression>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Parentesis_Op(id.lexeme, expressions); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ID_PARENTESIS",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARATION_AND_ASSIGNATION_INS ::= DECLARATION ASSIGNATION_OP EXPRESSION SEMICOLON 
            {
              Sentence RESULT =null;
		Declaration dec = (Declaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new DeclarationAndAssignation(dec, e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION_AND_ASSIGNATION_INS",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARATION_AND_ASSIGNATION_INS ::= DECLARATION ASSIGNATION_OP NEW_OP TYPE ARRAY_CONSTRUCTOR SEMICOLON 
            {
              Sentence RESULT =null;
		Declaration dec = (Declaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Array_Type array = (Array_Type)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new DeclarationAndAssignation(dec, new New_Op(Declaration.manageType(t, array))); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION_AND_ASSIGNATION_INS",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARATION_AND_ASSIGNATION_INS ::= DECLARATION ASSIGNATION_OP NEW_OP ID_PARENTESIS SEMICOLON 
            {
              Sentence RESULT =null;
		Declaration dec = (Declaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new DeclarationAndAssignation(dec, e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION_AND_ASSIGNATION_INS",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ASSIGNATION_INS ::= EXPRESSION ASSIGNATION_OP EXPRESSION SEMICOLON 
            {
              Sentence RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Assignation_Ins(iz, dc) ; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASSIGNATION_INS",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASSIGNATION_INS ::= EXPRESSION ASSIGNATION_OP NEW_OP TYPE ARRAY_CONSTRUCTOR SEMICOLON 
            {
              Sentence RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Array_Type array = (Array_Type)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Assignation_Ins(iz, new New_Op(Declaration.manageType(t, array))); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASSIGNATION_INS",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ASSIGNATION_INS ::= EXPRESSION ASSIGNATION_OP NEW_OP ID_PARENTESIS SEMICOLON 
            {
              Sentence RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Assignation_Ins(iz, dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASSIGNATION_INS",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IF_INS ::= IF PARENTESIS_OPEN EXPRESSION PARENTESIS_CLOSE BRACKET_OPEN FUNCTION_BODY BRACKET_CLOSE ELSE_INS 
            {
              Sentence RESULT =null;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		Block if_body = (Block)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Block else_body = (Block)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new If_Ins(cond, if_body, else_body); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IF_INS",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IF_INS ::= IF error 
            {
              Sentence RESULT =null;
		 RESULT = new Error_Ins(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IF_INS",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ELSE_INS ::= ELSE BRACKET_OPEN FUNCTION_BODY BRACKET_CLOSE 
            {
              Block RESULT =null;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = body; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ELSE_INS",59, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ELSE_INS ::= ELSE error 
            {
              Block RESULT =null;
		 RESULT = new Error_Ins(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ELSE_INS",59, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ELSE_INS ::= 
            {
              Block RESULT =null;
		 RESULT = new Block(new ArrayList<>()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ELSE_INS",59, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SWITCH_INS ::= SWITCH PARENTESIS_OPEN EXPRESSION PARENTESIS_CLOSE BRACKET_OPEN CASES_INS DEFAULT_CASE BRACKET_CLOSE 
            {
              Sentence RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		List<Sentence> array = (List<Sentence>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Sentence default_case = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 array.add(default_case); RESULT = new Switch_Ins(e, new Block(array)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SWITCH_INS",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CASES_INS ::= CASES_INS CASE PARENTESIS_OPEN LITERAL PARENTESIS_CLOSE COLON FUNCTION_BODY 
            {
              List<Sentence> RESULT =null;
		List<Sentence> array = (List<Sentence>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 array.add(new Case_Ins(cond, body)) ; RESULT = array; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASES_INS",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CASES_INS ::= 
            {
              List<Sentence> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASES_INS",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DEFAULT_CASE ::= DEFAULT COLON FUNCTION_BODY BREAK SEMICOLON 
            {
              Sentence RESULT =null;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 body.add_instruction(new Break_Ins()); RESULT = new Default_Ins(body); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEFAULT_CASE",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // WHILE_INS ::= WHILE PARENTESIS_OPEN EXPRESSION PARENTESIS_CLOSE BRACKET_OPEN FUNCTION_BODY BRACKET_CLOSE 
            {
              Sentence RESULT =null;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new While_Ins(cond, body); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("WHILE_INS",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // WHILE_INS ::= WHILE error 
            {
              Sentence RESULT =null;
		 RESULT = new Error_Ins(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("WHILE_INS",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BREAK_INS ::= BREAK SEMICOLON 
            {
              Sentence RESULT =null;
		 RESULT = new Break_Ins(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BREAK_INS",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONTINUE_INS ::= CONTINUE SEMICOLON 
            {
              Sentence RESULT =null;
		 RESULT = new Continue_Ins(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONTINUE_INS",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FOR_INS ::= FOR PARENTESIS_OPEN SENTENCE SEMICOLON EXPRESSION SEMICOLON SENTENCE PARENTESIS_CLOSE BRACKET_OPEN FUNCTION_BODY BRACKET_CLOSE 
            {
              Sentence RESULT =null;
		Sentence s1 = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).value;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		Sentence s2 = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new For_Ins(s1, cond, s2, body); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FOR_INS",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FOR_INS ::= FOR error 
            {
              Sentence RESULT =null;
		 RESULT = new Error_Ins(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FOR_INS",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IO_INS ::= INPUT_INS 
            {
              Sentence RESULT =null;
		Sentence s = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = s; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IO_INS",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IO_INS ::= OUTPUT_INS 
            {
              Sentence RESULT =null;
		Sentence s = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = s; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IO_INS",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // INPUT_INS ::= INPUT_FUNC PARENTESIS_OPEN EXPRESSION PARENTESIS_CLOSE SEMICOLON 
            {
              Sentence RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Input_Ins(e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INPUT_INS",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OUTPUT_INS ::= OUTPUT_FUNC PARENTESIS_OPEN EXPRESSION PARENTESIS_CLOSE SEMICOLON 
            {
              Sentence RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Output_Ins(e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OUTPUT_INS",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // MAIN_INS ::= FUNC_T MAIN PARENTESIS_OPEN PARENTESIS_CLOSE COLON INT_T BRACKET_OPEN FUNCTION_BODY RETURN INTEGER SEMICOLON BRACKET_CLOSE 
            {
              Function RESULT =null;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Function("main", new ArrayList<>(), new Int_Type(), body, new Int_Value(i.lexeme)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MAIN_INS",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESSION ::= B0 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e ; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPRESSION",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESSION ::= error 
            {
              Expression RESULT =null;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPRESSION",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // B0 ::= B1 LESS_OR_EQ_OP B1 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Less_Or_Eq_Op(iz, dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // B0 ::= error LESS_OR_EQ_OP B1 
            {
              Expression RESULT =null;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // B0 ::= B1 LESS_OR_EQ_OP error 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // B0 ::= B1 GREATER_OR_EQ_OP B1 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Greater_Or_Eq_Op(iz, dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // B0 ::= error GREATER_OR_EQ_OP B1 
            {
              Expression RESULT =null;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // B0 ::= B1 GREATER_OR_EQ_OP error 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // B0 ::= B1 LESS_OP B1 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Less_Op(iz, dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // B0 ::= error LESS_OP B1 
            {
              Expression RESULT =null;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // B0 ::= B1 LESS_OP error 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // B0 ::= B1 GREATER_OP B1 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Greater_Op(iz, dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // B0 ::= error GREATER_OP B1 
            {
              Expression RESULT =null;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // B0 ::= B1 GREATER_OP error 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // B0 ::= B1 EQUAL_OP B1 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Equal_Op(iz, dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // B0 ::= error EQUAL_OP B1 
            {
              Expression RESULT =null;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // B0 ::= B1 EQUAL_OP error 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // B0 ::= B1 NOT_EQUAL_OP B1 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Not_Equal_Op(iz, dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // B0 ::= error NOT_EQUAL_OP B1 
            {
              Expression RESULT =null;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // B0 ::= B1 NOT_EQUAL_OP error 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // B0 ::= B1 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // B1 ::= B1 OR_OP B2 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Or_Op(iz, dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B1",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // B1 ::= error OR_OP B2 
            {
              Expression RESULT =null;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B1",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // B1 ::= B1 OR_OP error 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B1",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // B1 ::= B2 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B1",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // B2 ::= B2 AND_OP B3 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new And_Op(iz, dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B2",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // B2 ::= error AND_OP B3 
            {
              Expression RESULT =null;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B2",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // B2 ::= B2 AND_OP error 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B2",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // B2 ::= B3 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B2",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // B3 ::= NOT_OP B4 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Not_Op(e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B3",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // B3 ::= NOT_OP error 
            {
              Expression RESULT =null;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B3",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // B3 ::= B4 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B3",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // B4 ::= E0 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("B4",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // E0 ::= E0 SUM_OP E1 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Sum_Op(iz, dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // E0 ::= error SUM_OP E1 
            {
              Expression RESULT =null;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E0 ::= E0 SUM_OP error 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E0 ::= E0 SUBS_OP E1 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Subs_Op(iz, dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E0 ::= error SUBS_OP E1 
            {
              Expression RESULT =null;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E0 ::= E0 SUBS_OP error 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // E0 ::= SUBS_OP E1 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Minus_Op(e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // E0 ::= SUBS_OP error 
            {
              Expression RESULT =null;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // E0 ::= E1 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // E1 ::= E1 MULT_OP E2 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Mult_Op(iz, dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // E1 ::= error MULT_OP E2 
            {
              Expression RESULT =null;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // E1 ::= E1 MULT_OP error 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // E1 ::= E1 DIV_OP E2 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Div_Op(iz, dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // E1 ::= error DIV_OP E2 
            {
              Expression RESULT =null;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // E1 ::= E1 DIV_OP error 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // E1 ::= E1 MOD_OP E2 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Mod_Op(iz, dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // E1 ::= error MOD_OP E2 
            {
              Expression RESULT =null;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // E1 ::= E1 MOD_OP error 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // E1 ::= E2 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // E2 ::= E3 POW_OP E3 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Pow_Op(iz, dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // E2 ::= error POW_OP E3 
            {
              Expression RESULT =null;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // E2 ::= E3 POW_OP error 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // E2 ::= E3 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // E3 ::= POINTER_OP E4 
            {
              Expression RESULT =null;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Pointer_Op(dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // E3 ::= POINTER_OP error 
            {
              Expression RESULT =null;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // E3 ::= REFERENCE_OP E4 
            {
              Expression RESULT =null;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Reference_Op(dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // E3 ::= REFERENCE_OP error 
            {
              Expression RESULT =null;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // E3 ::= E4 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // E4 ::= E5 FIELD_ACCESS E5 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Field_Access_Op(iz, dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // E4 ::= error FIELD_ACCESS E5 
            {
              Expression RESULT =null;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // E4 ::= E5 FIELD_ACCESS error 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // E4 ::= E5 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // E5 ::= E5 SQ_BRACKET_OPEN EXPRESSION SQ_BRACKET_CLOSE 
            {
              Expression RESULT =null;
		Expression iz = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Sq_Bracket_Op(iz, dc); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // E5 ::= error SQ_BRACKET_OPEN EXPRESSION SQ_BRACKET_CLOSE 
            {
              Expression RESULT =null;
		Expression dc = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Error_Exp(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // E5 ::= E6 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // E6 ::= PARENTESIS_OPEN EXPRESSION PARENTESIS_CLOSE 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // E6 ::= TERMINAL 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // EXPRESSIONS ::= MORE_EXPRESSIONS EXPRESSION 
            {
              List<Expression> RESULT =null;
		List<Expression> array = (List<Expression>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 array.add(e); RESULT = array; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPRESSIONS",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // EXPRESSIONS ::= 
            {
              List<Expression> RESULT =null;
		 RESULT = new ArrayList<Expression>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPRESSIONS",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // MORE_EXPRESSIONS ::= MORE_EXPRESSIONS EXPRESSION COMMA 
            {
              List<Expression> RESULT =null;
		List<Expression> array = (List<Expression>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 array.add(e); RESULT = array; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_EXPRESSIONS",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // MORE_EXPRESSIONS ::= 
            {
              List<Expression> RESULT =null;
		 RESULT = new ArrayList<Expression>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MORE_EXPRESSIONS",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // TERMINAL ::= LITERAL 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TERMINAL",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // TERMINAL ::= ID_EX 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TERMINAL",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // TYPE ::= BASIC_TYPE REFERENCE_OP 
            {
              Type RESULT =null;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Reference_Type(t); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",60, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // TYPE ::= BASIC_TYPE 
            {
              Type RESULT =null;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = t; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",60, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // BASIC_TYPE ::= INT_T 
            {
              Type RESULT =null;
		 RESULT = new Int_Type(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BASIC_TYPE",61, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // BASIC_TYPE ::= BOOLEAN_T 
            {
              Type RESULT =null;
		 RESULT = new Bool_Type(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BASIC_TYPE",61, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // BASIC_TYPE ::= ID 
            {
              Type RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Id_Type(id.lexeme); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BASIC_TYPE",61, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // BASIC_TYPE ::= BASIC_TYPE POINTER_OP 
            {
              Type RESULT =null;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Pointer_Type(t); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BASIC_TYPE",61, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // OPT_INTEGER ::= EXPRESSION 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPT_INTEGER",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // OPT_INTEGER ::= 
            {
              Expression RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPT_INTEGER",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // SENTENCE ::= DECLARATION SEMICOLON 
            {
              Sentence RESULT =null;
		Declaration e = (Declaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // SENTENCE ::= ASSIGNATION_INS 
            {
              Sentence RESULT =null;
		Sentence e = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // SENTENCE ::= DECLARATION_AND_ASSIGNATION_INS 
            {
              Sentence RESULT =null;
		Sentence e = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // SENTENCE ::= IF_INS 
            {
              Sentence RESULT =null;
		Sentence e = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // SENTENCE ::= SWITCH_INS 
            {
              Sentence RESULT =null;
		Sentence e = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // SENTENCE ::= WHILE_INS 
            {
              Sentence RESULT =null;
		Sentence e = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // SENTENCE ::= FOR_INS 
            {
              Sentence RESULT =null;
		Sentence e = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // SENTENCE ::= BREAK_INS 
            {
              Sentence RESULT =null;
		Sentence e = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // SENTENCE ::= CONTINUE_INS 
            {
              Sentence RESULT =null;
		Sentence e = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // SENTENCE ::= IO_INS 
            {
              Sentence RESULT =null;
		Sentence e = (Sentence)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // SENTENCE ::= SEMICOLON 
            {
              Sentence RESULT =null;
		 RESULT = new Empty_Ins(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SENTENCE",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // ID_EX ::= THIS FIELD_ACCESS ID 
            {
              Expression RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new This_Op(id.lexeme); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ID_EX",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // ID_EX ::= ID 
            {
              Expression RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Id_Value(id.lexeme); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ID_EX",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // ID_EX ::= ID_PARENTESIS 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e ; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ID_EX",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // LITERAL ::= INTEGER 
            {
              Expression RESULT =null;
		TokenValue e = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Int_Value(e.lexeme); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LITERAL",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // LITERAL ::= TRUE 
            {
              Expression RESULT =null;
		 RESULT = new Bool_Value(true); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LITERAL",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // LITERAL ::= FALSE 
            {
              Expression RESULT =null;
		 RESULT = new Bool_Value(false); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LITERAL",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

